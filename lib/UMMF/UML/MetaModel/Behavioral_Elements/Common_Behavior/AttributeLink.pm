# -*- perl -*-
# DO NOT EDIT - This file is generated by UMMF; http://ummf.sourceforge.net 
# From template: $Id: PerlTemplate.txt,v 1.74 2004/08/01 03:50:07 kstephens Exp $

package UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink;

#use 5.6.1;
use strict;
use warnings;

#################################################################
# Version
#

our $VERSION = do { my @r = (q{1.0} =~ /\d+/g); sprintf "%d." . "%03d" x $#r, @r };


#################################################################
# Documentation
#

=head1 NAME

UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink -- 

=head1 VERSION

1.0

=head1 SYNOPSIS

=head1 DESCRIPTION 

=head1 USAGE

=head1 EXPORT

=head1 METATYPE

L<UMMF::UML::MetaModel::Foundation::Core::Class|UMMF::UML::MetaModel::Foundation::Core::Class>

=head1 SUPERCLASSES

L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>




=head1 ATTRIBUTES

I<NO ATTRIBUTES>


=head1 ASSOCIATIONS


=head2 C<0..*> : C<attributeLink> E<lt>---E<gt>  C<attribute> : UMMF::UML::MetaModel::Foundation::Core::Attribute C<1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<slot> E<lt>---E<gt>  C<instance> : UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance C<1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<composite>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<qualifierValue> E<lt>---E<gt>  C<linkEnd> : UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd C<0..1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd>

=item multiplicity = C<0..1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<composite>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<attributeLink> E<lt>---E<gt>  C<value> : UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance C<1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back



=head1 METHODS

=cut



#################################################################
# Dependencies
#





use Carp qw(croak confess);
use Set::Object 1.05;
use Class::Multimethods 1.70;
use Data::Dumper;
use Scalar::Util qw(weaken);
use UMMF::UML::MetaModel::__ObjectBase qw(:__ummf_array);


#################################################################
# Generalizations
#

use base qw(
  UMMF::UML::MetaModel::Foundation::Core::ModelElement



);


#################################################################
# Exports
#

our @EXPORT_OK = qw(
);
our %EXPORT_TAGS = ( 'all' => \@EXPORT_OK );





#################################################################
# Validation
#


=head2 C<__validate_type>

  UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink->__validate_type($value);

Returns true if C<$value> is a valid representation of L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>.

=cut
sub __validate_type($$)
{
  my ($self, $x) = @_;

  no warnings;

  UNIVERSAL::isa($x, 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink')  ;
}


=head2 C<__typecheck>

  UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink->__typecheck($value, $msg);

Calls C<confess()> with C<$msg> if C<<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink->__validate_type($value)>> is false.

=cut
sub __typecheck
{
  my ($self, $x, $msg) = @_;

  confess("typecheck: $msg: type '" . 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink' . ": value '$x'")
    unless __validate_type($self, $x);
}


=head2 C<isaAttributeLink>


Returns true if receiver is a L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>.
Other receivers will return false.

=cut
sub isaAttributeLink { 1 }


=head2 C<isaBehavioral_Elements__Common_Behavior__AttributeLink>


Returns true if receiver is a L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>.
Other receivers will return false.
This is the fully qualified version of the C<isaAttributeLink> method.

=cut
sub isaBehavioral_Elements__Common_Behavior__AttributeLink { 1 }


#################################################################
# Introspection
#

=head2 C<__model_name> 

  my $name = $obj_or_package->__model_name;

Returns the UML Model name (C<'Behavioral_Elements::Common_Behavior::AttributeLink'>) for an object or package of
this Classifier.

=cut
sub __model_name { 'Behavioral_Elements::Common_Behavior::AttributeLink' }



=head2 C<__isAbstract>

  $package->__isAbstract;

Returns C<0>.

=cut
sub __isAbstract { 0; }


my $__tangram_schema;
=head2 C<__tangram_schema>

  my $tangram_schema $obj_or_package->__tangram_schema

Returns a HASH ref that describes this Classifier for Tangram.

See L<UMMF::UML::Export::Perl::Tangram|UMMF::UML::Export::Perl::Tangram>

=cut
sub __tangram_schema
{
  my ($self) = @_;

  $__tangram_schema ||=
  {
   'classes' =>
   [
     'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink' =>
     {
       'table' => 'Behavioral_Elements__Common_Behavior__AttributeLink',
       'abstract' => 0,
       'slots' => 
       { 
	 # Attributes
	 
	 # Associations
	 	 	       'attribute'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::Attribute',

                                             'col' => 'attribute', 

                                                                                                                   }
      ,
                  	 	       'instance'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance',

                                             'col' => 'instance', 

                                                                                                                   }
      ,
                  	 	       'linkEnd'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd',

                  'null' => '1', 

                                    'col' => 'linkEnd', 

                                                                                                                   }
      ,
                  	 	       'value'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance',

                                             'col' => 'value', 

                                                                                                                   }
      ,
                         },
       'bases' => [  'UMMF::UML::MetaModel::Foundation::Core::ModelElement',  ],
       'sql' => {

       },
     },
   ],

   'sql' =>
   {
    # Note Tangram::Ref::get_exporter() has
    # "UPDATE $table SET $self->{col} = $refid WHERE id = $id",
    # The id_col is hard-coded, 
    # Thus id_col will not work.
    #'id_col' => '__sid',
    #'class_col' => '__stype',
   },
     # 'set_id' => sub { }
     # 'get_id' => sub { }

      
  };
}


#################################################################
# Class Attributes
#


    

#################################################################
# Class Associations
#


    

#################################################################
# Initialization
#


=head2 C<___initialize>

Initialize all Attributes and AssociationEnds in a instance of this Classifier.
Does B<not> initalize slots in its Generalizations.

See also: C<__initialize>.

=cut
sub ___initialize
{
  my ($self) = @_;

  # Attributes



  # Associations

  # AssociationEnd 
  #  attributeLink 0..*
  #  <--> 
  #  attribute 1 UMMF::UML::MetaModel::Foundation::Core::Attribute.
    if ( defined $self->{'attribute'} ) {
    my $x = $self->{'attribute'};
    $self->{'attribute'} = undef;
    $self->set_attribute($x);
  }
  
  # AssociationEnd 
  #  slot 0..*
  #  <--> 
  #  instance 1 UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.
    if ( defined $self->{'instance'} ) {
    my $x = $self->{'instance'};
    $self->{'instance'} = undef;
    $self->set_instance($x);
  }
  
  # AssociationEnd 
  #  qualifierValue 0..*
  #  <--> 
  #  linkEnd 0..1 UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd.
    if ( defined $self->{'linkEnd'} ) {
    my $x = $self->{'linkEnd'};
    $self->{'linkEnd'} = undef;
    $self->set_linkEnd($x);
  }
  
  # AssociationEnd 
  #  attributeLink 0..*
  #  <--> 
  #  value 1 UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.
    if ( defined $self->{'value'} ) {
    my $x = $self->{'value'};
    $self->{'value'} = undef;
    $self->set_value($x);
  }
  

  $self;
}


my $__initialize_use;

=head2 C<__initialize>

Initialize all slots in this Classifier and all its Generalizations.

See also: C<___initialize>.

=cut
sub __initialize
{
  my ($self) = @_;

  # $DB::single = 1;

  unless ( ! $__initialize_use ) {
    $__initialize_use = 1;
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Element');
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::ModelElement');
  }

  $self->UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink::___initialize;
  $self->UMMF::UML::MetaModel::Foundation::Core::Element::___initialize;
  $self->UMMF::UML::MetaModel::Foundation::Core::ModelElement::___initialize;

  $self;
}
      

=head2 C<__create>

Calls all <<create>> Methods for this Classifier and all Generalizations.

See also: C<___create>.

=cut
sub __create
{
  my ($self, @args) = @_;

  # $DB::single = 1;
  $self->UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink::___create(@args);
  $self->UMMF::UML::MetaModel::Foundation::Core::Element::___create();
  $self->UMMF::UML::MetaModel::Foundation::Core::ModelElement::___create();

  $self;
}




#################################################################
# Attributes
#




#################################################################
# Association
#


=for html <hr/>

=cut

#################################################################
# AssociationEnd attributeLink <---> attribute
# type = UMMF::UML::MetaModel::Foundation::Core::Attribute
# multiplicity = 1
# ordering = 

=head2 C<attribute>

  my $val = $obj->attribute;

Returns the AssociationEnd C<attribute> value of type L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>.

=cut
sub attribute ($)
{
  my ($self) = @_;
		  
  $self->{'attribute'};
}


=head2 C<set_attribute>

  $obj->set_attribute($val);

Sets the AssociationEnd C<attribute> value.
C<$val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>.
Returns C<$obj>.

=cut
sub set_attribute ($$)
{
  my ($self, $val) = @_;
		  
  no warnings; # Use of uninitialized value in string ne at ...
		  
  my $old;
  if ( ($old = $self->{'attribute'}) ne $val ) { # Recursion lock

    if ( defined $val ) { $self->__use('UMMF::UML::MetaModel::Foundation::Core::Attribute')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink.attribute") }

    # Recursion lock
        $self->{'attribute'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_attributeLink($self) if $old;
    $val->add_attributeLink($self)    if $val;

    }
		  
  $self;
}


=head2 C<add_attribute>

  $obj->add_attribute($val);

Adds the AssociationEnd C<attribute> value.
C<$val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>.
Throws exception if a value already exists.
Returns C<$obj>.

=cut
sub add_attribute ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'attribute'}) ne $val ) { # Recursion lock
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Attribute')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink.attribute");
      
    # confess("UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink::attribute: too many")
    # if defined $self->{'attribute'};

    # Recursion lock
        $self->{'attribute'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_attributeLink($self) if $old;
    $val->add_attributeLink($self)    if $val;

  
  }

  $self;
}


=head2 C<remove_attribute>

  $obj->remove_attribute($val);

Removes the AssociationEnd C<attribute> value C<$val>.
Returns C<$obj>.

=cut
sub remove_attribute ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'attribute'}) eq $val ) { # Recursion lock
    $val = $self->{'attribute'} = undef;         # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_attributeLink($self) if $old;
    $val->add_attributeLink($self)    if $val;

  
  }
}


=head2 C<clear_attribute>

  $obj->clear_attribute;

Clears the AssociationEnd C<attribute> links to L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>.
Returns C<$obj>.

=cut
sub clear_attribute ($@)
{
  my ($self) = @_;

  my $old;
  if ( defined ($old = $self->{'attribute'}) ) { # Recursion lock
    my $val = $self->{'attribute'} = undef;      # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_attributeLink($self) if $old;
    $val->add_attributeLink($self)    if $val;

    }

  $self;
}


=head2 C<count_attribute>

  $obj->count_attribute;

Returns the number of elements of type L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute> associated with C<attribute>.

=cut
sub count_attribute ($)
{
  my ($self) = @_;

  my $x = $self->{'attribute'};

  defined $x ? 1 : 0;
}




=for html <hr/>

=cut

#################################################################
# AssociationEnd slot <---> instance
# type = UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance
# multiplicity = 1
# ordering = 

=head2 C<instance>

  my $val = $obj->instance;

Returns the AssociationEnd C<instance> value of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.

=cut
sub instance ($)
{
  my ($self) = @_;
		  
  $self->{'instance'};
}


=head2 C<set_instance>

  $obj->set_instance($val);

Sets the AssociationEnd C<instance> value.
C<$val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.
Returns C<$obj>.

=cut
sub set_instance ($$)
{
  my ($self, $val) = @_;
		  
  no warnings; # Use of uninitialized value in string ne at ...
		  
  my $old;
  if ( ($old = $self->{'instance'}) ne $val ) { # Recursion lock

    if ( defined $val ) { $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink.instance") }

    # Recursion lock
        $self->{'instance'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_slot($self) if $old;
    $val->add_slot($self)    if $val;

    }
		  
  $self;
}


=head2 C<add_instance>

  $obj->add_instance($val);

Adds the AssociationEnd C<instance> value.
C<$val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.
Throws exception if a value already exists.
Returns C<$obj>.

=cut
sub add_instance ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'instance'}) ne $val ) { # Recursion lock
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink.instance");
      
    # confess("UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink::instance: too many")
    # if defined $self->{'instance'};

    # Recursion lock
        $self->{'instance'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_slot($self) if $old;
    $val->add_slot($self)    if $val;

  
  }

  $self;
}


=head2 C<remove_instance>

  $obj->remove_instance($val);

Removes the AssociationEnd C<instance> value C<$val>.
Returns C<$obj>.

=cut
sub remove_instance ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'instance'}) eq $val ) { # Recursion lock
    $val = $self->{'instance'} = undef;         # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_slot($self) if $old;
    $val->add_slot($self)    if $val;

  
  }
}


=head2 C<clear_instance>

  $obj->clear_instance;

Clears the AssociationEnd C<instance> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.
Returns C<$obj>.

=cut
sub clear_instance ($@)
{
  my ($self) = @_;

  my $old;
  if ( defined ($old = $self->{'instance'}) ) { # Recursion lock
    my $val = $self->{'instance'} = undef;      # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_slot($self) if $old;
    $val->add_slot($self)    if $val;

    }

  $self;
}


=head2 C<count_instance>

  $obj->count_instance;

Returns the number of elements of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance> associated with C<instance>.

=cut
sub count_instance ($)
{
  my ($self) = @_;

  my $x = $self->{'instance'};

  defined $x ? 1 : 0;
}




=for html <hr/>

=cut

#################################################################
# AssociationEnd qualifierValue <---> linkEnd
# type = UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd
# multiplicity = 0..1
# ordering = 

=head2 C<linkEnd>

  my $val = $obj->linkEnd;

Returns the AssociationEnd C<linkEnd> value of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd>.

=cut
sub linkEnd ($)
{
  my ($self) = @_;
		  
  $self->{'linkEnd'};
}


=head2 C<set_linkEnd>

  $obj->set_linkEnd($val);

Sets the AssociationEnd C<linkEnd> value.
C<$val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd>.
Returns C<$obj>.

=cut
sub set_linkEnd ($$)
{
  my ($self, $val) = @_;
		  
  no warnings; # Use of uninitialized value in string ne at ...
		  
  my $old;
  if ( ($old = $self->{'linkEnd'}) ne $val ) { # Recursion lock

    if ( defined $val ) { $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink.linkEnd") }

    # Recursion lock
        $self->{'linkEnd'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_qualifierValue($self) if $old;
    $val->add_qualifierValue($self)    if $val;

    }
		  
  $self;
}


=head2 C<add_linkEnd>

  $obj->add_linkEnd($val);

Adds the AssociationEnd C<linkEnd> value.
C<$val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd>.
Throws exception if a value already exists.
Returns C<$obj>.

=cut
sub add_linkEnd ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'linkEnd'}) ne $val ) { # Recursion lock
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink.linkEnd");
      
    # confess("UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink::linkEnd: too many")
    # if defined $self->{'linkEnd'};

    # Recursion lock
        $self->{'linkEnd'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_qualifierValue($self) if $old;
    $val->add_qualifierValue($self)    if $val;

  
  }

  $self;
}


=head2 C<remove_linkEnd>

  $obj->remove_linkEnd($val);

Removes the AssociationEnd C<linkEnd> value C<$val>.
Returns C<$obj>.

=cut
sub remove_linkEnd ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'linkEnd'}) eq $val ) { # Recursion lock
    $val = $self->{'linkEnd'} = undef;         # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_qualifierValue($self) if $old;
    $val->add_qualifierValue($self)    if $val;

  
  }
}


=head2 C<clear_linkEnd>

  $obj->clear_linkEnd;

Clears the AssociationEnd C<linkEnd> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd>.
Returns C<$obj>.

=cut
sub clear_linkEnd ($@)
{
  my ($self) = @_;

  my $old;
  if ( defined ($old = $self->{'linkEnd'}) ) { # Recursion lock
    my $val = $self->{'linkEnd'} = undef;      # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_qualifierValue($self) if $old;
    $val->add_qualifierValue($self)    if $val;

    }

  $self;
}


=head2 C<count_linkEnd>

  $obj->count_linkEnd;

Returns the number of elements of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd> associated with C<linkEnd>.

=cut
sub count_linkEnd ($)
{
  my ($self) = @_;

  my $x = $self->{'linkEnd'};

  defined $x ? 1 : 0;
}




=for html <hr/>

=cut

#################################################################
# AssociationEnd attributeLink <---> value
# type = UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance
# multiplicity = 1
# ordering = 

=head2 C<value>

  my $val = $obj->value;

Returns the AssociationEnd C<value> value of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.

=cut
sub value ($)
{
  my ($self) = @_;
		  
  $self->{'value'};
}


=head2 C<set_value>

  $obj->set_value($val);

Sets the AssociationEnd C<value> value.
C<$val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.
Returns C<$obj>.

=cut
sub set_value ($$)
{
  my ($self, $val) = @_;
		  
  no warnings; # Use of uninitialized value in string ne at ...
		  
  my $old;
  if ( ($old = $self->{'value'}) ne $val ) { # Recursion lock

    if ( defined $val ) { $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink.value") }

    # Recursion lock
        $self->{'value'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_attributeLink($self) if $old;
    $val->add_attributeLink($self)    if $val;

    }
		  
  $self;
}


=head2 C<add_value>

  $obj->add_value($val);

Adds the AssociationEnd C<value> value.
C<$val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.
Throws exception if a value already exists.
Returns C<$obj>.

=cut
sub add_value ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'value'}) ne $val ) { # Recursion lock
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink.value");
      
    # confess("UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink::value: too many")
    # if defined $self->{'value'};

    # Recursion lock
        $self->{'value'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_attributeLink($self) if $old;
    $val->add_attributeLink($self)    if $val;

  
  }

  $self;
}


=head2 C<remove_value>

  $obj->remove_value($val);

Removes the AssociationEnd C<value> value C<$val>.
Returns C<$obj>.

=cut
sub remove_value ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'value'}) eq $val ) { # Recursion lock
    $val = $self->{'value'} = undef;         # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_attributeLink($self) if $old;
    $val->add_attributeLink($self)    if $val;

  
  }
}


=head2 C<clear_value>

  $obj->clear_value;

Clears the AssociationEnd C<value> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.
Returns C<$obj>.

=cut
sub clear_value ($@)
{
  my ($self) = @_;

  my $old;
  if ( defined ($old = $self->{'value'}) ) { # Recursion lock
    my $val = $self->{'value'} = undef;      # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_attributeLink($self) if $old;
    $val->add_attributeLink($self)    if $val;

    }

  $self;
}


=head2 C<count_value>

  $obj->count_value;

Returns the number of elements of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance> associated with C<value>.

=cut
sub count_value ($)
{
  my ($self) = @_;

  my $x = $self->{'value'};

  defined $x ? 1 : 0;
}







# End of Class AttributeLink


=pod

=for html <hr/>

I<END OF DOCUMENT>

=cut

############################################################################

1; # is true!

############################################################################

### Keep these comments at end of file: kstephens@users.sourceforge.net 2003/04/06 ###
### Local Variables: ###
### mode:perl ###
### perl-indent-level:2 ###
### perl-continued-statement-offset:0 ###
### perl-brace-offset:0 ###
### perl-label-offset:0 ###
### End: ###

