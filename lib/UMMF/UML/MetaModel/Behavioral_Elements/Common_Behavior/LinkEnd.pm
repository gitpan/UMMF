# -*- perl -*-
# DO NOT EDIT - This file is generated by UMMF; http://ummf.sourceforge.net 
# From template: $Id: PerlTemplate.txt,v 1.74 2004/08/01 03:50:07 kstephens Exp $

package UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd;

#use 5.6.1;
use strict;
use warnings;

#################################################################
# Version
#

our $VERSION = do { my @r = (q{1.0} =~ /\d+/g); sprintf "%d." . "%03d" x $#r, @r };


#################################################################
# Documentation
#

=head1 NAME

UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd -- 

=head1 VERSION

1.0

=head1 SYNOPSIS

=head1 DESCRIPTION 

=head1 USAGE

=head1 EXPORT

=head1 METATYPE

L<UMMF::UML::MetaModel::Foundation::Core::Class|UMMF::UML::MetaModel::Foundation::Core::Class>

=head1 SUPERCLASSES

L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>




=head1 ATTRIBUTES

I<NO ATTRIBUTES>


=head1 ASSOCIATIONS


=head2 C<0..*> : C<linkEnd> E<lt>---E<gt>  C<associationEnd> : UMMF::UML::MetaModel::Foundation::Core::AssociationEnd C<1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<linkEnd> E<lt>---E<gt>  C<instance> : UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance C<1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<2..*> : C<connection> E<lt>---E<gt>  C<link> : UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link C<1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<composite>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<0..1> : C<linkEnd> E<lt>---E<gt>  C<qualifierValue> : UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<ordered>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<ARRAY>

=back



=head1 METHODS

=cut



#################################################################
# Dependencies
#





use Carp qw(croak confess);
use Set::Object 1.05;
use Class::Multimethods 1.70;
use Data::Dumper;
use Scalar::Util qw(weaken);
use UMMF::UML::MetaModel::__ObjectBase qw(:__ummf_array);


#################################################################
# Generalizations
#

use base qw(
  UMMF::UML::MetaModel::Foundation::Core::ModelElement



);


#################################################################
# Exports
#

our @EXPORT_OK = qw(
);
our %EXPORT_TAGS = ( 'all' => \@EXPORT_OK );





#################################################################
# Validation
#


=head2 C<__validate_type>

  UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd->__validate_type($value);

Returns true if C<$value> is a valid representation of L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd>.

=cut
sub __validate_type($$)
{
  my ($self, $x) = @_;

  no warnings;

  UNIVERSAL::isa($x, 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd')  ;
}


=head2 C<__typecheck>

  UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd->__typecheck($value, $msg);

Calls C<confess()> with C<$msg> if C<<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd->__validate_type($value)>> is false.

=cut
sub __typecheck
{
  my ($self, $x, $msg) = @_;

  confess("typecheck: $msg: type '" . 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd' . ": value '$x'")
    unless __validate_type($self, $x);
}


=head2 C<isaLinkEnd>


Returns true if receiver is a L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd>.
Other receivers will return false.

=cut
sub isaLinkEnd { 1 }


=head2 C<isaBehavioral_Elements__Common_Behavior__LinkEnd>


Returns true if receiver is a L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd>.
Other receivers will return false.
This is the fully qualified version of the C<isaLinkEnd> method.

=cut
sub isaBehavioral_Elements__Common_Behavior__LinkEnd { 1 }


#################################################################
# Introspection
#

=head2 C<__model_name> 

  my $name = $obj_or_package->__model_name;

Returns the UML Model name (C<'Behavioral_Elements::Common_Behavior::LinkEnd'>) for an object or package of
this Classifier.

=cut
sub __model_name { 'Behavioral_Elements::Common_Behavior::LinkEnd' }



=head2 C<__isAbstract>

  $package->__isAbstract;

Returns C<0>.

=cut
sub __isAbstract { 0; }


my $__tangram_schema;
=head2 C<__tangram_schema>

  my $tangram_schema $obj_or_package->__tangram_schema

Returns a HASH ref that describes this Classifier for Tangram.

See L<UMMF::UML::Export::Perl::Tangram|UMMF::UML::Export::Perl::Tangram>

=cut
sub __tangram_schema
{
  my ($self) = @_;

  $__tangram_schema ||=
  {
   'classes' =>
   [
     'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd' =>
     {
       'table' => 'Behavioral_Elements__Common_Behavior__LinkEnd',
       'abstract' => 0,
       'slots' => 
       { 
	 # Attributes
	 
	 # Associations
	 	 	       'associationEnd'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::AssociationEnd',

                                             'col' => 'associationEnd', 

                                                                                                                   }
      ,
                  	 	       'instance'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance',

                                             'col' => 'instance', 

                                                                                                                   }
      ,
                  	 	       'link'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link',

                                             'col' => 'link', 

                                                                                                                   }
      ,
                  	 	       'qualifierValue'
       => {
	 'type_impl' => 'iarray',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink',

                           'table' => 'Behavioral_Elements__Common_Behavior__LinkEnd__qualifierValue', 

                                                               'coll' => 'linkEnd',

                  'slot' => 'linkEnd_i', 

                                    'aggreg' => '1', 

                                           }
      ,
                         },
       'bases' => [  'UMMF::UML::MetaModel::Foundation::Core::ModelElement',  ],
       'sql' => {

       },
     },
   ],

   'sql' =>
   {
    # Note Tangram::Ref::get_exporter() has
    # "UPDATE $table SET $self->{col} = $refid WHERE id = $id",
    # The id_col is hard-coded, 
    # Thus id_col will not work.
    #'id_col' => '__sid',
    #'class_col' => '__stype',
   },
     # 'set_id' => sub { }
     # 'get_id' => sub { }

      
  };
}


#################################################################
# Class Attributes
#


    

#################################################################
# Class Associations
#


    

#################################################################
# Initialization
#


=head2 C<___initialize>

Initialize all Attributes and AssociationEnds in a instance of this Classifier.
Does B<not> initalize slots in its Generalizations.

See also: C<__initialize>.

=cut
sub ___initialize
{
  my ($self) = @_;

  # Attributes



  # Associations

  # AssociationEnd 
  #  linkEnd 0..*
  #  <--> 
  #  associationEnd 1 UMMF::UML::MetaModel::Foundation::Core::AssociationEnd.
    if ( defined $self->{'associationEnd'} ) {
    my $x = $self->{'associationEnd'};
    $self->{'associationEnd'} = undef;
    $self->set_associationEnd($x);
  }
  
  # AssociationEnd 
  #  linkEnd 0..*
  #  <--> 
  #  instance 1 UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.
    if ( defined $self->{'instance'} ) {
    my $x = $self->{'instance'};
    $self->{'instance'} = undef;
    $self->set_instance($x);
  }
  
  # AssociationEnd 
  #  connection 2..*
  #  <--> 
  #  link 1 UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link.
    if ( defined $self->{'link'} ) {
    my $x = $self->{'link'};
    $self->{'link'} = undef;
    $self->set_link($x);
  }
  
  # AssociationEnd 
  #  linkEnd 0..1
  #  <--> 
  #  qualifierValue 0..* UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink.
    if ( defined $self->{'qualifierValue'} ) {
    my $x = $self->{'qualifierValue'};
        $self->{'qualifierValue'} = [ ];
        $self->set_qualifierValue(@$x);
  }
  

  $self;
}


my $__initialize_use;

=head2 C<__initialize>

Initialize all slots in this Classifier and all its Generalizations.

See also: C<___initialize>.

=cut
sub __initialize
{
  my ($self) = @_;

  # $DB::single = 1;

  unless ( ! $__initialize_use ) {
    $__initialize_use = 1;
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Element');
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::ModelElement');
  }

  $self->UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd::___initialize;
  $self->UMMF::UML::MetaModel::Foundation::Core::Element::___initialize;
  $self->UMMF::UML::MetaModel::Foundation::Core::ModelElement::___initialize;

  $self;
}
      

=head2 C<__create>

Calls all <<create>> Methods for this Classifier and all Generalizations.

See also: C<___create>.

=cut
sub __create
{
  my ($self, @args) = @_;

  # $DB::single = 1;
  $self->UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd::___create(@args);
  $self->UMMF::UML::MetaModel::Foundation::Core::Element::___create();
  $self->UMMF::UML::MetaModel::Foundation::Core::ModelElement::___create();

  $self;
}




#################################################################
# Attributes
#




#################################################################
# Association
#


=for html <hr/>

=cut

#################################################################
# AssociationEnd linkEnd <---> associationEnd
# type = UMMF::UML::MetaModel::Foundation::Core::AssociationEnd
# multiplicity = 1
# ordering = 

=head2 C<associationEnd>

  my $val = $obj->associationEnd;

Returns the AssociationEnd C<associationEnd> value of type L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>.

=cut
sub associationEnd ($)
{
  my ($self) = @_;
		  
  $self->{'associationEnd'};
}


=head2 C<set_associationEnd>

  $obj->set_associationEnd($val);

Sets the AssociationEnd C<associationEnd> value.
C<$val> must of type L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>.
Returns C<$obj>.

=cut
sub set_associationEnd ($$)
{
  my ($self, $val) = @_;
		  
  no warnings; # Use of uninitialized value in string ne at ...
		  
  my $old;
  if ( ($old = $self->{'associationEnd'}) ne $val ) { # Recursion lock

    if ( defined $val ) { $self->__use('UMMF::UML::MetaModel::Foundation::Core::AssociationEnd')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd.associationEnd") }

    # Recursion lock
        $self->{'associationEnd'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_linkEnd($self) if $old;
    $val->add_linkEnd($self)    if $val;

    }
		  
  $self;
}


=head2 C<add_associationEnd>

  $obj->add_associationEnd($val);

Adds the AssociationEnd C<associationEnd> value.
C<$val> must of type L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>.
Throws exception if a value already exists.
Returns C<$obj>.

=cut
sub add_associationEnd ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'associationEnd'}) ne $val ) { # Recursion lock
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::AssociationEnd')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd.associationEnd");
      
    # confess("UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd::associationEnd: too many")
    # if defined $self->{'associationEnd'};

    # Recursion lock
        $self->{'associationEnd'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_linkEnd($self) if $old;
    $val->add_linkEnd($self)    if $val;

  
  }

  $self;
}


=head2 C<remove_associationEnd>

  $obj->remove_associationEnd($val);

Removes the AssociationEnd C<associationEnd> value C<$val>.
Returns C<$obj>.

=cut
sub remove_associationEnd ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'associationEnd'}) eq $val ) { # Recursion lock
    $val = $self->{'associationEnd'} = undef;         # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_linkEnd($self) if $old;
    $val->add_linkEnd($self)    if $val;

  
  }
}


=head2 C<clear_associationEnd>

  $obj->clear_associationEnd;

Clears the AssociationEnd C<associationEnd> links to L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>.
Returns C<$obj>.

=cut
sub clear_associationEnd ($@)
{
  my ($self) = @_;

  my $old;
  if ( defined ($old = $self->{'associationEnd'}) ) { # Recursion lock
    my $val = $self->{'associationEnd'} = undef;      # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_linkEnd($self) if $old;
    $val->add_linkEnd($self)    if $val;

    }

  $self;
}


=head2 C<count_associationEnd>

  $obj->count_associationEnd;

Returns the number of elements of type L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd> associated with C<associationEnd>.

=cut
sub count_associationEnd ($)
{
  my ($self) = @_;

  my $x = $self->{'associationEnd'};

  defined $x ? 1 : 0;
}




=for html <hr/>

=cut

#################################################################
# AssociationEnd linkEnd <---> instance
# type = UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance
# multiplicity = 1
# ordering = 

=head2 C<instance>

  my $val = $obj->instance;

Returns the AssociationEnd C<instance> value of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.

=cut
sub instance ($)
{
  my ($self) = @_;
		  
  $self->{'instance'};
}


=head2 C<set_instance>

  $obj->set_instance($val);

Sets the AssociationEnd C<instance> value.
C<$val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.
Returns C<$obj>.

=cut
sub set_instance ($$)
{
  my ($self, $val) = @_;
		  
  no warnings; # Use of uninitialized value in string ne at ...
		  
  my $old;
  if ( ($old = $self->{'instance'}) ne $val ) { # Recursion lock

    if ( defined $val ) { $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd.instance") }

    # Recursion lock
        $self->{'instance'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_linkEnd($self) if $old;
    $val->add_linkEnd($self)    if $val;

    }
		  
  $self;
}


=head2 C<add_instance>

  $obj->add_instance($val);

Adds the AssociationEnd C<instance> value.
C<$val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.
Throws exception if a value already exists.
Returns C<$obj>.

=cut
sub add_instance ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'instance'}) ne $val ) { # Recursion lock
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd.instance");
      
    # confess("UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd::instance: too many")
    # if defined $self->{'instance'};

    # Recursion lock
        $self->{'instance'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_linkEnd($self) if $old;
    $val->add_linkEnd($self)    if $val;

  
  }

  $self;
}


=head2 C<remove_instance>

  $obj->remove_instance($val);

Removes the AssociationEnd C<instance> value C<$val>.
Returns C<$obj>.

=cut
sub remove_instance ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'instance'}) eq $val ) { # Recursion lock
    $val = $self->{'instance'} = undef;         # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_linkEnd($self) if $old;
    $val->add_linkEnd($self)    if $val;

  
  }
}


=head2 C<clear_instance>

  $obj->clear_instance;

Clears the AssociationEnd C<instance> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.
Returns C<$obj>.

=cut
sub clear_instance ($@)
{
  my ($self) = @_;

  my $old;
  if ( defined ($old = $self->{'instance'}) ) { # Recursion lock
    my $val = $self->{'instance'} = undef;      # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_linkEnd($self) if $old;
    $val->add_linkEnd($self)    if $val;

    }

  $self;
}


=head2 C<count_instance>

  $obj->count_instance;

Returns the number of elements of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance> associated with C<instance>.

=cut
sub count_instance ($)
{
  my ($self) = @_;

  my $x = $self->{'instance'};

  defined $x ? 1 : 0;
}




=for html <hr/>

=cut

#################################################################
# AssociationEnd connection <---> link
# type = UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link
# multiplicity = 1
# ordering = 

=head2 C<link>

  my $val = $obj->link;

Returns the AssociationEnd C<link> value of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link>.

=cut
sub link ($)
{
  my ($self) = @_;
		  
  $self->{'link'};
}


=head2 C<set_link>

  $obj->set_link($val);

Sets the AssociationEnd C<link> value.
C<$val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link>.
Returns C<$obj>.

=cut
sub set_link ($$)
{
  my ($self, $val) = @_;
		  
  no warnings; # Use of uninitialized value in string ne at ...
		  
  my $old;
  if ( ($old = $self->{'link'}) ne $val ) { # Recursion lock

    if ( defined $val ) { $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd.link") }

    # Recursion lock
        $self->{'link'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_connection($self) if $old;
    $val->add_connection($self)    if $val;

    }
		  
  $self;
}


=head2 C<add_link>

  $obj->add_link($val);

Adds the AssociationEnd C<link> value.
C<$val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link>.
Throws exception if a value already exists.
Returns C<$obj>.

=cut
sub add_link ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'link'}) ne $val ) { # Recursion lock
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd.link");
      
    # confess("UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd::link: too many")
    # if defined $self->{'link'};

    # Recursion lock
        $self->{'link'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_connection($self) if $old;
    $val->add_connection($self)    if $val;

  
  }

  $self;
}


=head2 C<remove_link>

  $obj->remove_link($val);

Removes the AssociationEnd C<link> value C<$val>.
Returns C<$obj>.

=cut
sub remove_link ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'link'}) eq $val ) { # Recursion lock
    $val = $self->{'link'} = undef;         # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_connection($self) if $old;
    $val->add_connection($self)    if $val;

  
  }
}


=head2 C<clear_link>

  $obj->clear_link;

Clears the AssociationEnd C<link> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link>.
Returns C<$obj>.

=cut
sub clear_link ($@)
{
  my ($self) = @_;

  my $old;
  if ( defined ($old = $self->{'link'}) ) { # Recursion lock
    my $val = $self->{'link'} = undef;      # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_connection($self) if $old;
    $val->add_connection($self)    if $val;

    }

  $self;
}


=head2 C<count_link>

  $obj->count_link;

Returns the number of elements of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link> associated with C<link>.

=cut
sub count_link ($)
{
  my ($self) = @_;

  my $x = $self->{'link'};

  defined $x ? 1 : 0;
}




=for html <hr/>

=cut

#################################################################
# AssociationEnd linkEnd <---> qualifierValue
# type = UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink
# multiplicity = 0..*
# ordering = ordered

=head2 C<qualifierValue>

  my @val = $obj->qualifierValue;
  my $ary_val = $obj->qualifierValue;

Returns the AssociationEnd C<qualifierValue> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub qualifierValue ($)
{
  my ($self) = @_;

    my $x = $self->{'qualifierValue'} ||= [ ];

  wantarray ? @{$x} : $x;
  
}


=head2 C<index_qualifierValue>

  my $x = $obj->index_qualifierValue($i);
  my @x = $obj->index_qualifierValue($i, $count);

In scalar context, returns the value of AssociationEnd C<qualifierValue> at index C<$i>.
In array context, returns the values between index C<$i> and C<$i + $count - 1>, inclusive.

=cut
sub index_qualifierValue ($$@)
{
  my ($self, $i, $count) = @_;

  ;

  my $val = $self->{'qualifierValue'} ||= [ ];

  ;

  wantarray ? $val->[$i .. (defined $count ? $i + $count - 1 : $i)]
            : $val->[$i];
}


=head2 C<index_of_qualifierValue>

  my $index = $obj->index_of_qualifierValue($val);

Returns the index of C<$val> in AssociationEnd C<qualifierValue>.
Return C<undef> if C<$val> is not in C<qualifierValue>.

=cut
sub index_of_qualifierValue ($$)
{
  my ($self, $x) = @_;

  ;

  my $val = $self->{'qualifierValue'} ||= [ ];

  ;

  __ummf_array_index($val, $x);
}


=head2 C<set_qualifierValue>

  $obj->set_qualifierValue(@val);

Sets the AssociationEnd C<qualifierValue> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>.
Returns C<$obj>.

=cut
sub set_qualifierValue ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_qualifierValue;
  $self->add_qualifierValue(@val);
}


=head2 C<set_index_qualifierValue>

  $obj->set_index_qualifierValue($i, $val);

Sets the value of AssociationEnd C<qualifierValue> at index C<$i>.
Returns self.

=cut
sub set_index_qualifierValue ($$$)
{
  my ($self, $i, $val) = @_;

  ;

  my $x = $self->{'qualifierValue'} ||= [ ];

  no warnings;
  my $old;
  if ( ($old = $x->[$i]) ne $val) {
    # Recursion lock
        $x->[$i] = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_linkEnd($self) if $old;
    $val->add_linkEnd($self)    if $val;

  
    ;
  }

  $self;
}


=head2 C<add_qualifierValue>

  $obj->add_qualifierValue(@val);

Adds AssociationEnd C<qualifierValue> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>.
Returns C<$obj>.

=cut
sub add_qualifierValue ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'qualifierValue'} ||= [ ];
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if grep($_ eq $val, @$x);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd.qualifierValue");

    # Recursion lock
        push(@{$x}, $val);
        
    # Remove and add associations with other ends.
        
    $old->remove_linkEnd($self) if $old;
    $val->add_linkEnd($self)    if $val;

    }
  
  $self;
}


=head2 C<add_index_qualifierValue>

  $obj->add_index_qualifierValue($i, @val);

Adds AssociationEnd C<qualifierValue> values at index C<$i>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>.
Returns C<$obj>.

=cut
sub add_index_qualifierValue ($$@)
{
  my ($self, $i, @val) = @_;

  
    my $x = $self->{'qualifierValue'} ||= [ ];
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if grep($_ eq $val, @$x);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd.qualifierValue");

    # Recursion lock
        splice(@{$x}, $i, 0, $val); # Recursion lock
        ++ $i;
    
    # Remove and add associations with other ends.
        
    $old->remove_linkEnd($self) if $old;
    $val->add_linkEnd($self)    if $val;

    }
  
  
  $self;
}


=head2 C<remove_qualifierValue>

  $obj->remove_qualifierValue(@val);

Removes the AssociationEnd C<qualifierValue> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>.
Returns C<$obj>.

=cut
sub remove_qualifierValue ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'qualifierValue'} ||= [ ];
  
  for my $old ( @val ) {
    # Recursion lock
        my $i; # index of $old in @$x.
    next unless defined($i = __ummf_array_index($x, $old));
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd.qualifierValue");

    # Recursion lock
        splice(@$x, $i, 1);     
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_linkEnd($self) if $old;
    $val->add_linkEnd($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_qualifierValue>

  $obj->clear_qualifierValue;

Clears the AssociationEnd C<qualifierValue> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>.
Returns C<$obj>.

=cut
sub clear_qualifierValue ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'qualifierValue'} ||= [ ];
  
  my $val; # Place holder for other MACRO.
  
    $self->{'qualifierValue'} = [ ];  # Recursion lock
  for my $old ( @$x ) { # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_linkEnd($self) if $old;
    $val->add_linkEnd($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_qualifierValue>

  $obj->count_qualifierValue;

Returns the number of elements associated with C<qualifierValue>.

=cut
sub count_qualifierValue ($)
{
  my ($self) = @_;

  my $x = $self->{'qualifierValue'};

    defined $x ? scalar @$x : 0;
  }







# End of Class LinkEnd


=pod

=for html <hr/>

I<END OF DOCUMENT>

=cut

############################################################################

1; # is true!

############################################################################

### Keep these comments at end of file: kstephens@users.sourceforge.net 2003/04/06 ###
### Local Variables: ###
### mode:perl ###
### perl-indent-level:2 ###
### perl-continued-statement-offset:0 ###
### perl-brace-offset:0 ###
### perl-label-offset:0 ###
### End: ###

