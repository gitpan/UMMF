# -*- perl -*-
# DO NOT EDIT - This file is generated by UMMF; http://ummf.sourceforge.net 
# From template: $Id: PerlTemplate.txt,v 1.74 2004/08/01 03:50:07 kstephens Exp $

package UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance;

#use 5.6.1;
use strict;
use warnings;

#################################################################
# Version
#

our $VERSION = do { my @r = (q{1.0} =~ /\d+/g); sprintf "%d." . "%03d" x $#r, @r };


#################################################################
# Documentation
#

=head1 NAME

UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance -- 

=head1 VERSION

1.0

=head1 SYNOPSIS

=head1 DESCRIPTION 

=head1 USAGE

=head1 EXPORT

=head1 METATYPE

L<UMMF::UML::MetaModel::Foundation::Core::Class|UMMF::UML::MetaModel::Foundation::Core::Class>

=head1 SUPERCLASSES

L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>




=head1 ATTRIBUTES

I<NO ATTRIBUTES>


=head1 ASSOCIATIONS


=head2 C<1> : C<value> E<lt>---E<gt>  C<attributeLink> : UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<instance> E<lt>---E<gt>  C<classifier> : UMMF::UML::MetaModel::Foundation::Core::Classifier C<1..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::Classifier|UMMF::UML::MetaModel::Foundation::Core::Classifier>

=item multiplicity = C<1..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<1..*> : C<particpatingInstance> E<lt>---E<gt>  C<collaborationInstanceSet_particpatingInstance> : UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<1> : C<resident> E<lt>---E<gt>  C<componentInstance> : UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::ComponentInstance C<0..1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::ComponentInstance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::ComponentInstance>

=item multiplicity = C<0..1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<1> : C<instance> E<lt>---E<gt>  C<linkEnd> : UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..1> : C<owner> E<lt>---E<gt>  C<ownedInstance> : UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..1> : C<owner> E<lt>---E<gt>  C<ownedLink> : UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<ownedInstance> E<lt>---E<gt>  C<owner> : UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance C<0..1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>

=item multiplicity = C<0..1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<composite>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<conformingInstance> E<lt>---E<gt>  C<playedRole> : UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::ClassifierRole C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::ClassifierRole|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::ClassifierRole>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<1> : C<instance> E<lt>---E<gt>  C<slot> : UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<argument> E<lt>---E<gt>  C<stimulus_argument> : UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<1> : C<receiver> E<lt>---E<gt>  C<stimulus_receiver> : UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<1> : C<sender> E<lt>---E<gt>  C<stimulus_sender> : UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back



=head1 METHODS

=cut



#################################################################
# Dependencies
#





use Carp qw(croak confess);
use Set::Object 1.05;
use Class::Multimethods 1.70;
use Data::Dumper;
use Scalar::Util qw(weaken);
use UMMF::UML::MetaModel::__ObjectBase qw(:__ummf_array);


#################################################################
# Generalizations
#

use base qw(
  UMMF::UML::MetaModel::Foundation::Core::ModelElement



);


#################################################################
# Exports
#

our @EXPORT_OK = qw(
);
our %EXPORT_TAGS = ( 'all' => \@EXPORT_OK );





#################################################################
# Validation
#


=head2 C<__validate_type>

  UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance->__validate_type($value);

Returns true if C<$value> is a valid representation of L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.

=cut
sub __validate_type($$)
{
  my ($self, $x) = @_;

  no warnings;

  UNIVERSAL::isa($x, 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance')  ;
}


=head2 C<__typecheck>

  UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance->__typecheck($value, $msg);

Calls C<confess()> with C<$msg> if C<<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance->__validate_type($value)>> is false.

=cut
sub __typecheck
{
  my ($self, $x, $msg) = @_;

  confess("typecheck: $msg: type '" . 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance' . ": value '$x'")
    unless __validate_type($self, $x);
}


=head2 C<isaInstance>


Returns true if receiver is a L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.
Other receivers will return false.

=cut
sub isaInstance { 1 }


=head2 C<isaBehavioral_Elements__Common_Behavior__Instance>


Returns true if receiver is a L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.
Other receivers will return false.
This is the fully qualified version of the C<isaInstance> method.

=cut
sub isaBehavioral_Elements__Common_Behavior__Instance { 1 }


#################################################################
# Introspection
#

=head2 C<__model_name> 

  my $name = $obj_or_package->__model_name;

Returns the UML Model name (C<'Behavioral_Elements::Common_Behavior::Instance'>) for an object or package of
this Classifier.

=cut
sub __model_name { 'Behavioral_Elements::Common_Behavior::Instance' }



=head2 C<__isAbstract>

  $package->__isAbstract;

Returns C<1>.

=cut
sub __isAbstract { 1; }


my $__tangram_schema;
=head2 C<__tangram_schema>

  my $tangram_schema $obj_or_package->__tangram_schema

Returns a HASH ref that describes this Classifier for Tangram.

See L<UMMF::UML::Export::Perl::Tangram|UMMF::UML::Export::Perl::Tangram>

=cut
sub __tangram_schema
{
  my ($self) = @_;

  $__tangram_schema ||=
  {
   'classes' =>
   [
     'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance' =>
     {
       'table' => 'Behavioral_Elements__Common_Behavior__Instance',
       'abstract' => 1,
       'slots' => 
       { 
	 # Attributes
	 
	 # Associations
	 	 	       'attributeLink'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink',

                           'table' => 'Behavioral_Elements__Common_Behavior__Instance__attributeLink', 

                                                               'coll' => 'value',

                                                                               }
      ,
                  	 	       'classifier'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::Classifier',

                           'table' => 'Instance_Classifier', 

                                                      'item' => 'classifier', 

                  'coll' => 'instance',

                                                                               }
      ,
                  	 	       'collaborationInstanceSet_particpatingInstance'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet',

                           'table' => 'Behavioral_Elements__CollaborationInstanceSet_ParticpatingInstance', 

                                                      'item' => 'collaborationInstanceSet_particpatingInstance', 

                  'coll' => 'particpatingInstance',

                                                                               }
      ,
                  	 	       'componentInstance'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::ComponentInstance',

                  'null' => '1', 

                                    'col' => 'componentInstance', 

                                                                                                                   }
      ,
                  	 	       'linkEnd'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd',

                           'table' => 'Behavioral_Elements__Common_Behavior__Instance__linkEnd', 

                                                               'coll' => 'instance',

                                                                               }
      ,
                  	 	       'ownedInstance'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance',

                           'table' => 'Behavioral_Elements__Common_Behavior__Instance__ownedInstance', 

                                                               'coll' => 'owner',

                                             'aggreg' => '1', 

                                           }
      ,
                  	 	       'ownedLink'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link',

                           'table' => 'Behavioral_Elements__Common_Behavior__Instance__ownedLink', 

                                                               'coll' => 'owner',

                                             'aggreg' => '1', 

                                           }
      ,
                  	 	       'owner'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance',

                  'null' => '1', 

                                    'col' => 'owner', 

                                                                                                                   }
      ,
                  	 	       'playedRole'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::ClassifierRole',

                           'table' => 'Behavioral_Elements__PlayedRole_ConformingInstance', 

                                                      'item' => 'playedRole', 

                  'coll' => 'conformingInstance',

                                                                               }
      ,
                  	 	       'slot'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink',

                           'table' => 'Behavioral_Elements__Common_Behavior__Instance__slot', 

                                                               'coll' => 'instance',

                                             'aggreg' => '1', 

                                           }
      ,
                  	 	       'stimulus_argument'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus',

                           'table' => 'Behavioral_Elements__Common_Behavior__Stimulus_Argument', 

                                                      'item' => 'stimulus_argument', 

                  'coll' => 'argument',

                                                                               }
      ,
                  	 	       'stimulus_receiver'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus',

                           'table' => 'Behavioral_Elements__Common_Behavior__Instance__stimulus_receiver', 

                                                               'coll' => 'receiver',

                                                                               }
      ,
                  	 	       'stimulus_sender'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus',

                           'table' => 'Behavioral_Elements__Common_Behavior__Instance__stimulus_sender', 

                                                               'coll' => 'sender',

                                                                               }
      ,
                         },
       'bases' => [  'UMMF::UML::MetaModel::Foundation::Core::ModelElement',  ],
       'sql' => {

       },
     },
   ],

   'sql' =>
   {
    # Note Tangram::Ref::get_exporter() has
    # "UPDATE $table SET $self->{col} = $refid WHERE id = $id",
    # The id_col is hard-coded, 
    # Thus id_col will not work.
    #'id_col' => '__sid',
    #'class_col' => '__stype',
   },
     # 'set_id' => sub { }
     # 'get_id' => sub { }

      
  };
}


#################################################################
# Class Attributes
#


    

#################################################################
# Class Associations
#


    

#################################################################
# Initialization
#


=head2 C<___initialize>

Initialize all Attributes and AssociationEnds in a instance of this Classifier.
Does B<not> initalize slots in its Generalizations.

See also: C<__initialize>.

=cut
sub ___initialize
{
  my ($self) = @_;

  # Attributes



  # Associations

  # AssociationEnd 
  #  value 1
  #  <--> 
  #  attributeLink 0..* UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink.
    if ( defined $self->{'attributeLink'} ) {
    my $x = $self->{'attributeLink'};
        $self->{'attributeLink'} = Set::Object->new();
        $self->set_attributeLink(@$x);
  }
  
  # AssociationEnd 
  #  instance 0..*
  #  <--> 
  #  classifier 1..* UMMF::UML::MetaModel::Foundation::Core::Classifier.
    if ( defined $self->{'classifier'} ) {
    my $x = $self->{'classifier'};
        $self->{'classifier'} = Set::Object->new();
        $self->set_classifier(@$x);
  }
  
  # AssociationEnd 
  #  particpatingInstance 1..*
  #  <--> 
  #  collaborationInstanceSet_particpatingInstance 0..* UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet.
    if ( defined $self->{'collaborationInstanceSet_particpatingInstance'} ) {
    my $x = $self->{'collaborationInstanceSet_particpatingInstance'};
        $self->{'collaborationInstanceSet_particpatingInstance'} = Set::Object->new();
        $self->set_collaborationInstanceSet_particpatingInstance(@$x);
  }
  
  # AssociationEnd 
  #  resident 1
  #  <--> 
  #  componentInstance 0..1 UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::ComponentInstance.
    if ( defined $self->{'componentInstance'} ) {
    my $x = $self->{'componentInstance'};
    $self->{'componentInstance'} = undef;
    $self->set_componentInstance($x);
  }
  
  # AssociationEnd 
  #  instance 1
  #  <--> 
  #  linkEnd 0..* UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd.
    if ( defined $self->{'linkEnd'} ) {
    my $x = $self->{'linkEnd'};
        $self->{'linkEnd'} = Set::Object->new();
        $self->set_linkEnd(@$x);
  }
  
  # AssociationEnd 
  #  owner 0..1
  #  <--> 
  #  ownedInstance 0..* UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.
    if ( defined $self->{'ownedInstance'} ) {
    my $x = $self->{'ownedInstance'};
        $self->{'ownedInstance'} = Set::Object->new();
        $self->set_ownedInstance(@$x);
  }
  
  # AssociationEnd 
  #  owner 0..1
  #  <--> 
  #  ownedLink 0..* UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link.
    if ( defined $self->{'ownedLink'} ) {
    my $x = $self->{'ownedLink'};
        $self->{'ownedLink'} = Set::Object->new();
        $self->set_ownedLink(@$x);
  }
  
  # AssociationEnd 
  #  ownedInstance 0..*
  #  <--> 
  #  owner 0..1 UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.
    if ( defined $self->{'owner'} ) {
    my $x = $self->{'owner'};
    $self->{'owner'} = undef;
    $self->set_owner($x);
  }
  
  # AssociationEnd 
  #  conformingInstance 0..*
  #  <--> 
  #  playedRole 0..* UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::ClassifierRole.
    if ( defined $self->{'playedRole'} ) {
    my $x = $self->{'playedRole'};
        $self->{'playedRole'} = Set::Object->new();
        $self->set_playedRole(@$x);
  }
  
  # AssociationEnd 
  #  instance 1
  #  <--> 
  #  slot 0..* UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink.
    if ( defined $self->{'slot'} ) {
    my $x = $self->{'slot'};
        $self->{'slot'} = Set::Object->new();
        $self->set_slot(@$x);
  }
  
  # AssociationEnd 
  #  argument 0..*
  #  <--> 
  #  stimulus_argument 0..* UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus.
    if ( defined $self->{'stimulus_argument'} ) {
    my $x = $self->{'stimulus_argument'};
        $self->{'stimulus_argument'} = Set::Object->new();
        $self->set_stimulus_argument(@$x);
  }
  
  # AssociationEnd 
  #  receiver 1
  #  <--> 
  #  stimulus_receiver 0..* UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus.
    if ( defined $self->{'stimulus_receiver'} ) {
    my $x = $self->{'stimulus_receiver'};
        $self->{'stimulus_receiver'} = Set::Object->new();
        $self->set_stimulus_receiver(@$x);
  }
  
  # AssociationEnd 
  #  sender 1
  #  <--> 
  #  stimulus_sender 0..* UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus.
    if ( defined $self->{'stimulus_sender'} ) {
    my $x = $self->{'stimulus_sender'};
        $self->{'stimulus_sender'} = Set::Object->new();
        $self->set_stimulus_sender(@$x);
  }
  

  $self;
}


my $__initialize_use;

=head2 C<__initialize>

Initialize all slots in this Classifier and all its Generalizations.

See also: C<___initialize>.

=cut
sub __initialize
{
  my ($self) = @_;

  # $DB::single = 1;

  unless ( ! $__initialize_use ) {
    $__initialize_use = 1;
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Element');
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::ModelElement');
  }

  $self->UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance::___initialize;
  $self->UMMF::UML::MetaModel::Foundation::Core::Element::___initialize;
  $self->UMMF::UML::MetaModel::Foundation::Core::ModelElement::___initialize;

  $self;
}
      

=head2 C<__create>

Calls all <<create>> Methods for this Classifier and all Generalizations.

See also: C<___create>.

=cut
sub __create
{
  my ($self, @args) = @_;

  # $DB::single = 1;
  $self->UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance::___create(@args);
  $self->UMMF::UML::MetaModel::Foundation::Core::Element::___create();
  $self->UMMF::UML::MetaModel::Foundation::Core::ModelElement::___create();

  $self;
}




#################################################################
# Attributes
#




#################################################################
# Association
#


=for html <hr/>

=cut

#################################################################
# AssociationEnd value <---> attributeLink
# type = UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink
# multiplicity = 0..*
# ordering = 

=head2 C<attributeLink>

  my @val = $obj->attributeLink;
  my $ary_val = $obj->attributeLink;

Returns the AssociationEnd C<attributeLink> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub attributeLink ($)
{
  my ($self) = @_;

    my $x = $self->{'attributeLink'};

  # confess("Container for attributeLink $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_attributeLink>

  $obj->set_attributeLink(@val);

Sets the AssociationEnd C<attributeLink> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>.
Returns C<$obj>.

=cut
sub set_attributeLink ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_attributeLink;
  $self->add_attributeLink(@val);
}


=head2 C<add_attributeLink>

  $obj->add_attributeLink(@val);

Adds AssociationEnd C<attributeLink> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>.
Returns C<$obj>.

=cut
sub add_attributeLink ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'attributeLink'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.attributeLink");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_value($self) if $old;
    $val->add_value($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_attributeLink>

  $obj->remove_attributeLink(@val);

Removes the AssociationEnd C<attributeLink> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>.
Returns C<$obj>.

=cut
sub remove_attributeLink ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'attributeLink'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.attributeLink");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_value($self) if $old;
    $val->add_value($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_attributeLink>

  $obj->clear_attributeLink;

Clears the AssociationEnd C<attributeLink> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>.
Returns C<$obj>.

=cut
sub clear_attributeLink ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'attributeLink'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'attributeLink'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_value($self) if $old;
    $val->add_value($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_attributeLink>

  $obj->count_attributeLink;

Returns the number of elements associated with C<attributeLink>.

=cut
sub count_attributeLink ($)
{
  my ($self) = @_;

  my $x = $self->{'attributeLink'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd instance <---> classifier
# type = UMMF::UML::MetaModel::Foundation::Core::Classifier
# multiplicity = 1..*
# ordering = 

=head2 C<classifier>

  my @val = $obj->classifier;
  my $ary_val = $obj->classifier;

Returns the AssociationEnd C<classifier> values of type L<UMMF::UML::MetaModel::Foundation::Core::Classifier|UMMF::UML::MetaModel::Foundation::Core::Classifier>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub classifier ($)
{
  my ($self) = @_;

    my $x = $self->{'classifier'};

  # confess("Container for classifier $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_classifier>

  $obj->set_classifier(@val);

Sets the AssociationEnd C<classifier> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Classifier|UMMF::UML::MetaModel::Foundation::Core::Classifier>.
Returns C<$obj>.

=cut
sub set_classifier ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_classifier;
  $self->add_classifier(@val);
}


=head2 C<add_classifier>

  $obj->add_classifier(@val);

Adds AssociationEnd C<classifier> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Classifier|UMMF::UML::MetaModel::Foundation::Core::Classifier>.
Returns C<$obj>.

=cut
sub add_classifier ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'classifier'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Foundation::Core::Classifier')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.classifier");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_instance($self) if $old;
    $val->add_instance($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_classifier>

  $obj->remove_classifier(@val);

Removes the AssociationEnd C<classifier> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Classifier|UMMF::UML::MetaModel::Foundation::Core::Classifier>.
Returns C<$obj>.

=cut
sub remove_classifier ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'classifier'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Classifier')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.classifier");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_instance($self) if $old;
    $val->add_instance($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_classifier>

  $obj->clear_classifier;

Clears the AssociationEnd C<classifier> links to L<UMMF::UML::MetaModel::Foundation::Core::Classifier|UMMF::UML::MetaModel::Foundation::Core::Classifier>.
Returns C<$obj>.

=cut
sub clear_classifier ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'classifier'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'classifier'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_instance($self) if $old;
    $val->add_instance($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_classifier>

  $obj->count_classifier;

Returns the number of elements associated with C<classifier>.

=cut
sub count_classifier ($)
{
  my ($self) = @_;

  my $x = $self->{'classifier'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd particpatingInstance <---> collaborationInstanceSet_particpatingInstance
# type = UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet
# multiplicity = 0..*
# ordering = 

=head2 C<collaborationInstanceSet_particpatingInstance>

  my @val = $obj->collaborationInstanceSet_particpatingInstance;
  my $ary_val = $obj->collaborationInstanceSet_particpatingInstance;

Returns the AssociationEnd C<collaborationInstanceSet_particpatingInstance> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub collaborationInstanceSet_particpatingInstance ($)
{
  my ($self) = @_;

    my $x = $self->{'collaborationInstanceSet_particpatingInstance'};

  # confess("Container for collaborationInstanceSet_particpatingInstance $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_collaborationInstanceSet_particpatingInstance>

  $obj->set_collaborationInstanceSet_particpatingInstance(@val);

Sets the AssociationEnd C<collaborationInstanceSet_particpatingInstance> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet>.
Returns C<$obj>.

=cut
sub set_collaborationInstanceSet_particpatingInstance ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_collaborationInstanceSet_particpatingInstance;
  $self->add_collaborationInstanceSet_particpatingInstance(@val);
}


=head2 C<add_collaborationInstanceSet_particpatingInstance>

  $obj->add_collaborationInstanceSet_particpatingInstance(@val);

Adds AssociationEnd C<collaborationInstanceSet_particpatingInstance> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet>.
Returns C<$obj>.

=cut
sub add_collaborationInstanceSet_particpatingInstance ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'collaborationInstanceSet_particpatingInstance'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.collaborationInstanceSet_particpatingInstance");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_particpatingInstance($self) if $old;
    $val->add_particpatingInstance($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_collaborationInstanceSet_particpatingInstance>

  $obj->remove_collaborationInstanceSet_particpatingInstance(@val);

Removes the AssociationEnd C<collaborationInstanceSet_particpatingInstance> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet>.
Returns C<$obj>.

=cut
sub remove_collaborationInstanceSet_particpatingInstance ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'collaborationInstanceSet_particpatingInstance'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.collaborationInstanceSet_particpatingInstance");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_particpatingInstance($self) if $old;
    $val->add_particpatingInstance($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_collaborationInstanceSet_particpatingInstance>

  $obj->clear_collaborationInstanceSet_particpatingInstance;

Clears the AssociationEnd C<collaborationInstanceSet_particpatingInstance> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet>.
Returns C<$obj>.

=cut
sub clear_collaborationInstanceSet_particpatingInstance ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'collaborationInstanceSet_particpatingInstance'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'collaborationInstanceSet_particpatingInstance'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_particpatingInstance($self) if $old;
    $val->add_particpatingInstance($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_collaborationInstanceSet_particpatingInstance>

  $obj->count_collaborationInstanceSet_particpatingInstance;

Returns the number of elements associated with C<collaborationInstanceSet_particpatingInstance>.

=cut
sub count_collaborationInstanceSet_particpatingInstance ($)
{
  my ($self) = @_;

  my $x = $self->{'collaborationInstanceSet_particpatingInstance'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd resident <---> componentInstance
# type = UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::ComponentInstance
# multiplicity = 0..1
# ordering = 

=head2 C<componentInstance>

  my $val = $obj->componentInstance;

Returns the AssociationEnd C<componentInstance> value of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::ComponentInstance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::ComponentInstance>.

=cut
sub componentInstance ($)
{
  my ($self) = @_;
		  
  $self->{'componentInstance'};
}


=head2 C<set_componentInstance>

  $obj->set_componentInstance($val);

Sets the AssociationEnd C<componentInstance> value.
C<$val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::ComponentInstance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::ComponentInstance>.
Returns C<$obj>.

=cut
sub set_componentInstance ($$)
{
  my ($self, $val) = @_;
		  
  no warnings; # Use of uninitialized value in string ne at ...
		  
  my $old;
  if ( ($old = $self->{'componentInstance'}) ne $val ) { # Recursion lock

    if ( defined $val ) { $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::ComponentInstance')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.componentInstance") }

    # Recursion lock
        $self->{'componentInstance'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_resident($self) if $old;
    $val->add_resident($self)    if $val;

    }
		  
  $self;
}


=head2 C<add_componentInstance>

  $obj->add_componentInstance($val);

Adds the AssociationEnd C<componentInstance> value.
C<$val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::ComponentInstance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::ComponentInstance>.
Throws exception if a value already exists.
Returns C<$obj>.

=cut
sub add_componentInstance ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'componentInstance'}) ne $val ) { # Recursion lock
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::ComponentInstance')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.componentInstance");
      
    # confess("UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance::componentInstance: too many")
    # if defined $self->{'componentInstance'};

    # Recursion lock
        $self->{'componentInstance'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_resident($self) if $old;
    $val->add_resident($self)    if $val;

  
  }

  $self;
}


=head2 C<remove_componentInstance>

  $obj->remove_componentInstance($val);

Removes the AssociationEnd C<componentInstance> value C<$val>.
Returns C<$obj>.

=cut
sub remove_componentInstance ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'componentInstance'}) eq $val ) { # Recursion lock
    $val = $self->{'componentInstance'} = undef;         # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_resident($self) if $old;
    $val->add_resident($self)    if $val;

  
  }
}


=head2 C<clear_componentInstance>

  $obj->clear_componentInstance;

Clears the AssociationEnd C<componentInstance> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::ComponentInstance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::ComponentInstance>.
Returns C<$obj>.

=cut
sub clear_componentInstance ($@)
{
  my ($self) = @_;

  my $old;
  if ( defined ($old = $self->{'componentInstance'}) ) { # Recursion lock
    my $val = $self->{'componentInstance'} = undef;      # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_resident($self) if $old;
    $val->add_resident($self)    if $val;

    }

  $self;
}


=head2 C<count_componentInstance>

  $obj->count_componentInstance;

Returns the number of elements of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::ComponentInstance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::ComponentInstance> associated with C<componentInstance>.

=cut
sub count_componentInstance ($)
{
  my ($self) = @_;

  my $x = $self->{'componentInstance'};

  defined $x ? 1 : 0;
}




=for html <hr/>

=cut

#################################################################
# AssociationEnd instance <---> linkEnd
# type = UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd
# multiplicity = 0..*
# ordering = 

=head2 C<linkEnd>

  my @val = $obj->linkEnd;
  my $ary_val = $obj->linkEnd;

Returns the AssociationEnd C<linkEnd> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub linkEnd ($)
{
  my ($self) = @_;

    my $x = $self->{'linkEnd'};

  # confess("Container for linkEnd $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_linkEnd>

  $obj->set_linkEnd(@val);

Sets the AssociationEnd C<linkEnd> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd>.
Returns C<$obj>.

=cut
sub set_linkEnd ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_linkEnd;
  $self->add_linkEnd(@val);
}


=head2 C<add_linkEnd>

  $obj->add_linkEnd(@val);

Adds AssociationEnd C<linkEnd> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd>.
Returns C<$obj>.

=cut
sub add_linkEnd ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'linkEnd'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.linkEnd");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_instance($self) if $old;
    $val->add_instance($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_linkEnd>

  $obj->remove_linkEnd(@val);

Removes the AssociationEnd C<linkEnd> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd>.
Returns C<$obj>.

=cut
sub remove_linkEnd ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'linkEnd'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.linkEnd");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_instance($self) if $old;
    $val->add_instance($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_linkEnd>

  $obj->clear_linkEnd;

Clears the AssociationEnd C<linkEnd> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd>.
Returns C<$obj>.

=cut
sub clear_linkEnd ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'linkEnd'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'linkEnd'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_instance($self) if $old;
    $val->add_instance($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_linkEnd>

  $obj->count_linkEnd;

Returns the number of elements associated with C<linkEnd>.

=cut
sub count_linkEnd ($)
{
  my ($self) = @_;

  my $x = $self->{'linkEnd'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd owner <---> ownedInstance
# type = UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance
# multiplicity = 0..*
# ordering = 

=head2 C<ownedInstance>

  my @val = $obj->ownedInstance;
  my $ary_val = $obj->ownedInstance;

Returns the AssociationEnd C<ownedInstance> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub ownedInstance ($)
{
  my ($self) = @_;

    my $x = $self->{'ownedInstance'};

  # confess("Container for ownedInstance $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_ownedInstance>

  $obj->set_ownedInstance(@val);

Sets the AssociationEnd C<ownedInstance> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.
Returns C<$obj>.

=cut
sub set_ownedInstance ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_ownedInstance;
  $self->add_ownedInstance(@val);
}


=head2 C<add_ownedInstance>

  $obj->add_ownedInstance(@val);

Adds AssociationEnd C<ownedInstance> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.
Returns C<$obj>.

=cut
sub add_ownedInstance ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'ownedInstance'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.ownedInstance");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_owner($self) if $old;
    $val->add_owner($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_ownedInstance>

  $obj->remove_ownedInstance(@val);

Removes the AssociationEnd C<ownedInstance> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.
Returns C<$obj>.

=cut
sub remove_ownedInstance ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'ownedInstance'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.ownedInstance");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_owner($self) if $old;
    $val->add_owner($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_ownedInstance>

  $obj->clear_ownedInstance;

Clears the AssociationEnd C<ownedInstance> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.
Returns C<$obj>.

=cut
sub clear_ownedInstance ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'ownedInstance'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'ownedInstance'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_owner($self) if $old;
    $val->add_owner($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_ownedInstance>

  $obj->count_ownedInstance;

Returns the number of elements associated with C<ownedInstance>.

=cut
sub count_ownedInstance ($)
{
  my ($self) = @_;

  my $x = $self->{'ownedInstance'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd owner <---> ownedLink
# type = UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link
# multiplicity = 0..*
# ordering = 

=head2 C<ownedLink>

  my @val = $obj->ownedLink;
  my $ary_val = $obj->ownedLink;

Returns the AssociationEnd C<ownedLink> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub ownedLink ($)
{
  my ($self) = @_;

    my $x = $self->{'ownedLink'};

  # confess("Container for ownedLink $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_ownedLink>

  $obj->set_ownedLink(@val);

Sets the AssociationEnd C<ownedLink> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link>.
Returns C<$obj>.

=cut
sub set_ownedLink ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_ownedLink;
  $self->add_ownedLink(@val);
}


=head2 C<add_ownedLink>

  $obj->add_ownedLink(@val);

Adds AssociationEnd C<ownedLink> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link>.
Returns C<$obj>.

=cut
sub add_ownedLink ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'ownedLink'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.ownedLink");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_owner($self) if $old;
    $val->add_owner($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_ownedLink>

  $obj->remove_ownedLink(@val);

Removes the AssociationEnd C<ownedLink> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link>.
Returns C<$obj>.

=cut
sub remove_ownedLink ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'ownedLink'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.ownedLink");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_owner($self) if $old;
    $val->add_owner($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_ownedLink>

  $obj->clear_ownedLink;

Clears the AssociationEnd C<ownedLink> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Link>.
Returns C<$obj>.

=cut
sub clear_ownedLink ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'ownedLink'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'ownedLink'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_owner($self) if $old;
    $val->add_owner($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_ownedLink>

  $obj->count_ownedLink;

Returns the number of elements associated with C<ownedLink>.

=cut
sub count_ownedLink ($)
{
  my ($self) = @_;

  my $x = $self->{'ownedLink'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd ownedInstance <---> owner
# type = UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance
# multiplicity = 0..1
# ordering = 

=head2 C<owner>

  my $val = $obj->owner;

Returns the AssociationEnd C<owner> value of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.

=cut
sub owner ($)
{
  my ($self) = @_;
		  
  $self->{'owner'};
}


=head2 C<set_owner>

  $obj->set_owner($val);

Sets the AssociationEnd C<owner> value.
C<$val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.
Returns C<$obj>.

=cut
sub set_owner ($$)
{
  my ($self, $val) = @_;
		  
  no warnings; # Use of uninitialized value in string ne at ...
		  
  my $old;
  if ( ($old = $self->{'owner'}) ne $val ) { # Recursion lock

    if ( defined $val ) { $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.owner") }

    # Recursion lock
        $self->{'owner'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_ownedInstance($self) if $old;
    $val->add_ownedInstance($self)    if $val;

    }
		  
  $self;
}


=head2 C<add_owner>

  $obj->add_owner($val);

Adds the AssociationEnd C<owner> value.
C<$val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.
Throws exception if a value already exists.
Returns C<$obj>.

=cut
sub add_owner ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'owner'}) ne $val ) { # Recursion lock
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.owner");
      
    # confess("UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance::owner: too many")
    # if defined $self->{'owner'};

    # Recursion lock
        $self->{'owner'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_ownedInstance($self) if $old;
    $val->add_ownedInstance($self)    if $val;

  
  }

  $self;
}


=head2 C<remove_owner>

  $obj->remove_owner($val);

Removes the AssociationEnd C<owner> value C<$val>.
Returns C<$obj>.

=cut
sub remove_owner ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'owner'}) eq $val ) { # Recursion lock
    $val = $self->{'owner'} = undef;         # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_ownedInstance($self) if $old;
    $val->add_ownedInstance($self)    if $val;

  
  }
}


=head2 C<clear_owner>

  $obj->clear_owner;

Clears the AssociationEnd C<owner> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance>.
Returns C<$obj>.

=cut
sub clear_owner ($@)
{
  my ($self) = @_;

  my $old;
  if ( defined ($old = $self->{'owner'}) ) { # Recursion lock
    my $val = $self->{'owner'} = undef;      # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_ownedInstance($self) if $old;
    $val->add_ownedInstance($self)    if $val;

    }

  $self;
}


=head2 C<count_owner>

  $obj->count_owner;

Returns the number of elements of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance> associated with C<owner>.

=cut
sub count_owner ($)
{
  my ($self) = @_;

  my $x = $self->{'owner'};

  defined $x ? 1 : 0;
}




=for html <hr/>

=cut

#################################################################
# AssociationEnd conformingInstance <---> playedRole
# type = UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::ClassifierRole
# multiplicity = 0..*
# ordering = 

=head2 C<playedRole>

  my @val = $obj->playedRole;
  my $ary_val = $obj->playedRole;

Returns the AssociationEnd C<playedRole> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::ClassifierRole|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::ClassifierRole>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub playedRole ($)
{
  my ($self) = @_;

    my $x = $self->{'playedRole'};

  # confess("Container for playedRole $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_playedRole>

  $obj->set_playedRole(@val);

Sets the AssociationEnd C<playedRole> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::ClassifierRole|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::ClassifierRole>.
Returns C<$obj>.

=cut
sub set_playedRole ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_playedRole;
  $self->add_playedRole(@val);
}


=head2 C<add_playedRole>

  $obj->add_playedRole(@val);

Adds AssociationEnd C<playedRole> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::ClassifierRole|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::ClassifierRole>.
Returns C<$obj>.

=cut
sub add_playedRole ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'playedRole'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::ClassifierRole')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.playedRole");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_conformingInstance($self) if $old;
    $val->add_conformingInstance($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_playedRole>

  $obj->remove_playedRole(@val);

Removes the AssociationEnd C<playedRole> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::ClassifierRole|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::ClassifierRole>.
Returns C<$obj>.

=cut
sub remove_playedRole ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'playedRole'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::ClassifierRole')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.playedRole");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_conformingInstance($self) if $old;
    $val->add_conformingInstance($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_playedRole>

  $obj->clear_playedRole;

Clears the AssociationEnd C<playedRole> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::ClassifierRole|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::ClassifierRole>.
Returns C<$obj>.

=cut
sub clear_playedRole ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'playedRole'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'playedRole'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_conformingInstance($self) if $old;
    $val->add_conformingInstance($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_playedRole>

  $obj->count_playedRole;

Returns the number of elements associated with C<playedRole>.

=cut
sub count_playedRole ($)
{
  my ($self) = @_;

  my $x = $self->{'playedRole'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd instance <---> slot
# type = UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink
# multiplicity = 0..*
# ordering = 

=head2 C<slot>

  my @val = $obj->slot;
  my $ary_val = $obj->slot;

Returns the AssociationEnd C<slot> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub slot ($)
{
  my ($self) = @_;

    my $x = $self->{'slot'};

  # confess("Container for slot $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_slot>

  $obj->set_slot(@val);

Sets the AssociationEnd C<slot> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>.
Returns C<$obj>.

=cut
sub set_slot ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_slot;
  $self->add_slot(@val);
}


=head2 C<add_slot>

  $obj->add_slot(@val);

Adds AssociationEnd C<slot> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>.
Returns C<$obj>.

=cut
sub add_slot ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'slot'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.slot");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_instance($self) if $old;
    $val->add_instance($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_slot>

  $obj->remove_slot(@val);

Removes the AssociationEnd C<slot> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>.
Returns C<$obj>.

=cut
sub remove_slot ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'slot'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.slot");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_instance($self) if $old;
    $val->add_instance($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_slot>

  $obj->clear_slot;

Clears the AssociationEnd C<slot> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::AttributeLink>.
Returns C<$obj>.

=cut
sub clear_slot ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'slot'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'slot'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_instance($self) if $old;
    $val->add_instance($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_slot>

  $obj->count_slot;

Returns the number of elements associated with C<slot>.

=cut
sub count_slot ($)
{
  my ($self) = @_;

  my $x = $self->{'slot'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd argument <---> stimulus_argument
# type = UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus
# multiplicity = 0..*
# ordering = 

=head2 C<stimulus_argument>

  my @val = $obj->stimulus_argument;
  my $ary_val = $obj->stimulus_argument;

Returns the AssociationEnd C<stimulus_argument> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub stimulus_argument ($)
{
  my ($self) = @_;

    my $x = $self->{'stimulus_argument'};

  # confess("Container for stimulus_argument $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_stimulus_argument>

  $obj->set_stimulus_argument(@val);

Sets the AssociationEnd C<stimulus_argument> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus>.
Returns C<$obj>.

=cut
sub set_stimulus_argument ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_stimulus_argument;
  $self->add_stimulus_argument(@val);
}


=head2 C<add_stimulus_argument>

  $obj->add_stimulus_argument(@val);

Adds AssociationEnd C<stimulus_argument> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus>.
Returns C<$obj>.

=cut
sub add_stimulus_argument ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'stimulus_argument'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.stimulus_argument");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_argument($self) if $old;
    $val->add_argument($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_stimulus_argument>

  $obj->remove_stimulus_argument(@val);

Removes the AssociationEnd C<stimulus_argument> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus>.
Returns C<$obj>.

=cut
sub remove_stimulus_argument ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'stimulus_argument'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.stimulus_argument");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_argument($self) if $old;
    $val->add_argument($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_stimulus_argument>

  $obj->clear_stimulus_argument;

Clears the AssociationEnd C<stimulus_argument> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus>.
Returns C<$obj>.

=cut
sub clear_stimulus_argument ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'stimulus_argument'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'stimulus_argument'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_argument($self) if $old;
    $val->add_argument($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_stimulus_argument>

  $obj->count_stimulus_argument;

Returns the number of elements associated with C<stimulus_argument>.

=cut
sub count_stimulus_argument ($)
{
  my ($self) = @_;

  my $x = $self->{'stimulus_argument'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd receiver <---> stimulus_receiver
# type = UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus
# multiplicity = 0..*
# ordering = 

=head2 C<stimulus_receiver>

  my @val = $obj->stimulus_receiver;
  my $ary_val = $obj->stimulus_receiver;

Returns the AssociationEnd C<stimulus_receiver> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub stimulus_receiver ($)
{
  my ($self) = @_;

    my $x = $self->{'stimulus_receiver'};

  # confess("Container for stimulus_receiver $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_stimulus_receiver>

  $obj->set_stimulus_receiver(@val);

Sets the AssociationEnd C<stimulus_receiver> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus>.
Returns C<$obj>.

=cut
sub set_stimulus_receiver ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_stimulus_receiver;
  $self->add_stimulus_receiver(@val);
}


=head2 C<add_stimulus_receiver>

  $obj->add_stimulus_receiver(@val);

Adds AssociationEnd C<stimulus_receiver> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus>.
Returns C<$obj>.

=cut
sub add_stimulus_receiver ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'stimulus_receiver'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.stimulus_receiver");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_receiver($self) if $old;
    $val->add_receiver($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_stimulus_receiver>

  $obj->remove_stimulus_receiver(@val);

Removes the AssociationEnd C<stimulus_receiver> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus>.
Returns C<$obj>.

=cut
sub remove_stimulus_receiver ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'stimulus_receiver'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.stimulus_receiver");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_receiver($self) if $old;
    $val->add_receiver($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_stimulus_receiver>

  $obj->clear_stimulus_receiver;

Clears the AssociationEnd C<stimulus_receiver> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus>.
Returns C<$obj>.

=cut
sub clear_stimulus_receiver ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'stimulus_receiver'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'stimulus_receiver'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_receiver($self) if $old;
    $val->add_receiver($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_stimulus_receiver>

  $obj->count_stimulus_receiver;

Returns the number of elements associated with C<stimulus_receiver>.

=cut
sub count_stimulus_receiver ($)
{
  my ($self) = @_;

  my $x = $self->{'stimulus_receiver'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd sender <---> stimulus_sender
# type = UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus
# multiplicity = 0..*
# ordering = 

=head2 C<stimulus_sender>

  my @val = $obj->stimulus_sender;
  my $ary_val = $obj->stimulus_sender;

Returns the AssociationEnd C<stimulus_sender> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub stimulus_sender ($)
{
  my ($self) = @_;

    my $x = $self->{'stimulus_sender'};

  # confess("Container for stimulus_sender $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_stimulus_sender>

  $obj->set_stimulus_sender(@val);

Sets the AssociationEnd C<stimulus_sender> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus>.
Returns C<$obj>.

=cut
sub set_stimulus_sender ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_stimulus_sender;
  $self->add_stimulus_sender(@val);
}


=head2 C<add_stimulus_sender>

  $obj->add_stimulus_sender(@val);

Adds AssociationEnd C<stimulus_sender> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus>.
Returns C<$obj>.

=cut
sub add_stimulus_sender ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'stimulus_sender'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.stimulus_sender");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_sender($self) if $old;
    $val->add_sender($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_stimulus_sender>

  $obj->remove_stimulus_sender(@val);

Removes the AssociationEnd C<stimulus_sender> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus>.
Returns C<$obj>.

=cut
sub remove_stimulus_sender ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'stimulus_sender'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Instance.stimulus_sender");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_sender($self) if $old;
    $val->add_sender($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_stimulus_sender>

  $obj->clear_stimulus_sender;

Clears the AssociationEnd C<stimulus_sender> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::Stimulus>.
Returns C<$obj>.

=cut
sub clear_stimulus_sender ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'stimulus_sender'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'stimulus_sender'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_sender($self) if $old;
    $val->add_sender($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_stimulus_sender>

  $obj->count_stimulus_sender;

Returns the number of elements associated with C<stimulus_sender>.

=cut
sub count_stimulus_sender ($)
{
  my ($self) = @_;

  my $x = $self->{'stimulus_sender'};

    defined $x ? $x->size : 0;
  }







# End of Class Instance


=pod

=for html <hr/>

I<END OF DOCUMENT>

=cut

############################################################################

1; # is true!

############################################################################

### Keep these comments at end of file: kstephens@users.sourceforge.net 2003/04/06 ###
### Local Variables: ###
### mode:perl ###
### perl-indent-level:2 ###
### perl-continued-statement-offset:0 ###
### perl-brace-offset:0 ###
### perl-label-offset:0 ###
### End: ###

