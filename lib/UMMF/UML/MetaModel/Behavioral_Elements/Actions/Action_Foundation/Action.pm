# -*- perl -*-
# DO NOT EDIT - This file is generated by UMMF; http://ummf.sourceforge.net 
# From template: $Id: PerlTemplate.txt,v 1.74 2004/08/01 03:50:07 kstephens Exp $

package UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action;

#use 5.6.1;
use strict;
use warnings;

#################################################################
# Version
#

our $VERSION = do { my @r = (q{1.0} =~ /\d+/g); sprintf "%d." . "%03d" x $#r, @r };


#################################################################
# Documentation
#

=head1 NAME

UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action -- 

=head1 VERSION

1.0

=head1 SYNOPSIS

=head1 DESCRIPTION 

=head1 USAGE

=head1 EXPORT

=head1 METATYPE

L<UMMF::UML::MetaModel::Foundation::Core::Class|UMMF::UML::MetaModel::Foundation::Core::Class>

=head1 SUPERCLASSES

L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>




=head1 ATTRIBUTES


=head2 C<isReadOnly> : UMMF::UML::MetaModel::Foundation::Data_Types::Boolean 


=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>

=item type = L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = I<UNSPECIFIED>

=item container_type = C<Set::Object>

=back



=head1 ASSOCIATIONS


=head2 C<1> : C<successor> E<lt>---E<gt>  C<antecedent> : UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<1> : C<body> E<lt>----  C<> : UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::Clause C<0..1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::Clause|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::Clause>

=item multiplicity = C<0..1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<composite>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<1> : C<body> E<lt>----  C<> : UMMF::UML::MetaModel::Behavioral_Elements::Actions::Jump_Actions::HandlerAction C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Jump_Actions::HandlerAction|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Jump_Actions::HandlerAction>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<composite>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<1> : C<clause> E<lt>----  C<> : UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::LoopAction C<0..1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::LoopAction|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::LoopAction>

=item multiplicity = C<0..1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<composite>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<1..*> : C<clause> E<lt>----  C<> : UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::ConditionalAction C<0..1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::ConditionalAction|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::ConditionalAction>

=item multiplicity = C<0..1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<composite>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<1> : C<subaction> E<lt>---E<gt>  C<collectionAction> : UMMF::UML::MetaModel::Behavioral_Elements::Actions::Collection_Actions::CollectionAction C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Collection_Actions::CollectionAction|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Collection_Actions::CollectionAction>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<1> : C<predecessor> E<lt>---E<gt>  C<consequent> : UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<subaction> E<lt>---E<gt>  C<group> : UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::GroupAction C<0..1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::GroupAction|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::GroupAction>

=item multiplicity = C<0..1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<composite>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..1> : C<action> E<lt>---E<gt>  C<inputPin> : UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<ordered>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<ARRAY>

=back


=head2 C<0..*> : C<protectedAction> E<lt>----  C<jumpHandler> : UMMF::UML::MetaModel::Behavioral_Elements::Actions::Jump_Actions::JumpHandler C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Jump_Actions::JumpHandler|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Jump_Actions::JumpHandler>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..1> : C<action> E<lt>---E<gt>  C<outputPin> : UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<ordered>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<ARRAY>

=back


=head2 C<1> : C<action> E<lt>---E<gt>  C<procedure_Action> : UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Procedure C<0..1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Procedure|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Procedure>

=item multiplicity = C<0..1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<composite>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<1> : C<test> E<lt>----  C<> : UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::Clause C<0..1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::Clause|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::Clause>

=item multiplicity = C<0..1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<composite>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back



=head1 METHODS

=cut



#################################################################
# Dependencies
#





use Carp qw(croak confess);
use Set::Object 1.05;
use Class::Multimethods 1.70;
use Data::Dumper;
use Scalar::Util qw(weaken);
use UMMF::UML::MetaModel::__ObjectBase qw(:__ummf_array);


#################################################################
# Generalizations
#

use base qw(
  UMMF::UML::MetaModel::Foundation::Core::ModelElement



);


#################################################################
# Exports
#

our @EXPORT_OK = qw(
);
our %EXPORT_TAGS = ( 'all' => \@EXPORT_OK );





#################################################################
# Validation
#


=head2 C<__validate_type>

  UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action->__validate_type($value);

Returns true if C<$value> is a valid representation of L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action>.

=cut
sub __validate_type($$)
{
  my ($self, $x) = @_;

  no warnings;

  UNIVERSAL::isa($x, 'UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action')  ;
}


=head2 C<__typecheck>

  UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action->__typecheck($value, $msg);

Calls C<confess()> with C<$msg> if C<<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action->__validate_type($value)>> is false.

=cut
sub __typecheck
{
  my ($self, $x, $msg) = @_;

  confess("typecheck: $msg: type '" . 'UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action' . ": value '$x'")
    unless __validate_type($self, $x);
}


=head2 C<isaAction>


Returns true if receiver is a L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action>.
Other receivers will return false.

=cut
sub isaAction { 1 }


=head2 C<isaBehavioral_Elements__Actions__Action_Foundation__Action>


Returns true if receiver is a L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action>.
Other receivers will return false.
This is the fully qualified version of the C<isaAction> method.

=cut
sub isaBehavioral_Elements__Actions__Action_Foundation__Action { 1 }


#################################################################
# Introspection
#

=head2 C<__model_name> 

  my $name = $obj_or_package->__model_name;

Returns the UML Model name (C<'Behavioral_Elements::Actions::Action_Foundation::Action'>) for an object or package of
this Classifier.

=cut
sub __model_name { 'Behavioral_Elements::Actions::Action_Foundation::Action' }



=head2 C<__isAbstract>

  $package->__isAbstract;

Returns C<0>.

=cut
sub __isAbstract { 0; }


my $__tangram_schema;
=head2 C<__tangram_schema>

  my $tangram_schema $obj_or_package->__tangram_schema

Returns a HASH ref that describes this Classifier for Tangram.

See L<UMMF::UML::Export::Perl::Tangram|UMMF::UML::Export::Perl::Tangram>

=cut
sub __tangram_schema
{
  my ($self) = @_;

  $__tangram_schema ||=
  {
   'classes' =>
   [
     'UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action' =>
     {
       'table' => 'Behavioral_Elements__Actions__Action_Foundation__Action',
       'abstract' => 0,
       'slots' => 
       { 
	 # Attributes
	 	       'isReadOnly'
       => {
	 'type_impl' => 'string',
                                             'col' => 'isReadOnly', 

                                                                                                                   }
      ,
         
	 # Associations
	 	 	       'antecedent'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow',

                           'table' => 'Behavioral_Elements__Actions__Action_Foundation__Action__antecedent', 

                                                               'coll' => 'successor',

                                                                               }
      ,
                  	 	                     	 	                     	 	                     	 	                     	 	       'collectionAction'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Actions::Collection_Actions::CollectionAction',

                           'table' => 'Behavioral_Elements__Actions__Action_Foundation__Action__collectionAction', 

                                                               'coll' => 'subaction',

                                                                               }
      ,
                  	 	       'consequent'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow',

                           'table' => 'Behavioral_Elements__Actions__Action_Foundation__Action__consequent', 

                                                               'coll' => 'predecessor',

                                                                               }
      ,
                  	 	       'group'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::GroupAction',

                  'null' => '1', 

                                    'col' => 'group', 

                                                                                                                   }
      ,
                  	 	       'inputPin'
       => {
	 'type_impl' => 'iarray',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin',

                           'table' => 'Behavioral_Elements__Actions__Action_Foundation__Action__inputPin', 

                                                               'coll' => 'action',

                  'slot' => 'action_i', 

                                    'aggreg' => '1', 

                                           }
      ,
                  	 	                     	 	       'outputPin'
       => {
	 'type_impl' => 'iarray',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin',

                           'table' => 'Behavioral_Elements__Actions__Action_Foundation__Action__outputPin', 

                                                               'coll' => 'action',

                  'slot' => 'action_i', 

                                    'aggreg' => '1', 

                                           }
      ,
                  	 	       'procedure_Action'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Procedure',

                  'null' => '1', 

                                    'col' => 'procedure_Action', 

                                                                                                                   }
      ,
                  	 	                            },
       'bases' => [  'UMMF::UML::MetaModel::Foundation::Core::ModelElement',  ],
       'sql' => {

       },
     },
   ],

   'sql' =>
   {
    # Note Tangram::Ref::get_exporter() has
    # "UPDATE $table SET $self->{col} = $refid WHERE id = $id",
    # The id_col is hard-coded, 
    # Thus id_col will not work.
    #'id_col' => '__sid',
    #'class_col' => '__stype',
   },
     # 'set_id' => sub { }
     # 'get_id' => sub { }

      
  };
}


#################################################################
# Class Attributes
#


      

#################################################################
# Class Associations
#


    

#################################################################
# Initialization
#


=head2 C<___initialize>

Initialize all Attributes and AssociationEnds in a instance of this Classifier.
Does B<not> initalize slots in its Generalizations.

See also: C<__initialize>.

=cut
sub ___initialize
{
  my ($self) = @_;

  # Attributes

    # Attribute isReadOnly
  if ( exists $self->{'isReadOnly'} ) {
    my $x = $self->{'isReadOnly'};
    $self->{'isReadOnly'} = undef;
    $self->set_isReadOnly($x);
  } else {
      }
  


  # Associations

  # AssociationEnd 
  #  successor 1
  #  <--> 
  #  antecedent 0..* UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow.
    if ( defined $self->{'antecedent'} ) {
    my $x = $self->{'antecedent'};
        $self->{'antecedent'} = Set::Object->new();
        $self->set_antecedent(@$x);
  }
  
  # AssociationEnd 
  #  subaction 1
  #  <--> 
  #  collectionAction 0..* UMMF::UML::MetaModel::Behavioral_Elements::Actions::Collection_Actions::CollectionAction.
    if ( defined $self->{'collectionAction'} ) {
    my $x = $self->{'collectionAction'};
        $self->{'collectionAction'} = Set::Object->new();
        $self->set_collectionAction(@$x);
  }
  
  # AssociationEnd 
  #  predecessor 1
  #  <--> 
  #  consequent 0..* UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow.
    if ( defined $self->{'consequent'} ) {
    my $x = $self->{'consequent'};
        $self->{'consequent'} = Set::Object->new();
        $self->set_consequent(@$x);
  }
  
  # AssociationEnd 
  #  subaction 0..*
  #  <--> 
  #  group 0..1 UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::GroupAction.
    if ( defined $self->{'group'} ) {
    my $x = $self->{'group'};
    $self->{'group'} = undef;
    $self->set_group($x);
  }
  
  # AssociationEnd 
  #  action 0..1
  #  <--> 
  #  inputPin 0..* UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin.
    if ( defined $self->{'inputPin'} ) {
    my $x = $self->{'inputPin'};
        $self->{'inputPin'} = [ ];
        $self->set_inputPin(@$x);
  }
  
  # AssociationEnd 
  #  action 0..1
  #  <--> 
  #  outputPin 0..* UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin.
    if ( defined $self->{'outputPin'} ) {
    my $x = $self->{'outputPin'};
        $self->{'outputPin'} = [ ];
        $self->set_outputPin(@$x);
  }
  
  # AssociationEnd 
  #  action 1
  #  <--> 
  #  procedure_Action 0..1 UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Procedure.
    if ( defined $self->{'procedure_Action'} ) {
    my $x = $self->{'procedure_Action'};
    $self->{'procedure_Action'} = undef;
    $self->set_procedure_Action($x);
  }
  

  $self;
}


my $__initialize_use;

=head2 C<__initialize>

Initialize all slots in this Classifier and all its Generalizations.

See also: C<___initialize>.

=cut
sub __initialize
{
  my ($self) = @_;

  # $DB::single = 1;

  unless ( ! $__initialize_use ) {
    $__initialize_use = 1;
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Element');
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::ModelElement');
  }

  $self->UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action::___initialize;
  $self->UMMF::UML::MetaModel::Foundation::Core::Element::___initialize;
  $self->UMMF::UML::MetaModel::Foundation::Core::ModelElement::___initialize;

  $self;
}
      

=head2 C<__create>

Calls all <<create>> Methods for this Classifier and all Generalizations.

See also: C<___create>.

=cut
sub __create
{
  my ($self, @args) = @_;

  # $DB::single = 1;
  $self->UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action::___create(@args);
  $self->UMMF::UML::MetaModel::Foundation::Core::Element::___create();
  $self->UMMF::UML::MetaModel::Foundation::Core::ModelElement::___create();

  $self;
}




#################################################################
# Attributes
#



=for html <hr/>

=cut

#################################################################
# Attribute isReadOnly
# type = UMMF::UML::MetaModel::Foundation::Data_Types::Boolean
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = 

=head2 C<isReadOnly>

  my $val = $obj->isReadOnly;

Returns the L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean> value of Attribute C<isReadOnly>.

=cut
sub isReadOnly ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isReadOnly'};

  ;

  $val;
}


=head2 C<set_isReadOnly>

  $obj->set_isReadOnly($val);

Sets the value of Attribute C<isReadOnly>.
C<$val> must be of type L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean> or C<undef>.
Returns C<$obj>.

=cut
sub set_isReadOnly ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    ;
  }

    $self->{'isReadOnly'} = $val
  ;

  ;

  $self;
}


=head2 C<count_isReadOnly>

  $obj->count_isReadOnly;

Returns the number of elements (0 or 1) in C<isReadOnly>.

=cut
sub count_isReadOnly ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isReadOnly'};

  ;

  defined $val ? 1 : 0;
}




#################################################################
# Association
#


=for html <hr/>

=cut

#################################################################
# AssociationEnd successor <---> antecedent
# type = UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow
# multiplicity = 0..*
# ordering = 

=head2 C<antecedent>

  my @val = $obj->antecedent;
  my $ary_val = $obj->antecedent;

Returns the AssociationEnd C<antecedent> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub antecedent ($)
{
  my ($self) = @_;

    my $x = $self->{'antecedent'};

  # confess("Container for antecedent $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_antecedent>

  $obj->set_antecedent(@val);

Sets the AssociationEnd C<antecedent> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow>.
Returns C<$obj>.

=cut
sub set_antecedent ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_antecedent;
  $self->add_antecedent(@val);
}


=head2 C<add_antecedent>

  $obj->add_antecedent(@val);

Adds AssociationEnd C<antecedent> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow>.
Returns C<$obj>.

=cut
sub add_antecedent ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'antecedent'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action.antecedent");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_successor($self) if $old;
    $val->add_successor($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_antecedent>

  $obj->remove_antecedent(@val);

Removes the AssociationEnd C<antecedent> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow>.
Returns C<$obj>.

=cut
sub remove_antecedent ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'antecedent'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action.antecedent");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_successor($self) if $old;
    $val->add_successor($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_antecedent>

  $obj->clear_antecedent;

Clears the AssociationEnd C<antecedent> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow>.
Returns C<$obj>.

=cut
sub clear_antecedent ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'antecedent'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'antecedent'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_successor($self) if $old;
    $val->add_successor($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_antecedent>

  $obj->count_antecedent;

Returns the number of elements associated with C<antecedent>.

=cut
sub count_antecedent ($)
{
  my ($self) = @_;

  my $x = $self->{'antecedent'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd subaction <---> collectionAction
# type = UMMF::UML::MetaModel::Behavioral_Elements::Actions::Collection_Actions::CollectionAction
# multiplicity = 0..*
# ordering = 

=head2 C<collectionAction>

  my @val = $obj->collectionAction;
  my $ary_val = $obj->collectionAction;

Returns the AssociationEnd C<collectionAction> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Collection_Actions::CollectionAction|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Collection_Actions::CollectionAction>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub collectionAction ($)
{
  my ($self) = @_;

    my $x = $self->{'collectionAction'};

  # confess("Container for collectionAction $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_collectionAction>

  $obj->set_collectionAction(@val);

Sets the AssociationEnd C<collectionAction> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Collection_Actions::CollectionAction|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Collection_Actions::CollectionAction>.
Returns C<$obj>.

=cut
sub set_collectionAction ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_collectionAction;
  $self->add_collectionAction(@val);
}


=head2 C<add_collectionAction>

  $obj->add_collectionAction(@val);

Adds AssociationEnd C<collectionAction> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Collection_Actions::CollectionAction|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Collection_Actions::CollectionAction>.
Returns C<$obj>.

=cut
sub add_collectionAction ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'collectionAction'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Actions::Collection_Actions::CollectionAction')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action.collectionAction");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_subaction($self) if $old;
    $val->add_subaction($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_collectionAction>

  $obj->remove_collectionAction(@val);

Removes the AssociationEnd C<collectionAction> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Collection_Actions::CollectionAction|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Collection_Actions::CollectionAction>.
Returns C<$obj>.

=cut
sub remove_collectionAction ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'collectionAction'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Actions::Collection_Actions::CollectionAction')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action.collectionAction");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_subaction($self) if $old;
    $val->add_subaction($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_collectionAction>

  $obj->clear_collectionAction;

Clears the AssociationEnd C<collectionAction> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Collection_Actions::CollectionAction|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Collection_Actions::CollectionAction>.
Returns C<$obj>.

=cut
sub clear_collectionAction ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'collectionAction'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'collectionAction'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_subaction($self) if $old;
    $val->add_subaction($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_collectionAction>

  $obj->count_collectionAction;

Returns the number of elements associated with C<collectionAction>.

=cut
sub count_collectionAction ($)
{
  my ($self) = @_;

  my $x = $self->{'collectionAction'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd predecessor <---> consequent
# type = UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow
# multiplicity = 0..*
# ordering = 

=head2 C<consequent>

  my @val = $obj->consequent;
  my $ary_val = $obj->consequent;

Returns the AssociationEnd C<consequent> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub consequent ($)
{
  my ($self) = @_;

    my $x = $self->{'consequent'};

  # confess("Container for consequent $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_consequent>

  $obj->set_consequent(@val);

Sets the AssociationEnd C<consequent> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow>.
Returns C<$obj>.

=cut
sub set_consequent ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_consequent;
  $self->add_consequent(@val);
}


=head2 C<add_consequent>

  $obj->add_consequent(@val);

Adds AssociationEnd C<consequent> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow>.
Returns C<$obj>.

=cut
sub add_consequent ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'consequent'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action.consequent");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_predecessor($self) if $old;
    $val->add_predecessor($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_consequent>

  $obj->remove_consequent(@val);

Removes the AssociationEnd C<consequent> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow>.
Returns C<$obj>.

=cut
sub remove_consequent ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'consequent'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action.consequent");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_predecessor($self) if $old;
    $val->add_predecessor($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_consequent>

  $obj->clear_consequent;

Clears the AssociationEnd C<consequent> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::ControlFlow>.
Returns C<$obj>.

=cut
sub clear_consequent ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'consequent'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'consequent'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_predecessor($self) if $old;
    $val->add_predecessor($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_consequent>

  $obj->count_consequent;

Returns the number of elements associated with C<consequent>.

=cut
sub count_consequent ($)
{
  my ($self) = @_;

  my $x = $self->{'consequent'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd subaction <---> group
# type = UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::GroupAction
# multiplicity = 0..1
# ordering = 

=head2 C<group>

  my $val = $obj->group;

Returns the AssociationEnd C<group> value of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::GroupAction|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::GroupAction>.

=cut
sub group ($)
{
  my ($self) = @_;
		  
  $self->{'group'};
}


=head2 C<set_group>

  $obj->set_group($val);

Sets the AssociationEnd C<group> value.
C<$val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::GroupAction|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::GroupAction>.
Returns C<$obj>.

=cut
sub set_group ($$)
{
  my ($self, $val) = @_;
		  
  no warnings; # Use of uninitialized value in string ne at ...
		  
  my $old;
  if ( ($old = $self->{'group'}) ne $val ) { # Recursion lock

    if ( defined $val ) { $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::GroupAction')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action.group") }

    # Recursion lock
        $self->{'group'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_subaction($self) if $old;
    $val->add_subaction($self)    if $val;

    }
		  
  $self;
}


=head2 C<add_group>

  $obj->add_group($val);

Adds the AssociationEnd C<group> value.
C<$val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::GroupAction|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::GroupAction>.
Throws exception if a value already exists.
Returns C<$obj>.

=cut
sub add_group ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'group'}) ne $val ) { # Recursion lock
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::GroupAction')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action.group");
      
    # confess("UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action::group: too many")
    # if defined $self->{'group'};

    # Recursion lock
        $self->{'group'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_subaction($self) if $old;
    $val->add_subaction($self)    if $val;

  
  }

  $self;
}


=head2 C<remove_group>

  $obj->remove_group($val);

Removes the AssociationEnd C<group> value C<$val>.
Returns C<$obj>.

=cut
sub remove_group ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'group'}) eq $val ) { # Recursion lock
    $val = $self->{'group'} = undef;         # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_subaction($self) if $old;
    $val->add_subaction($self)    if $val;

  
  }
}


=head2 C<clear_group>

  $obj->clear_group;

Clears the AssociationEnd C<group> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::GroupAction|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::GroupAction>.
Returns C<$obj>.

=cut
sub clear_group ($@)
{
  my ($self) = @_;

  my $old;
  if ( defined ($old = $self->{'group'}) ) { # Recursion lock
    my $val = $self->{'group'} = undef;      # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_subaction($self) if $old;
    $val->add_subaction($self)    if $val;

    }

  $self;
}


=head2 C<count_group>

  $obj->count_group;

Returns the number of elements of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::GroupAction|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Composite_Actions::GroupAction> associated with C<group>.

=cut
sub count_group ($)
{
  my ($self) = @_;

  my $x = $self->{'group'};

  defined $x ? 1 : 0;
}




=for html <hr/>

=cut

#################################################################
# AssociationEnd action <---> inputPin
# type = UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin
# multiplicity = 0..*
# ordering = ordered

=head2 C<inputPin>

  my @val = $obj->inputPin;
  my $ary_val = $obj->inputPin;

Returns the AssociationEnd C<inputPin> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub inputPin ($)
{
  my ($self) = @_;

    my $x = $self->{'inputPin'} ||= [ ];

  wantarray ? @{$x} : $x;
  
}


=head2 C<index_inputPin>

  my $x = $obj->index_inputPin($i);
  my @x = $obj->index_inputPin($i, $count);

In scalar context, returns the value of AssociationEnd C<inputPin> at index C<$i>.
In array context, returns the values between index C<$i> and C<$i + $count - 1>, inclusive.

=cut
sub index_inputPin ($$@)
{
  my ($self, $i, $count) = @_;

  ;

  my $val = $self->{'inputPin'} ||= [ ];

  ;

  wantarray ? $val->[$i .. (defined $count ? $i + $count - 1 : $i)]
            : $val->[$i];
}


=head2 C<index_of_inputPin>

  my $index = $obj->index_of_inputPin($val);

Returns the index of C<$val> in AssociationEnd C<inputPin>.
Return C<undef> if C<$val> is not in C<inputPin>.

=cut
sub index_of_inputPin ($$)
{
  my ($self, $x) = @_;

  ;

  my $val = $self->{'inputPin'} ||= [ ];

  ;

  __ummf_array_index($val, $x);
}


=head2 C<set_inputPin>

  $obj->set_inputPin(@val);

Sets the AssociationEnd C<inputPin> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin>.
Returns C<$obj>.

=cut
sub set_inputPin ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_inputPin;
  $self->add_inputPin(@val);
}


=head2 C<set_index_inputPin>

  $obj->set_index_inputPin($i, $val);

Sets the value of AssociationEnd C<inputPin> at index C<$i>.
Returns self.

=cut
sub set_index_inputPin ($$$)
{
  my ($self, $i, $val) = @_;

  ;

  my $x = $self->{'inputPin'} ||= [ ];

  no warnings;
  my $old;
  if ( ($old = $x->[$i]) ne $val) {
    # Recursion lock
        $x->[$i] = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_action($self) if $old;
    $val->add_action($self)    if $val;

  
    ;
  }

  $self;
}


=head2 C<add_inputPin>

  $obj->add_inputPin(@val);

Adds AssociationEnd C<inputPin> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin>.
Returns C<$obj>.

=cut
sub add_inputPin ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'inputPin'} ||= [ ];
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if grep($_ eq $val, @$x);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action.inputPin");

    # Recursion lock
        push(@{$x}, $val);
        
    # Remove and add associations with other ends.
        
    $old->remove_action($self) if $old;
    $val->add_action($self)    if $val;

    }
  
  $self;
}


=head2 C<add_index_inputPin>

  $obj->add_index_inputPin($i, @val);

Adds AssociationEnd C<inputPin> values at index C<$i>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin>.
Returns C<$obj>.

=cut
sub add_index_inputPin ($$@)
{
  my ($self, $i, @val) = @_;

  
    my $x = $self->{'inputPin'} ||= [ ];
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if grep($_ eq $val, @$x);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action.inputPin");

    # Recursion lock
        splice(@{$x}, $i, 0, $val); # Recursion lock
        ++ $i;
    
    # Remove and add associations with other ends.
        
    $old->remove_action($self) if $old;
    $val->add_action($self)    if $val;

    }
  
  
  $self;
}


=head2 C<remove_inputPin>

  $obj->remove_inputPin(@val);

Removes the AssociationEnd C<inputPin> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin>.
Returns C<$obj>.

=cut
sub remove_inputPin ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'inputPin'} ||= [ ];
  
  for my $old ( @val ) {
    # Recursion lock
        my $i; # index of $old in @$x.
    next unless defined($i = __ummf_array_index($x, $old));
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action.inputPin");

    # Recursion lock
        splice(@$x, $i, 1);     
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_action($self) if $old;
    $val->add_action($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_inputPin>

  $obj->clear_inputPin;

Clears the AssociationEnd C<inputPin> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::InputPin>.
Returns C<$obj>.

=cut
sub clear_inputPin ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'inputPin'} ||= [ ];
  
  my $val; # Place holder for other MACRO.
  
    $self->{'inputPin'} = [ ];  # Recursion lock
  for my $old ( @$x ) { # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_action($self) if $old;
    $val->add_action($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_inputPin>

  $obj->count_inputPin;

Returns the number of elements associated with C<inputPin>.

=cut
sub count_inputPin ($)
{
  my ($self) = @_;

  my $x = $self->{'inputPin'};

    defined $x ? scalar @$x : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd action <---> outputPin
# type = UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin
# multiplicity = 0..*
# ordering = ordered

=head2 C<outputPin>

  my @val = $obj->outputPin;
  my $ary_val = $obj->outputPin;

Returns the AssociationEnd C<outputPin> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub outputPin ($)
{
  my ($self) = @_;

    my $x = $self->{'outputPin'} ||= [ ];

  wantarray ? @{$x} : $x;
  
}


=head2 C<index_outputPin>

  my $x = $obj->index_outputPin($i);
  my @x = $obj->index_outputPin($i, $count);

In scalar context, returns the value of AssociationEnd C<outputPin> at index C<$i>.
In array context, returns the values between index C<$i> and C<$i + $count - 1>, inclusive.

=cut
sub index_outputPin ($$@)
{
  my ($self, $i, $count) = @_;

  ;

  my $val = $self->{'outputPin'} ||= [ ];

  ;

  wantarray ? $val->[$i .. (defined $count ? $i + $count - 1 : $i)]
            : $val->[$i];
}


=head2 C<index_of_outputPin>

  my $index = $obj->index_of_outputPin($val);

Returns the index of C<$val> in AssociationEnd C<outputPin>.
Return C<undef> if C<$val> is not in C<outputPin>.

=cut
sub index_of_outputPin ($$)
{
  my ($self, $x) = @_;

  ;

  my $val = $self->{'outputPin'} ||= [ ];

  ;

  __ummf_array_index($val, $x);
}


=head2 C<set_outputPin>

  $obj->set_outputPin(@val);

Sets the AssociationEnd C<outputPin> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin>.
Returns C<$obj>.

=cut
sub set_outputPin ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_outputPin;
  $self->add_outputPin(@val);
}


=head2 C<set_index_outputPin>

  $obj->set_index_outputPin($i, $val);

Sets the value of AssociationEnd C<outputPin> at index C<$i>.
Returns self.

=cut
sub set_index_outputPin ($$$)
{
  my ($self, $i, $val) = @_;

  ;

  my $x = $self->{'outputPin'} ||= [ ];

  no warnings;
  my $old;
  if ( ($old = $x->[$i]) ne $val) {
    # Recursion lock
        $x->[$i] = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_action($self) if $old;
    $val->add_action($self)    if $val;

  
    ;
  }

  $self;
}


=head2 C<add_outputPin>

  $obj->add_outputPin(@val);

Adds AssociationEnd C<outputPin> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin>.
Returns C<$obj>.

=cut
sub add_outputPin ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'outputPin'} ||= [ ];
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if grep($_ eq $val, @$x);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action.outputPin");

    # Recursion lock
        push(@{$x}, $val);
        
    # Remove and add associations with other ends.
        
    $old->remove_action($self) if $old;
    $val->add_action($self)    if $val;

    }
  
  $self;
}


=head2 C<add_index_outputPin>

  $obj->add_index_outputPin($i, @val);

Adds AssociationEnd C<outputPin> values at index C<$i>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin>.
Returns C<$obj>.

=cut
sub add_index_outputPin ($$@)
{
  my ($self, $i, @val) = @_;

  
    my $x = $self->{'outputPin'} ||= [ ];
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if grep($_ eq $val, @$x);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action.outputPin");

    # Recursion lock
        splice(@{$x}, $i, 0, $val); # Recursion lock
        ++ $i;
    
    # Remove and add associations with other ends.
        
    $old->remove_action($self) if $old;
    $val->add_action($self)    if $val;

    }
  
  
  $self;
}


=head2 C<remove_outputPin>

  $obj->remove_outputPin(@val);

Removes the AssociationEnd C<outputPin> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin>.
Returns C<$obj>.

=cut
sub remove_outputPin ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'outputPin'} ||= [ ];
  
  for my $old ( @val ) {
    # Recursion lock
        my $i; # index of $old in @$x.
    next unless defined($i = __ummf_array_index($x, $old));
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action.outputPin");

    # Recursion lock
        splice(@$x, $i, 1);     
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_action($self) if $old;
    $val->add_action($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_outputPin>

  $obj->clear_outputPin;

Clears the AssociationEnd C<outputPin> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::OutputPin>.
Returns C<$obj>.

=cut
sub clear_outputPin ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'outputPin'} ||= [ ];
  
  my $val; # Place holder for other MACRO.
  
    $self->{'outputPin'} = [ ];  # Recursion lock
  for my $old ( @$x ) { # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_action($self) if $old;
    $val->add_action($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_outputPin>

  $obj->count_outputPin;

Returns the number of elements associated with C<outputPin>.

=cut
sub count_outputPin ($)
{
  my ($self) = @_;

  my $x = $self->{'outputPin'};

    defined $x ? scalar @$x : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd action <---> procedure_Action
# type = UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Procedure
# multiplicity = 0..1
# ordering = 

=head2 C<procedure_Action>

  my $val = $obj->procedure_Action;

Returns the AssociationEnd C<procedure_Action> value of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Procedure|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Procedure>.

=cut
sub procedure_Action ($)
{
  my ($self) = @_;
		  
  $self->{'procedure_Action'};
}


=head2 C<set_procedure_Action>

  $obj->set_procedure_Action($val);

Sets the AssociationEnd C<procedure_Action> value.
C<$val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Procedure|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Procedure>.
Returns C<$obj>.

=cut
sub set_procedure_Action ($$)
{
  my ($self, $val) = @_;
		  
  no warnings; # Use of uninitialized value in string ne at ...
		  
  my $old;
  if ( ($old = $self->{'procedure_Action'}) ne $val ) { # Recursion lock

    if ( defined $val ) { $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Procedure')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action.procedure_Action") }

    # Recursion lock
        $self->{'procedure_Action'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_action($self) if $old;
    $val->add_action($self)    if $val;

    }
		  
  $self;
}


=head2 C<add_procedure_Action>

  $obj->add_procedure_Action($val);

Adds the AssociationEnd C<procedure_Action> value.
C<$val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Procedure|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Procedure>.
Throws exception if a value already exists.
Returns C<$obj>.

=cut
sub add_procedure_Action ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'procedure_Action'}) ne $val ) { # Recursion lock
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Procedure')->__typecheck($val, "UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action.procedure_Action");
      
    # confess("UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Action::procedure_Action: too many")
    # if defined $self->{'procedure_Action'};

    # Recursion lock
        $self->{'procedure_Action'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_action($self) if $old;
    $val->add_action($self)    if $val;

  
  }

  $self;
}


=head2 C<remove_procedure_Action>

  $obj->remove_procedure_Action($val);

Removes the AssociationEnd C<procedure_Action> value C<$val>.
Returns C<$obj>.

=cut
sub remove_procedure_Action ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'procedure_Action'}) eq $val ) { # Recursion lock
    $val = $self->{'procedure_Action'} = undef;         # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_action($self) if $old;
    $val->add_action($self)    if $val;

  
  }
}


=head2 C<clear_procedure_Action>

  $obj->clear_procedure_Action;

Clears the AssociationEnd C<procedure_Action> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Procedure|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Procedure>.
Returns C<$obj>.

=cut
sub clear_procedure_Action ($@)
{
  my ($self) = @_;

  my $old;
  if ( defined ($old = $self->{'procedure_Action'}) ) { # Recursion lock
    my $val = $self->{'procedure_Action'} = undef;      # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_action($self) if $old;
    $val->add_action($self)    if $val;

    }

  $self;
}


=head2 C<count_procedure_Action>

  $obj->count_procedure_Action;

Returns the number of elements of type L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Procedure|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Action_Foundation::Procedure> associated with C<procedure_Action>.

=cut
sub count_procedure_Action ($)
{
  my ($self) = @_;

  my $x = $self->{'procedure_Action'};

  defined $x ? 1 : 0;
}







# End of Class Action


=pod

=for html <hr/>

I<END OF DOCUMENT>

=cut

############################################################################

1; # is true!

############################################################################

### Keep these comments at end of file: kstephens@users.sourceforge.net 2003/04/06 ###
### Local Variables: ###
### mode:perl ###
### perl-indent-level:2 ###
### perl-continued-statement-offset:0 ###
### perl-brace-offset:0 ###
### perl-label-offset:0 ###
### End: ###

