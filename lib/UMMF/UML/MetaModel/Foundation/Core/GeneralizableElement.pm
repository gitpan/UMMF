# -*- perl -*-
# DO NOT EDIT - This file is generated by UMMF; http://ummf.sourceforge.net 
# From template: $Id: PerlTemplate.txt,v 1.74 2004/08/01 03:50:07 kstephens Exp $

package UMMF::UML::MetaModel::Foundation::Core::GeneralizableElement;

#use 5.6.1;
use strict;
use warnings;

#################################################################
# Version
#

our $VERSION = do { my @r = (q{1.0} =~ /\d+/g); sprintf "%d." . "%03d" x $#r, @r };


#################################################################
# Documentation
#

=head1 NAME

UMMF::UML::MetaModel::Foundation::Core::GeneralizableElement -- 

=head1 VERSION

1.0

=head1 SYNOPSIS

=head1 DESCRIPTION 

=head1 USAGE

=head1 EXPORT

=head1 METATYPE

L<UMMF::UML::MetaModel::Foundation::Core::Class|UMMF::UML::MetaModel::Foundation::Core::Class>

=head1 SUPERCLASSES

L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>




=head1 ATTRIBUTES


=head2 C<isRoot> : UMMF::UML::MetaModel::Foundation::Data_Types::Boolean 


=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>

=item type = L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = C<<"false">>

=item container_type = C<Set::Object>

=back


=head2 C<isLeaf> : UMMF::UML::MetaModel::Foundation::Data_Types::Boolean 


=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>

=item type = L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = C<<"false">>

=item container_type = C<Set::Object>

=back


=head2 C<isAbstract> : UMMF::UML::MetaModel::Foundation::Data_Types::Boolean 


=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>

=item type = L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = C<<"false">>

=item container_type = C<Set::Object>

=back



=head1 ASSOCIATIONS


=head2 C<1> : C<child> E<lt>---E<gt>  C<generalization> : UMMF::UML::MetaModel::Foundation::Core::Generalization C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::Generalization|UMMF::UML::MetaModel::Foundation::Core::Generalization>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<1> : C<parent> E<lt>---E<gt>  C<specialization> : UMMF::UML::MetaModel::Foundation::Core::Generalization C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::Generalization|UMMF::UML::MetaModel::Foundation::Core::Generalization>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back



=head1 METHODS

=cut



#################################################################
# Dependencies
#





use Carp qw(croak confess);
use Set::Object 1.05;
use Class::Multimethods 1.70;
use Data::Dumper;
use Scalar::Util qw(weaken);
use UMMF::UML::MetaModel::__ObjectBase qw(:__ummf_array);


#################################################################
# Generalizations
#

use base qw(
  UMMF::UML::MetaModel::Foundation::Core::ModelElement



);


#################################################################
# Exports
#

our @EXPORT_OK = qw(
);
our %EXPORT_TAGS = ( 'all' => \@EXPORT_OK );





#################################################################
# Validation
#


=head2 C<__validate_type>

  UMMF::UML::MetaModel::Foundation::Core::GeneralizableElement->__validate_type($value);

Returns true if C<$value> is a valid representation of L<UMMF::UML::MetaModel::Foundation::Core::GeneralizableElement|UMMF::UML::MetaModel::Foundation::Core::GeneralizableElement>.

=cut
sub __validate_type($$)
{
  my ($self, $x) = @_;

  no warnings;

  UNIVERSAL::isa($x, 'UMMF::UML::MetaModel::Foundation::Core::GeneralizableElement')  ;
}


=head2 C<__typecheck>

  UMMF::UML::MetaModel::Foundation::Core::GeneralizableElement->__typecheck($value, $msg);

Calls C<confess()> with C<$msg> if C<<UMMF::UML::MetaModel::Foundation::Core::GeneralizableElement->__validate_type($value)>> is false.

=cut
sub __typecheck
{
  my ($self, $x, $msg) = @_;

  confess("typecheck: $msg: type '" . 'UMMF::UML::MetaModel::Foundation::Core::GeneralizableElement' . ": value '$x'")
    unless __validate_type($self, $x);
}


=head2 C<isaGeneralizableElement>


Returns true if receiver is a L<UMMF::UML::MetaModel::Foundation::Core::GeneralizableElement|UMMF::UML::MetaModel::Foundation::Core::GeneralizableElement>.
Other receivers will return false.

=cut
sub isaGeneralizableElement { 1 }


=head2 C<isaFoundation__Core__GeneralizableElement>


Returns true if receiver is a L<UMMF::UML::MetaModel::Foundation::Core::GeneralizableElement|UMMF::UML::MetaModel::Foundation::Core::GeneralizableElement>.
Other receivers will return false.
This is the fully qualified version of the C<isaGeneralizableElement> method.

=cut
sub isaFoundation__Core__GeneralizableElement { 1 }


#################################################################
# Introspection
#

=head2 C<__model_name> 

  my $name = $obj_or_package->__model_name;

Returns the UML Model name (C<'Foundation::Core::GeneralizableElement'>) for an object or package of
this Classifier.

=cut
sub __model_name { 'Foundation::Core::GeneralizableElement' }



=head2 C<__isAbstract>

  $package->__isAbstract;

Returns C<1>.

=cut
sub __isAbstract { 1; }


my $__tangram_schema;
=head2 C<__tangram_schema>

  my $tangram_schema $obj_or_package->__tangram_schema

Returns a HASH ref that describes this Classifier for Tangram.

See L<UMMF::UML::Export::Perl::Tangram|UMMF::UML::Export::Perl::Tangram>

=cut
sub __tangram_schema
{
  my ($self) = @_;

  $__tangram_schema ||=
  {
   'classes' =>
   [
     'UMMF::UML::MetaModel::Foundation::Core::GeneralizableElement' =>
     {
       'table' => 'Foundation__Core__GeneralizableElement',
       'abstract' => 1,
       'slots' => 
       { 
	 # Attributes
	 	       'isRoot'
       => {
	 'type_impl' => 'string',
                                             'col' => 'isRoot', 

                                                                                                                   }
      ,
         	       'isLeaf'
       => {
	 'type_impl' => 'string',
                                             'col' => 'isLeaf', 

                                                                                                                   }
      ,
         	       'isAbstract'
       => {
	 'type_impl' => 'string',
                                             'col' => 'isAbstract', 

                                                                                                                   }
      ,
         
	 # Associations
	 	 	       'generalization'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::Generalization',

                           'table' => 'Foundation__Core__GeneralizableElement__generalization', 

                                                               'coll' => 'child',

                                                                               }
      ,
                  	 	       'specialization'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::Generalization',

                           'table' => 'Foundation__Core__GeneralizableElement__specialization', 

                                                               'coll' => 'parent',

                                                                               }
      ,
                         },
       'bases' => [  'UMMF::UML::MetaModel::Foundation::Core::ModelElement',  ],
       'sql' => {

       },
     },
   ],

   'sql' =>
   {
    # Note Tangram::Ref::get_exporter() has
    # "UPDATE $table SET $self->{col} = $refid WHERE id = $id",
    # The id_col is hard-coded, 
    # Thus id_col will not work.
    #'id_col' => '__sid',
    #'class_col' => '__stype',
   },
     # 'set_id' => sub { }
     # 'get_id' => sub { }

      
  };
}


#################################################################
# Class Attributes
#


          

#################################################################
# Class Associations
#


    

#################################################################
# Initialization
#


=head2 C<___initialize>

Initialize all Attributes and AssociationEnds in a instance of this Classifier.
Does B<not> initalize slots in its Generalizations.

See also: C<__initialize>.

=cut
sub ___initialize
{
  my ($self) = @_;

  # Attributes

    # Attribute isRoot
  if ( exists $self->{'isRoot'} ) {
    my $x = $self->{'isRoot'};
    $self->{'isRoot'} = undef;
    $self->set_isRoot($x);
  } else {
        $self->{'isRoot'} = "false";
      }
  
    # Attribute isLeaf
  if ( exists $self->{'isLeaf'} ) {
    my $x = $self->{'isLeaf'};
    $self->{'isLeaf'} = undef;
    $self->set_isLeaf($x);
  } else {
        $self->{'isLeaf'} = "false";
      }
  
    # Attribute isAbstract
  if ( exists $self->{'isAbstract'} ) {
    my $x = $self->{'isAbstract'};
    $self->{'isAbstract'} = undef;
    $self->set_isAbstract($x);
  } else {
        $self->{'isAbstract'} = "false";
      }
  


  # Associations

  # AssociationEnd 
  #  child 1
  #  <--> 
  #  generalization 0..* UMMF::UML::MetaModel::Foundation::Core::Generalization.
    if ( defined $self->{'generalization'} ) {
    my $x = $self->{'generalization'};
        $self->{'generalization'} = Set::Object->new();
        $self->set_generalization(@$x);
  }
  
  # AssociationEnd 
  #  parent 1
  #  <--> 
  #  specialization 0..* UMMF::UML::MetaModel::Foundation::Core::Generalization.
    if ( defined $self->{'specialization'} ) {
    my $x = $self->{'specialization'};
        $self->{'specialization'} = Set::Object->new();
        $self->set_specialization(@$x);
  }
  

  $self;
}


my $__initialize_use;

=head2 C<__initialize>

Initialize all slots in this Classifier and all its Generalizations.

See also: C<___initialize>.

=cut
sub __initialize
{
  my ($self) = @_;

  # $DB::single = 1;

  unless ( ! $__initialize_use ) {
    $__initialize_use = 1;
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Element');
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::ModelElement');
  }

  $self->UMMF::UML::MetaModel::Foundation::Core::GeneralizableElement::___initialize;
  $self->UMMF::UML::MetaModel::Foundation::Core::Element::___initialize;
  $self->UMMF::UML::MetaModel::Foundation::Core::ModelElement::___initialize;

  $self;
}
      

=head2 C<__create>

Calls all <<create>> Methods for this Classifier and all Generalizations.

See also: C<___create>.

=cut
sub __create
{
  my ($self, @args) = @_;

  # $DB::single = 1;
  $self->UMMF::UML::MetaModel::Foundation::Core::GeneralizableElement::___create(@args);
  $self->UMMF::UML::MetaModel::Foundation::Core::Element::___create();
  $self->UMMF::UML::MetaModel::Foundation::Core::ModelElement::___create();

  $self;
}




#################################################################
# Attributes
#



=for html <hr/>

=cut

#################################################################
# Attribute isRoot
# type = UMMF::UML::MetaModel::Foundation::Data_Types::Boolean
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = "false"

=head2 C<isRoot>

  my $val = $obj->isRoot;

Returns the L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean> value of Attribute C<isRoot>.

=cut
sub isRoot ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isRoot'};

  ;

  $val;
}


=head2 C<set_isRoot>

  $obj->set_isRoot($val);

Sets the value of Attribute C<isRoot>.
C<$val> must be of type L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean> or C<undef>.
Returns C<$obj>.

=cut
sub set_isRoot ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    ;
  }

    $self->{'isRoot'} = $val
  ;

  ;

  $self;
}


=head2 C<count_isRoot>

  $obj->count_isRoot;

Returns the number of elements (0 or 1) in C<isRoot>.

=cut
sub count_isRoot ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isRoot'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute isLeaf
# type = UMMF::UML::MetaModel::Foundation::Data_Types::Boolean
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = "false"

=head2 C<isLeaf>

  my $val = $obj->isLeaf;

Returns the L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean> value of Attribute C<isLeaf>.

=cut
sub isLeaf ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isLeaf'};

  ;

  $val;
}


=head2 C<set_isLeaf>

  $obj->set_isLeaf($val);

Sets the value of Attribute C<isLeaf>.
C<$val> must be of type L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean> or C<undef>.
Returns C<$obj>.

=cut
sub set_isLeaf ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    ;
  }

    $self->{'isLeaf'} = $val
  ;

  ;

  $self;
}


=head2 C<count_isLeaf>

  $obj->count_isLeaf;

Returns the number of elements (0 or 1) in C<isLeaf>.

=cut
sub count_isLeaf ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isLeaf'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute isAbstract
# type = UMMF::UML::MetaModel::Foundation::Data_Types::Boolean
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = "false"

=head2 C<isAbstract>

  my $val = $obj->isAbstract;

Returns the L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean> value of Attribute C<isAbstract>.

=cut
sub isAbstract ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isAbstract'};

  ;

  $val;
}


=head2 C<set_isAbstract>

  $obj->set_isAbstract($val);

Sets the value of Attribute C<isAbstract>.
C<$val> must be of type L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean> or C<undef>.
Returns C<$obj>.

=cut
sub set_isAbstract ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    ;
  }

    $self->{'isAbstract'} = $val
  ;

  ;

  $self;
}


=head2 C<count_isAbstract>

  $obj->count_isAbstract;

Returns the number of elements (0 or 1) in C<isAbstract>.

=cut
sub count_isAbstract ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isAbstract'};

  ;

  defined $val ? 1 : 0;
}




#################################################################
# Association
#


=for html <hr/>

=cut

#################################################################
# AssociationEnd child <---> generalization
# type = UMMF::UML::MetaModel::Foundation::Core::Generalization
# multiplicity = 0..*
# ordering = 

=head2 C<generalization>

  my @val = $obj->generalization;
  my $ary_val = $obj->generalization;

Returns the AssociationEnd C<generalization> values of type L<UMMF::UML::MetaModel::Foundation::Core::Generalization|UMMF::UML::MetaModel::Foundation::Core::Generalization>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub generalization ($)
{
  my ($self) = @_;

    my $x = $self->{'generalization'};

  # confess("Container for generalization $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_generalization>

  $obj->set_generalization(@val);

Sets the AssociationEnd C<generalization> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Generalization|UMMF::UML::MetaModel::Foundation::Core::Generalization>.
Returns C<$obj>.

=cut
sub set_generalization ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_generalization;
  $self->add_generalization(@val);
}


=head2 C<add_generalization>

  $obj->add_generalization(@val);

Adds AssociationEnd C<generalization> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Generalization|UMMF::UML::MetaModel::Foundation::Core::Generalization>.
Returns C<$obj>.

=cut
sub add_generalization ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'generalization'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Foundation::Core::Generalization')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::GeneralizableElement.generalization");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_child($self) if $old;
    $val->add_child($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_generalization>

  $obj->remove_generalization(@val);

Removes the AssociationEnd C<generalization> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Generalization|UMMF::UML::MetaModel::Foundation::Core::Generalization>.
Returns C<$obj>.

=cut
sub remove_generalization ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'generalization'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Generalization')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::GeneralizableElement.generalization");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_child($self) if $old;
    $val->add_child($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_generalization>

  $obj->clear_generalization;

Clears the AssociationEnd C<generalization> links to L<UMMF::UML::MetaModel::Foundation::Core::Generalization|UMMF::UML::MetaModel::Foundation::Core::Generalization>.
Returns C<$obj>.

=cut
sub clear_generalization ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'generalization'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'generalization'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_child($self) if $old;
    $val->add_child($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_generalization>

  $obj->count_generalization;

Returns the number of elements associated with C<generalization>.

=cut
sub count_generalization ($)
{
  my ($self) = @_;

  my $x = $self->{'generalization'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd parent <---> specialization
# type = UMMF::UML::MetaModel::Foundation::Core::Generalization
# multiplicity = 0..*
# ordering = 

=head2 C<specialization>

  my @val = $obj->specialization;
  my $ary_val = $obj->specialization;

Returns the AssociationEnd C<specialization> values of type L<UMMF::UML::MetaModel::Foundation::Core::Generalization|UMMF::UML::MetaModel::Foundation::Core::Generalization>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub specialization ($)
{
  my ($self) = @_;

    my $x = $self->{'specialization'};

  # confess("Container for specialization $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_specialization>

  $obj->set_specialization(@val);

Sets the AssociationEnd C<specialization> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Generalization|UMMF::UML::MetaModel::Foundation::Core::Generalization>.
Returns C<$obj>.

=cut
sub set_specialization ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_specialization;
  $self->add_specialization(@val);
}


=head2 C<add_specialization>

  $obj->add_specialization(@val);

Adds AssociationEnd C<specialization> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Generalization|UMMF::UML::MetaModel::Foundation::Core::Generalization>.
Returns C<$obj>.

=cut
sub add_specialization ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'specialization'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Foundation::Core::Generalization')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::GeneralizableElement.specialization");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_parent($self) if $old;
    $val->add_parent($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_specialization>

  $obj->remove_specialization(@val);

Removes the AssociationEnd C<specialization> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Generalization|UMMF::UML::MetaModel::Foundation::Core::Generalization>.
Returns C<$obj>.

=cut
sub remove_specialization ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'specialization'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Generalization')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::GeneralizableElement.specialization");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_parent($self) if $old;
    $val->add_parent($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_specialization>

  $obj->clear_specialization;

Clears the AssociationEnd C<specialization> links to L<UMMF::UML::MetaModel::Foundation::Core::Generalization|UMMF::UML::MetaModel::Foundation::Core::Generalization>.
Returns C<$obj>.

=cut
sub clear_specialization ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'specialization'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'specialization'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_parent($self) if $old;
    $val->add_parent($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_specialization>

  $obj->count_specialization;

Returns the number of elements associated with C<specialization>.

=cut
sub count_specialization ($)
{
  my ($self) = @_;

  my $x = $self->{'specialization'};

    defined $x ? $x->size : 0;
  }







# End of Class GeneralizableElement


=pod

=for html <hr/>

I<END OF DOCUMENT>

=cut

############################################################################

1; # is true!

############################################################################

### Keep these comments at end of file: kstephens@users.sourceforge.net 2003/04/06 ###
### Local Variables: ###
### mode:perl ###
### perl-indent-level:2 ###
### perl-continued-statement-offset:0 ###
### perl-brace-offset:0 ###
### perl-label-offset:0 ###
### End: ###

