# -*- perl -*-
# DO NOT EDIT - This file is generated by UMMF; http://ummf.sourceforge.net 
# From template: $Id: PerlTemplate.txt,v 1.74 2004/08/01 03:50:07 kstephens Exp $

package UMMF::UML::MetaModel::Foundation::Core::ModelElement;

#use 5.6.1;
use strict;
use warnings;

#################################################################
# Version
#

our $VERSION = do { my @r = (q{1.0} =~ /\d+/g); sprintf "%d." . "%03d" x $#r, @r };


#################################################################
# Documentation
#

=head1 NAME

UMMF::UML::MetaModel::Foundation::Core::ModelElement -- 

=head1 VERSION

1.0

=head1 SYNOPSIS

=head1 DESCRIPTION 

=head1 USAGE

=head1 EXPORT

=head1 METATYPE

L<UMMF::UML::MetaModel::Foundation::Core::Class|UMMF::UML::MetaModel::Foundation::Core::Class>

=head1 SUPERCLASSES

L<UMMF::UML::MetaModel::Foundation::Core::Element|UMMF::UML::MetaModel::Foundation::Core::Element>




=head1 ATTRIBUTES


=head2 C<name> : UMMF::UML::MetaModel::Foundation::Data_Types::Name 


=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>

=item type = L<UMMF::UML::MetaModel::Foundation::Data_Types::Name|UMMF::UML::MetaModel::Foundation::Data_Types::Name>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = I<UNSPECIFIED>

=item container_type = C<Set::Object>

=back


=head2 C<visibility> : UMMF::UML::MetaModel::Foundation::Data_Types::VisibilityKind 


=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>

=item type = L<UMMF::UML::MetaModel::Foundation::Data_Types::VisibilityKind|UMMF::UML::MetaModel::Foundation::Data_Types::VisibilityKind>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = C<<"public">>

=item container_type = C<Set::Object>

=back


=head2 C<isSpecification> : UMMF::UML::MetaModel::Foundation::Data_Types::Boolean 


=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>

=item type = L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = C<<"false">>

=item container_type = C<Set::Object>

=back



=head1 ASSOCIATIONS


=head2 C<0..1> : C<context> E<lt>---E<gt>  C<behavior> : UMMF::UML::MetaModel::Behavioral_Elements::State_Machines::StateMachine C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::State_Machines::StateMachine|UMMF::UML::MetaModel::Behavioral_Elements::State_Machines::StateMachine>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<1..*> : C<client> E<lt>---E<gt>  C<clientDependency> : UMMF::UML::MetaModel::Foundation::Core::Dependency C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::Dependency|UMMF::UML::MetaModel::Foundation::Core::Dependency>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<constrainingElement> E<lt>---E<gt>  C<collaborationInstanceSet_constrainingElement> : UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<constrainingElement> E<lt>---E<gt>  C<collaboration_constrainingElement> : UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::Collaboration C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::Collaboration|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::Collaboration>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<aggregate>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<annotatedElement> E<lt>---E<gt>  C<comment> : UMMF::UML::MetaModel::Foundation::Core::Comment C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::Comment|UMMF::UML::MetaModel::Foundation::Core::Comment>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<0..1> : C<constrainedElement> E<lt>---E<gt>  C<constraint> : UMMF::UML::MetaModel::Foundation::Core::Constraint C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::Constraint|UMMF::UML::MetaModel::Foundation::Core::Constraint>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<resident> E<lt>---E<gt>  C<container> : UMMF::UML::MetaModel::Foundation::Core::Component C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::Component|UMMF::UML::MetaModel::Foundation::Core::Component>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<ownedElement> E<lt>---E<gt>  C<namespace> : UMMF::UML::MetaModel::Foundation::Core::Namespace C<0..1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::Namespace|UMMF::UML::MetaModel::Foundation::Core::Namespace>

=item multiplicity = C<0..1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<composite>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<ownedElement> E<lt>---E<gt>  C<namespace_AC> : UMMF::UML::MetaModel::Foundation::Core::ElementOwnership C<0..1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::ElementOwnership|UMMF::UML::MetaModel::Foundation::Core::ElementOwnership>

=item multiplicity = C<0..1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<composite>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<importedElement> E<lt>---E<gt>  C<package> : UMMF::UML::MetaModel::Model_Management::Package C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Model_Management::Package|UMMF::UML::MetaModel::Model_Management::Package>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<importedElement> E<lt>---E<gt>  C<package_AC> : UMMF::UML::MetaModel::Model_Management::ElementImport C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Model_Management::ElementImport|UMMF::UML::MetaModel::Model_Management::ElementImport>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<contents> E<lt>---E<gt>  C<partition_contents> : UMMF::UML::MetaModel::Behavioral_Elements::Activity_Graphs::Partition C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Activity_Graphs::Partition|UMMF::UML::MetaModel::Behavioral_Elements::Activity_Graphs::Partition>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<subject> E<lt>---E<gt>  C<presentation> : UMMF::UML::MetaModel::Foundation::Core::PresentationElement C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::PresentationElement|UMMF::UML::MetaModel::Foundation::Core::PresentationElement>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<referenceValue> E<lt>---E<gt>  C<referenceTag> : UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue|UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<source> E<lt>---E<gt>  C<sourceFlow> : UMMF::UML::MetaModel::Foundation::Core::Flow C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::Flow|UMMF::UML::MetaModel::Foundation::Core::Flow>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<extendedElement> E<lt>---E<gt>  C<stereotype> : UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::Stereotype C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::Stereotype|UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::Stereotype>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<1..*> : C<supplier> E<lt>---E<gt>  C<supplierDependency> : UMMF::UML::MetaModel::Foundation::Core::Dependency C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::Dependency|UMMF::UML::MetaModel::Foundation::Core::Dependency>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<1> : C<modelElement> E<lt>---E<gt>  C<taggedValue> : UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue|UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<target> E<lt>---E<gt>  C<targetFlow> : UMMF::UML::MetaModel::Foundation::Core::Flow C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::Flow|UMMF::UML::MetaModel::Foundation::Core::Flow>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<templateParameter> E<lt>---E<gt>  C<template> : UMMF::UML::MetaModel::Foundation::Core::ModelElement C<0..1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>

=item multiplicity = C<0..1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<composite>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<1> : C<modelElement> E<lt>---E<gt>  C<templateArgument> : UMMF::UML::MetaModel::Foundation::Core::TemplateArgument C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::TemplateArgument|UMMF::UML::MetaModel::Foundation::Core::TemplateArgument>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<0..1> : C<template> E<lt>---E<gt>  C<templateParameter> : UMMF::UML::MetaModel::Foundation::Core::ModelElement C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<ordered>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<ARRAY>

=back


=head2 C<0..1> : C<template> E<lt>---E<gt>  C<templateParameter_AC> : UMMF::UML::MetaModel::Foundation::Core::TemplateParameter C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::TemplateParameter|UMMF::UML::MetaModel::Foundation::Core::TemplateParameter>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<ordered>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<ARRAY>

=back


=head2 C<0..1> : C<defaultElement> E<lt>---E<gt>  C<templateParameter_defaultElement> : UMMF::UML::MetaModel::Foundation::Core::TemplateParameter C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::TemplateParameter|UMMF::UML::MetaModel::Foundation::Core::TemplateParameter>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<templateParameter> E<lt>---E<gt>  C<template_AC> : UMMF::UML::MetaModel::Foundation::Core::TemplateParameter C<0..1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::TemplateParameter|UMMF::UML::MetaModel::Foundation::Core::TemplateParameter>

=item multiplicity = C<0..1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<composite>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back



=head1 METHODS

=cut



#################################################################
# Dependencies
#





use Carp qw(croak confess);
use Set::Object 1.05;
use Class::Multimethods 1.70;
use Data::Dumper;
use Scalar::Util qw(weaken);
use UMMF::UML::MetaModel::__ObjectBase qw(:__ummf_array);


#################################################################
# Generalizations
#

use base qw(
  UMMF::UML::MetaModel::Foundation::Core::Element



);


#################################################################
# Exports
#

our @EXPORT_OK = qw(
);
our %EXPORT_TAGS = ( 'all' => \@EXPORT_OK );





#################################################################
# Validation
#


=head2 C<__validate_type>

  UMMF::UML::MetaModel::Foundation::Core::ModelElement->__validate_type($value);

Returns true if C<$value> is a valid representation of L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>.

=cut
sub __validate_type($$)
{
  my ($self, $x) = @_;

  no warnings;

  UNIVERSAL::isa($x, 'UMMF::UML::MetaModel::Foundation::Core::ModelElement')  ;
}


=head2 C<__typecheck>

  UMMF::UML::MetaModel::Foundation::Core::ModelElement->__typecheck($value, $msg);

Calls C<confess()> with C<$msg> if C<<UMMF::UML::MetaModel::Foundation::Core::ModelElement->__validate_type($value)>> is false.

=cut
sub __typecheck
{
  my ($self, $x, $msg) = @_;

  confess("typecheck: $msg: type '" . 'UMMF::UML::MetaModel::Foundation::Core::ModelElement' . ": value '$x'")
    unless __validate_type($self, $x);
}


=head2 C<isaModelElement>


Returns true if receiver is a L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>.
Other receivers will return false.

=cut
sub isaModelElement { 1 }


=head2 C<isaFoundation__Core__ModelElement>


Returns true if receiver is a L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>.
Other receivers will return false.
This is the fully qualified version of the C<isaModelElement> method.

=cut
sub isaFoundation__Core__ModelElement { 1 }


#################################################################
# Introspection
#

=head2 C<__model_name> 

  my $name = $obj_or_package->__model_name;

Returns the UML Model name (C<'Foundation::Core::ModelElement'>) for an object or package of
this Classifier.

=cut
sub __model_name { 'Foundation::Core::ModelElement' }



=head2 C<__isAbstract>

  $package->__isAbstract;

Returns C<1>.

=cut
sub __isAbstract { 1; }


my $__tangram_schema;
=head2 C<__tangram_schema>

  my $tangram_schema $obj_or_package->__tangram_schema

Returns a HASH ref that describes this Classifier for Tangram.

See L<UMMF::UML::Export::Perl::Tangram|UMMF::UML::Export::Perl::Tangram>

=cut
sub __tangram_schema
{
  my ($self) = @_;

  $__tangram_schema ||=
  {
   'classes' =>
   [
     'UMMF::UML::MetaModel::Foundation::Core::ModelElement' =>
     {
       'table' => 'Foundation__Core__ModelElement',
       'abstract' => 1,
       'slots' => 
       { 
	 # Attributes
	 	       'name'
       => {
	 'type_impl' => 'string',
                                             'col' => 'name', 

                                                                                                                   }
      ,
         	       'visibility'
       => {
	 'type_impl' => 'string',
                                             'col' => 'visibility', 

                                                                                                                   }
      ,
         	       'isSpecification'
       => {
	 'type_impl' => 'string',
                                             'col' => 'isSpecification', 

                                                                                                                   }
      ,
         
	 # Associations
	 	 	       'behavior'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::State_Machines::StateMachine',

                           'table' => 'Foundation__Core__ModelElement__behavior', 

                                                               'coll' => 'context',

                                                                               }
      ,
                  	 	       'clientDependency'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::Dependency',

                           'table' => 'Foundation__Core__ClientDependency_Client', 

                                                      'item' => 'clientDependency', 

                  'coll' => 'client',

                                                                               }
      ,
                  	 	       'collaborationInstanceSet_constrainingElement'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet',

                           'table' => 'CollaborationInstanceSet_ConstrainingElement', 

                                                      'item' => 'collaborationInstanceSet_constrainingElement', 

                  'coll' => 'constrainingElement',

                                                                               }
      ,
                  	 	       'collaboration_constrainingElement'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::Collaboration',

                           'table' => 'Collaboration_ConstrainingElement', 

                                                      'item' => 'collaboration_constrainingElement', 

                  'coll' => 'constrainingElement',

                                                                               }
      ,
                  	 	       'comment'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::Comment',

                           'table' => 'Foundation__Core__Comment_AnnotatedElement', 

                                                      'item' => 'comment', 

                  'coll' => 'annotatedElement',

                                                                               }
      ,
                  	 	       'constraint'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::Constraint',

                           'table' => 'Foundation__Core__ModelElement__constraint', 

                                                               'coll' => 'constrainedElement',

                                                                               }
      ,
                  	 	       'container'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::Component',

                           'table' => 'Foundation__Core__Container_Resident', 

                                                      'item' => 'container', 

                  'coll' => 'resident',

                                                                               }
      ,
                  	 	       'namespace'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::Namespace',

                  'null' => '1', 

                                    'col' => 'namespace', 

                                                                                                                   }
      ,
                  	 	       'namespace_AC'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::ElementOwnership',

                  'null' => '1', 

                                    'col' => 'namespace_AC', 

                                                                                                                   }
      ,
                  	 	       'package'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML::MetaModel::Model_Management::Package',

                           'table' => 'Model_Management__ElementImport', 

                                                      'item' => 'package', 

                  'coll' => 'importedElement',

                                                                               }
      ,
                  	 	       'package_AC'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML::MetaModel::Model_Management::ElementImport',

                           'table' => 'Model_Management__ElementImport_importedElement_ElementImport_AC', 

                                                      'item' => 'package_AC', 

                  'coll' => 'importedElement',

                                                                               }
      ,
                  	 	       'partition_contents'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Activity_Graphs::Partition',

                           'table' => 'Partition_Contents', 

                                                      'item' => 'partition_contents', 

                  'coll' => 'contents',

                                                                               }
      ,
                  	 	       'presentation'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::PresentationElement',

                           'table' => 'Foundation__Core__Presentation_Subject', 

                                                      'item' => 'presentation', 

                  'coll' => 'subject',

                                                                               }
      ,
                  	 	       'referenceTag'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue',

                           'table' => 'Foundation__ReferenceTag_ReferenceValue', 

                                                      'item' => 'referenceTag', 

                  'coll' => 'referenceValue',

                                                                               }
      ,
                  	 	       'sourceFlow'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::Flow',

                           'table' => 'Foundation__Core__SourceFlow_Source', 

                                                      'item' => 'sourceFlow', 

                  'coll' => 'source',

                                                                               }
      ,
                  	 	       'stereotype'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::Stereotype',

                           'table' => 'Foundation__Stereotype_ExtendedElement', 

                                                      'item' => 'stereotype', 

                  'coll' => 'extendedElement',

                                                                               }
      ,
                  	 	       'supplierDependency'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::Dependency',

                           'table' => 'Foundation__Core__SupplierDependency_Supplier', 

                                                      'item' => 'supplierDependency', 

                  'coll' => 'supplier',

                                                                               }
      ,
                  	 	       'taggedValue'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue',

                           'table' => 'Foundation__Core__ModelElement__taggedValue', 

                                                               'coll' => 'modelElement',

                                                                               }
      ,
                  	 	       'targetFlow'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::Flow',

                           'table' => 'Foundation__Core__TargetFlow_Target', 

                                                      'item' => 'targetFlow', 

                  'coll' => 'target',

                                                                               }
      ,
                  	 	       'template'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::ModelElement',

                  'null' => '1', 

                                    'col' => 'template', 

                                                                                                                   }
      ,
                  	 	       'templateArgument'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::TemplateArgument',

                           'table' => 'Foundation__Core__ModelElement__templateArgument', 

                                                               'coll' => 'modelElement',

                                                                               }
      ,
                  	 	       'templateParameter'
       => {
	 'type_impl' => 'iarray',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::ModelElement',

                           'table' => 'Foundation__Core__ModelElement__templateParameter', 

                                                               'coll' => 'template',

                  'slot' => 'template_i', 

                                    'aggreg' => '1', 

                                           }
      ,
                  	 	       'templateParameter_AC'
       => {
	 'type_impl' => 'iarray',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::TemplateParameter',

                           'table' => 'Foundation__Core__ModelElement__templateParameter_AC', 

                                                               'coll' => 'template',

                  'slot' => 'template_i', 

                                    'aggreg' => '1', 

                                           }
      ,
                  	 	       'templateParameter_defaultElement'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::TemplateParameter',

                           'table' => 'Foundation__Core__ModelElement__templateParameter_defaultElement', 

                                                               'coll' => 'defaultElement',

                                                                               }
      ,
                  	 	       'template_AC'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::TemplateParameter',

                  'null' => '1', 

                                    'col' => 'template_AC', 

                                                                                                                   }
      ,
                         },
       'bases' => [  'UMMF::UML::MetaModel::Foundation::Core::Element',  ],
       'sql' => {

       },
     },
   ],

   'sql' =>
   {
    # Note Tangram::Ref::get_exporter() has
    # "UPDATE $table SET $self->{col} = $refid WHERE id = $id",
    # The id_col is hard-coded, 
    # Thus id_col will not work.
    #'id_col' => '__sid',
    #'class_col' => '__stype',
   },
     # 'set_id' => sub { }
     # 'get_id' => sub { }

      
  };
}


#################################################################
# Class Attributes
#


          

#################################################################
# Class Associations
#


    

#################################################################
# Initialization
#


=head2 C<___initialize>

Initialize all Attributes and AssociationEnds in a instance of this Classifier.
Does B<not> initalize slots in its Generalizations.

See also: C<__initialize>.

=cut
sub ___initialize
{
  my ($self) = @_;

  # Attributes

    # Attribute name
  if ( exists $self->{'name'} ) {
    my $x = $self->{'name'};
    $self->{'name'} = undef;
    $self->set_name($x);
  } else {
      }
  
    # Attribute visibility
  if ( exists $self->{'visibility'} ) {
    my $x = $self->{'visibility'};
    $self->{'visibility'} = undef;
    $self->set_visibility($x);
  } else {
        $self->{'visibility'} = "public";
      }
  
    # Attribute isSpecification
  if ( exists $self->{'isSpecification'} ) {
    my $x = $self->{'isSpecification'};
    $self->{'isSpecification'} = undef;
    $self->set_isSpecification($x);
  } else {
        $self->{'isSpecification'} = "false";
      }
  


  # Associations

  # AssociationEnd 
  #  context 0..1
  #  <--> 
  #  behavior 0..* UMMF::UML::MetaModel::Behavioral_Elements::State_Machines::StateMachine.
    if ( defined $self->{'behavior'} ) {
    my $x = $self->{'behavior'};
        $self->{'behavior'} = Set::Object->new();
        $self->set_behavior(@$x);
  }
  
  # AssociationEnd 
  #  client 1..*
  #  <--> 
  #  clientDependency 0..* UMMF::UML::MetaModel::Foundation::Core::Dependency.
    if ( defined $self->{'clientDependency'} ) {
    my $x = $self->{'clientDependency'};
        $self->{'clientDependency'} = Set::Object->new();
        $self->set_clientDependency(@$x);
  }
  
  # AssociationEnd 
  #  constrainingElement 0..*
  #  <--> 
  #  collaborationInstanceSet_constrainingElement 0..* UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet.
    if ( defined $self->{'collaborationInstanceSet_constrainingElement'} ) {
    my $x = $self->{'collaborationInstanceSet_constrainingElement'};
        $self->{'collaborationInstanceSet_constrainingElement'} = Set::Object->new();
        $self->set_collaborationInstanceSet_constrainingElement(@$x);
  }
  
  # AssociationEnd 
  #  constrainingElement 0..*
  #  <--> 
  #  collaboration_constrainingElement 0..* UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::Collaboration.
    if ( defined $self->{'collaboration_constrainingElement'} ) {
    my $x = $self->{'collaboration_constrainingElement'};
        $self->{'collaboration_constrainingElement'} = Set::Object->new();
        $self->set_collaboration_constrainingElement(@$x);
  }
  
  # AssociationEnd 
  #  annotatedElement 0..*
  #  <--> 
  #  comment 0..* UMMF::UML::MetaModel::Foundation::Core::Comment.
    if ( defined $self->{'comment'} ) {
    my $x = $self->{'comment'};
        $self->{'comment'} = Set::Object->new();
        $self->set_comment(@$x);
  }
  
  # AssociationEnd 
  #  constrainedElement 0..1
  #  <--> 
  #  constraint 0..* UMMF::UML::MetaModel::Foundation::Core::Constraint.
    if ( defined $self->{'constraint'} ) {
    my $x = $self->{'constraint'};
        $self->{'constraint'} = Set::Object->new();
        $self->set_constraint(@$x);
  }
  
  # AssociationEnd 
  #  resident 0..*
  #  <--> 
  #  container 0..* UMMF::UML::MetaModel::Foundation::Core::Component.
    if ( defined $self->{'container'} ) {
    my $x = $self->{'container'};
        $self->{'container'} = Set::Object->new();
        $self->set_container(@$x);
  }
  
  # AssociationEnd 
  #  ownedElement 0..*
  #  <--> 
  #  namespace 0..1 UMMF::UML::MetaModel::Foundation::Core::Namespace.
    if ( defined $self->{'namespace'} ) {
    my $x = $self->{'namespace'};
    $self->{'namespace'} = undef;
    $self->set_namespace($x);
  }
  
  # AssociationEnd 
  #  ownedElement 0..*
  #  <--> 
  #  namespace_AC 0..1 UMMF::UML::MetaModel::Foundation::Core::ElementOwnership.
    if ( defined $self->{'namespace_AC'} ) {
    my $x = $self->{'namespace_AC'};
    $self->{'namespace_AC'} = undef;
    $self->set_namespace_AC($x);
  }
  
  # AssociationEnd 
  #  importedElement 0..*
  #  <--> 
  #  package 0..* UMMF::UML::MetaModel::Model_Management::Package.
    if ( defined $self->{'package'} ) {
    my $x = $self->{'package'};
        $self->{'package'} = Set::Object->new();
        $self->set_package(@$x);
  }
  
  # AssociationEnd 
  #  importedElement 0..*
  #  <--> 
  #  package_AC 0..* UMMF::UML::MetaModel::Model_Management::ElementImport.
    if ( defined $self->{'package_AC'} ) {
    my $x = $self->{'package_AC'};
        $self->{'package_AC'} = Set::Object->new();
        $self->set_package_AC(@$x);
  }
  
  # AssociationEnd 
  #  contents 0..*
  #  <--> 
  #  partition_contents 0..* UMMF::UML::MetaModel::Behavioral_Elements::Activity_Graphs::Partition.
    if ( defined $self->{'partition_contents'} ) {
    my $x = $self->{'partition_contents'};
        $self->{'partition_contents'} = Set::Object->new();
        $self->set_partition_contents(@$x);
  }
  
  # AssociationEnd 
  #  subject 0..*
  #  <--> 
  #  presentation 0..* UMMF::UML::MetaModel::Foundation::Core::PresentationElement.
    if ( defined $self->{'presentation'} ) {
    my $x = $self->{'presentation'};
        $self->{'presentation'} = Set::Object->new();
        $self->set_presentation(@$x);
  }
  
  # AssociationEnd 
  #  referenceValue 0..*
  #  <--> 
  #  referenceTag 0..* UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue.
    if ( defined $self->{'referenceTag'} ) {
    my $x = $self->{'referenceTag'};
        $self->{'referenceTag'} = Set::Object->new();
        $self->set_referenceTag(@$x);
  }
  
  # AssociationEnd 
  #  source 0..*
  #  <--> 
  #  sourceFlow 0..* UMMF::UML::MetaModel::Foundation::Core::Flow.
    if ( defined $self->{'sourceFlow'} ) {
    my $x = $self->{'sourceFlow'};
        $self->{'sourceFlow'} = Set::Object->new();
        $self->set_sourceFlow(@$x);
  }
  
  # AssociationEnd 
  #  extendedElement 0..*
  #  <--> 
  #  stereotype 0..* UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::Stereotype.
    if ( defined $self->{'stereotype'} ) {
    my $x = $self->{'stereotype'};
        $self->{'stereotype'} = Set::Object->new();
        $self->set_stereotype(@$x);
  }
  
  # AssociationEnd 
  #  supplier 1..*
  #  <--> 
  #  supplierDependency 0..* UMMF::UML::MetaModel::Foundation::Core::Dependency.
    if ( defined $self->{'supplierDependency'} ) {
    my $x = $self->{'supplierDependency'};
        $self->{'supplierDependency'} = Set::Object->new();
        $self->set_supplierDependency(@$x);
  }
  
  # AssociationEnd 
  #  modelElement 1
  #  <--> 
  #  taggedValue 0..* UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue.
    if ( defined $self->{'taggedValue'} ) {
    my $x = $self->{'taggedValue'};
        $self->{'taggedValue'} = Set::Object->new();
        $self->set_taggedValue(@$x);
  }
  
  # AssociationEnd 
  #  target 0..*
  #  <--> 
  #  targetFlow 0..* UMMF::UML::MetaModel::Foundation::Core::Flow.
    if ( defined $self->{'targetFlow'} ) {
    my $x = $self->{'targetFlow'};
        $self->{'targetFlow'} = Set::Object->new();
        $self->set_targetFlow(@$x);
  }
  
  # AssociationEnd 
  #  templateParameter 0..*
  #  <--> 
  #  template 0..1 UMMF::UML::MetaModel::Foundation::Core::ModelElement.
    if ( defined $self->{'template'} ) {
    my $x = $self->{'template'};
    $self->{'template'} = undef;
    $self->set_template($x);
  }
  
  # AssociationEnd 
  #  modelElement 1
  #  <--> 
  #  templateArgument 0..* UMMF::UML::MetaModel::Foundation::Core::TemplateArgument.
    if ( defined $self->{'templateArgument'} ) {
    my $x = $self->{'templateArgument'};
        $self->{'templateArgument'} = Set::Object->new();
        $self->set_templateArgument(@$x);
  }
  
  # AssociationEnd 
  #  template 0..1
  #  <--> 
  #  templateParameter 0..* UMMF::UML::MetaModel::Foundation::Core::ModelElement.
    if ( defined $self->{'templateParameter'} ) {
    my $x = $self->{'templateParameter'};
        $self->{'templateParameter'} = [ ];
        $self->set_templateParameter(@$x);
  }
  
  # AssociationEnd 
  #  template 0..1
  #  <--> 
  #  templateParameter_AC 0..* UMMF::UML::MetaModel::Foundation::Core::TemplateParameter.
    if ( defined $self->{'templateParameter_AC'} ) {
    my $x = $self->{'templateParameter_AC'};
        $self->{'templateParameter_AC'} = [ ];
        $self->set_templateParameter_AC(@$x);
  }
  
  # AssociationEnd 
  #  defaultElement 0..1
  #  <--> 
  #  templateParameter_defaultElement 0..* UMMF::UML::MetaModel::Foundation::Core::TemplateParameter.
    if ( defined $self->{'templateParameter_defaultElement'} ) {
    my $x = $self->{'templateParameter_defaultElement'};
        $self->{'templateParameter_defaultElement'} = Set::Object->new();
        $self->set_templateParameter_defaultElement(@$x);
  }
  
  # AssociationEnd 
  #  templateParameter 0..*
  #  <--> 
  #  template_AC 0..1 UMMF::UML::MetaModel::Foundation::Core::TemplateParameter.
    if ( defined $self->{'template_AC'} ) {
    my $x = $self->{'template_AC'};
    $self->{'template_AC'} = undef;
    $self->set_template_AC($x);
  }
  

  $self;
}


my $__initialize_use;

=head2 C<__initialize>

Initialize all slots in this Classifier and all its Generalizations.

See also: C<___initialize>.

=cut
sub __initialize
{
  my ($self) = @_;

  # $DB::single = 1;

  unless ( ! $__initialize_use ) {
    $__initialize_use = 1;
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Element');
  }

  $self->UMMF::UML::MetaModel::Foundation::Core::ModelElement::___initialize;
  $self->UMMF::UML::MetaModel::Foundation::Core::Element::___initialize;

  $self;
}
      

=head2 C<__create>

Calls all <<create>> Methods for this Classifier and all Generalizations.

See also: C<___create>.

=cut
sub __create
{
  my ($self, @args) = @_;

  # $DB::single = 1;
  $self->UMMF::UML::MetaModel::Foundation::Core::ModelElement::___create(@args);
  $self->UMMF::UML::MetaModel::Foundation::Core::Element::___create();

  $self;
}




#################################################################
# Attributes
#



=for html <hr/>

=cut

#################################################################
# Attribute name
# type = UMMF::UML::MetaModel::Foundation::Data_Types::Name
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = 

=head2 C<name>

  my $val = $obj->name;

Returns the L<UMMF::UML::MetaModel::Foundation::Data_Types::Name|UMMF::UML::MetaModel::Foundation::Data_Types::Name> value of Attribute C<name>.

=cut
sub name ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'name'};

  ;

  $val;
}


=head2 C<set_name>

  $obj->set_name($val);

Sets the value of Attribute C<name>.
C<$val> must be of type L<UMMF::UML::MetaModel::Foundation::Data_Types::Name|UMMF::UML::MetaModel::Foundation::Data_Types::Name> or C<undef>.
Returns C<$obj>.

=cut
sub set_name ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    ;
  }

    $self->{'name'} = $val
  ;

  ;

  $self;
}


=head2 C<count_name>

  $obj->count_name;

Returns the number of elements (0 or 1) in C<name>.

=cut
sub count_name ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'name'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute visibility
# type = UMMF::UML::MetaModel::Foundation::Data_Types::VisibilityKind
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = "public"

=head2 C<visibility>

  my $val = $obj->visibility;

Returns the L<UMMF::UML::MetaModel::Foundation::Data_Types::VisibilityKind|UMMF::UML::MetaModel::Foundation::Data_Types::VisibilityKind> value of Attribute C<visibility>.

=cut
sub visibility ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'visibility'};

  ;

  $val;
}


=head2 C<set_visibility>

  $obj->set_visibility($val);

Sets the value of Attribute C<visibility>.
C<$val> must be of type L<UMMF::UML::MetaModel::Foundation::Data_Types::VisibilityKind|UMMF::UML::MetaModel::Foundation::Data_Types::VisibilityKind> or C<undef>.
Returns C<$obj>.

=cut
sub set_visibility ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    $self->__use('UMMF::UML::MetaModel::Foundation::Data_Types::VisibilityKind')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.visibility");
  }

    $self->{'visibility'} = $val
  ;

  ;

  $self;
}


=head2 C<count_visibility>

  $obj->count_visibility;

Returns the number of elements (0 or 1) in C<visibility>.

=cut
sub count_visibility ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'visibility'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute isSpecification
# type = UMMF::UML::MetaModel::Foundation::Data_Types::Boolean
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = "false"

=head2 C<isSpecification>

  my $val = $obj->isSpecification;

Returns the L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean> value of Attribute C<isSpecification>.

=cut
sub isSpecification ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isSpecification'};

  ;

  $val;
}


=head2 C<set_isSpecification>

  $obj->set_isSpecification($val);

Sets the value of Attribute C<isSpecification>.
C<$val> must be of type L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean> or C<undef>.
Returns C<$obj>.

=cut
sub set_isSpecification ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    ;
  }

    $self->{'isSpecification'} = $val
  ;

  ;

  $self;
}


=head2 C<count_isSpecification>

  $obj->count_isSpecification;

Returns the number of elements (0 or 1) in C<isSpecification>.

=cut
sub count_isSpecification ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isSpecification'};

  ;

  defined $val ? 1 : 0;
}




#################################################################
# Association
#


=for html <hr/>

=cut

#################################################################
# AssociationEnd context <---> behavior
# type = UMMF::UML::MetaModel::Behavioral_Elements::State_Machines::StateMachine
# multiplicity = 0..*
# ordering = 

=head2 C<behavior>

  my @val = $obj->behavior;
  my $ary_val = $obj->behavior;

Returns the AssociationEnd C<behavior> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::State_Machines::StateMachine|UMMF::UML::MetaModel::Behavioral_Elements::State_Machines::StateMachine>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub behavior ($)
{
  my ($self) = @_;

    my $x = $self->{'behavior'};

  # confess("Container for behavior $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_behavior>

  $obj->set_behavior(@val);

Sets the AssociationEnd C<behavior> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::State_Machines::StateMachine|UMMF::UML::MetaModel::Behavioral_Elements::State_Machines::StateMachine>.
Returns C<$obj>.

=cut
sub set_behavior ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_behavior;
  $self->add_behavior(@val);
}


=head2 C<add_behavior>

  $obj->add_behavior(@val);

Adds AssociationEnd C<behavior> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::State_Machines::StateMachine|UMMF::UML::MetaModel::Behavioral_Elements::State_Machines::StateMachine>.
Returns C<$obj>.

=cut
sub add_behavior ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'behavior'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::State_Machines::StateMachine')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.behavior");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_context($self) if $old;
    $val->add_context($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_behavior>

  $obj->remove_behavior(@val);

Removes the AssociationEnd C<behavior> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::State_Machines::StateMachine|UMMF::UML::MetaModel::Behavioral_Elements::State_Machines::StateMachine>.
Returns C<$obj>.

=cut
sub remove_behavior ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'behavior'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::State_Machines::StateMachine')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.behavior");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_context($self) if $old;
    $val->add_context($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_behavior>

  $obj->clear_behavior;

Clears the AssociationEnd C<behavior> links to L<UMMF::UML::MetaModel::Behavioral_Elements::State_Machines::StateMachine|UMMF::UML::MetaModel::Behavioral_Elements::State_Machines::StateMachine>.
Returns C<$obj>.

=cut
sub clear_behavior ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'behavior'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'behavior'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_context($self) if $old;
    $val->add_context($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_behavior>

  $obj->count_behavior;

Returns the number of elements associated with C<behavior>.

=cut
sub count_behavior ($)
{
  my ($self) = @_;

  my $x = $self->{'behavior'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd client <---> clientDependency
# type = UMMF::UML::MetaModel::Foundation::Core::Dependency
# multiplicity = 0..*
# ordering = 

=head2 C<clientDependency>

  my @val = $obj->clientDependency;
  my $ary_val = $obj->clientDependency;

Returns the AssociationEnd C<clientDependency> values of type L<UMMF::UML::MetaModel::Foundation::Core::Dependency|UMMF::UML::MetaModel::Foundation::Core::Dependency>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub clientDependency ($)
{
  my ($self) = @_;

    my $x = $self->{'clientDependency'};

  # confess("Container for clientDependency $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_clientDependency>

  $obj->set_clientDependency(@val);

Sets the AssociationEnd C<clientDependency> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Dependency|UMMF::UML::MetaModel::Foundation::Core::Dependency>.
Returns C<$obj>.

=cut
sub set_clientDependency ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_clientDependency;
  $self->add_clientDependency(@val);
}


=head2 C<add_clientDependency>

  $obj->add_clientDependency(@val);

Adds AssociationEnd C<clientDependency> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Dependency|UMMF::UML::MetaModel::Foundation::Core::Dependency>.
Returns C<$obj>.

=cut
sub add_clientDependency ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'clientDependency'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Foundation::Core::Dependency')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.clientDependency");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_client($self) if $old;
    $val->add_client($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_clientDependency>

  $obj->remove_clientDependency(@val);

Removes the AssociationEnd C<clientDependency> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Dependency|UMMF::UML::MetaModel::Foundation::Core::Dependency>.
Returns C<$obj>.

=cut
sub remove_clientDependency ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'clientDependency'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Dependency')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.clientDependency");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_client($self) if $old;
    $val->add_client($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_clientDependency>

  $obj->clear_clientDependency;

Clears the AssociationEnd C<clientDependency> links to L<UMMF::UML::MetaModel::Foundation::Core::Dependency|UMMF::UML::MetaModel::Foundation::Core::Dependency>.
Returns C<$obj>.

=cut
sub clear_clientDependency ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'clientDependency'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'clientDependency'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_client($self) if $old;
    $val->add_client($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_clientDependency>

  $obj->count_clientDependency;

Returns the number of elements associated with C<clientDependency>.

=cut
sub count_clientDependency ($)
{
  my ($self) = @_;

  my $x = $self->{'clientDependency'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd constrainingElement <---> collaborationInstanceSet_constrainingElement
# type = UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet
# multiplicity = 0..*
# ordering = 

=head2 C<collaborationInstanceSet_constrainingElement>

  my @val = $obj->collaborationInstanceSet_constrainingElement;
  my $ary_val = $obj->collaborationInstanceSet_constrainingElement;

Returns the AssociationEnd C<collaborationInstanceSet_constrainingElement> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub collaborationInstanceSet_constrainingElement ($)
{
  my ($self) = @_;

    my $x = $self->{'collaborationInstanceSet_constrainingElement'};

  # confess("Container for collaborationInstanceSet_constrainingElement $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_collaborationInstanceSet_constrainingElement>

  $obj->set_collaborationInstanceSet_constrainingElement(@val);

Sets the AssociationEnd C<collaborationInstanceSet_constrainingElement> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet>.
Returns C<$obj>.

=cut
sub set_collaborationInstanceSet_constrainingElement ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_collaborationInstanceSet_constrainingElement;
  $self->add_collaborationInstanceSet_constrainingElement(@val);
}


=head2 C<add_collaborationInstanceSet_constrainingElement>

  $obj->add_collaborationInstanceSet_constrainingElement(@val);

Adds AssociationEnd C<collaborationInstanceSet_constrainingElement> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet>.
Returns C<$obj>.

=cut
sub add_collaborationInstanceSet_constrainingElement ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'collaborationInstanceSet_constrainingElement'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.collaborationInstanceSet_constrainingElement");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_constrainingElement($self) if $old;
    $val->add_constrainingElement($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_collaborationInstanceSet_constrainingElement>

  $obj->remove_collaborationInstanceSet_constrainingElement(@val);

Removes the AssociationEnd C<collaborationInstanceSet_constrainingElement> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet>.
Returns C<$obj>.

=cut
sub remove_collaborationInstanceSet_constrainingElement ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'collaborationInstanceSet_constrainingElement'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.collaborationInstanceSet_constrainingElement");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_constrainingElement($self) if $old;
    $val->add_constrainingElement($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_collaborationInstanceSet_constrainingElement>

  $obj->clear_collaborationInstanceSet_constrainingElement;

Clears the AssociationEnd C<collaborationInstanceSet_constrainingElement> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::CollaborationInstanceSet>.
Returns C<$obj>.

=cut
sub clear_collaborationInstanceSet_constrainingElement ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'collaborationInstanceSet_constrainingElement'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'collaborationInstanceSet_constrainingElement'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_constrainingElement($self) if $old;
    $val->add_constrainingElement($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_collaborationInstanceSet_constrainingElement>

  $obj->count_collaborationInstanceSet_constrainingElement;

Returns the number of elements associated with C<collaborationInstanceSet_constrainingElement>.

=cut
sub count_collaborationInstanceSet_constrainingElement ($)
{
  my ($self) = @_;

  my $x = $self->{'collaborationInstanceSet_constrainingElement'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd constrainingElement <---> collaboration_constrainingElement
# type = UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::Collaboration
# multiplicity = 0..*
# ordering = 

=head2 C<collaboration_constrainingElement>

  my @val = $obj->collaboration_constrainingElement;
  my $ary_val = $obj->collaboration_constrainingElement;

Returns the AssociationEnd C<collaboration_constrainingElement> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::Collaboration|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::Collaboration>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub collaboration_constrainingElement ($)
{
  my ($self) = @_;

    my $x = $self->{'collaboration_constrainingElement'};

  # confess("Container for collaboration_constrainingElement $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_collaboration_constrainingElement>

  $obj->set_collaboration_constrainingElement(@val);

Sets the AssociationEnd C<collaboration_constrainingElement> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::Collaboration|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::Collaboration>.
Returns C<$obj>.

=cut
sub set_collaboration_constrainingElement ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_collaboration_constrainingElement;
  $self->add_collaboration_constrainingElement(@val);
}


=head2 C<add_collaboration_constrainingElement>

  $obj->add_collaboration_constrainingElement(@val);

Adds AssociationEnd C<collaboration_constrainingElement> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::Collaboration|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::Collaboration>.
Returns C<$obj>.

=cut
sub add_collaboration_constrainingElement ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'collaboration_constrainingElement'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::Collaboration')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.collaboration_constrainingElement");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_constrainingElement($self) if $old;
    $val->add_constrainingElement($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_collaboration_constrainingElement>

  $obj->remove_collaboration_constrainingElement(@val);

Removes the AssociationEnd C<collaboration_constrainingElement> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::Collaboration|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::Collaboration>.
Returns C<$obj>.

=cut
sub remove_collaboration_constrainingElement ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'collaboration_constrainingElement'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::Collaboration')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.collaboration_constrainingElement");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_constrainingElement($self) if $old;
    $val->add_constrainingElement($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_collaboration_constrainingElement>

  $obj->clear_collaboration_constrainingElement;

Clears the AssociationEnd C<collaboration_constrainingElement> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::Collaboration|UMMF::UML::MetaModel::Behavioral_Elements::Collaborations::Collaboration>.
Returns C<$obj>.

=cut
sub clear_collaboration_constrainingElement ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'collaboration_constrainingElement'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'collaboration_constrainingElement'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_constrainingElement($self) if $old;
    $val->add_constrainingElement($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_collaboration_constrainingElement>

  $obj->count_collaboration_constrainingElement;

Returns the number of elements associated with C<collaboration_constrainingElement>.

=cut
sub count_collaboration_constrainingElement ($)
{
  my ($self) = @_;

  my $x = $self->{'collaboration_constrainingElement'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd annotatedElement <---> comment
# type = UMMF::UML::MetaModel::Foundation::Core::Comment
# multiplicity = 0..*
# ordering = 

=head2 C<comment>

  my @val = $obj->comment;
  my $ary_val = $obj->comment;

Returns the AssociationEnd C<comment> values of type L<UMMF::UML::MetaModel::Foundation::Core::Comment|UMMF::UML::MetaModel::Foundation::Core::Comment>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub comment ($)
{
  my ($self) = @_;

    my $x = $self->{'comment'};

  # confess("Container for comment $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_comment>

  $obj->set_comment(@val);

Sets the AssociationEnd C<comment> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Comment|UMMF::UML::MetaModel::Foundation::Core::Comment>.
Returns C<$obj>.

=cut
sub set_comment ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_comment;
  $self->add_comment(@val);
}


=head2 C<add_comment>

  $obj->add_comment(@val);

Adds AssociationEnd C<comment> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Comment|UMMF::UML::MetaModel::Foundation::Core::Comment>.
Returns C<$obj>.

=cut
sub add_comment ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'comment'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Foundation::Core::Comment')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.comment");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_annotatedElement($self) if $old;
    $val->add_annotatedElement($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_comment>

  $obj->remove_comment(@val);

Removes the AssociationEnd C<comment> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Comment|UMMF::UML::MetaModel::Foundation::Core::Comment>.
Returns C<$obj>.

=cut
sub remove_comment ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'comment'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Comment')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.comment");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_annotatedElement($self) if $old;
    $val->add_annotatedElement($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_comment>

  $obj->clear_comment;

Clears the AssociationEnd C<comment> links to L<UMMF::UML::MetaModel::Foundation::Core::Comment|UMMF::UML::MetaModel::Foundation::Core::Comment>.
Returns C<$obj>.

=cut
sub clear_comment ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'comment'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'comment'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_annotatedElement($self) if $old;
    $val->add_annotatedElement($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_comment>

  $obj->count_comment;

Returns the number of elements associated with C<comment>.

=cut
sub count_comment ($)
{
  my ($self) = @_;

  my $x = $self->{'comment'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd constrainedElement <---> constraint
# type = UMMF::UML::MetaModel::Foundation::Core::Constraint
# multiplicity = 0..*
# ordering = 

=head2 C<constraint>

  my @val = $obj->constraint;
  my $ary_val = $obj->constraint;

Returns the AssociationEnd C<constraint> values of type L<UMMF::UML::MetaModel::Foundation::Core::Constraint|UMMF::UML::MetaModel::Foundation::Core::Constraint>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub constraint ($)
{
  my ($self) = @_;

    my $x = $self->{'constraint'};

  # confess("Container for constraint $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_constraint>

  $obj->set_constraint(@val);

Sets the AssociationEnd C<constraint> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Constraint|UMMF::UML::MetaModel::Foundation::Core::Constraint>.
Returns C<$obj>.

=cut
sub set_constraint ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_constraint;
  $self->add_constraint(@val);
}


=head2 C<add_constraint>

  $obj->add_constraint(@val);

Adds AssociationEnd C<constraint> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Constraint|UMMF::UML::MetaModel::Foundation::Core::Constraint>.
Returns C<$obj>.

=cut
sub add_constraint ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'constraint'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Foundation::Core::Constraint')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.constraint");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_constrainedElement($self) if $old;
    $val->add_constrainedElement($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_constraint>

  $obj->remove_constraint(@val);

Removes the AssociationEnd C<constraint> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Constraint|UMMF::UML::MetaModel::Foundation::Core::Constraint>.
Returns C<$obj>.

=cut
sub remove_constraint ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'constraint'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Constraint')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.constraint");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_constrainedElement($self) if $old;
    $val->add_constrainedElement($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_constraint>

  $obj->clear_constraint;

Clears the AssociationEnd C<constraint> links to L<UMMF::UML::MetaModel::Foundation::Core::Constraint|UMMF::UML::MetaModel::Foundation::Core::Constraint>.
Returns C<$obj>.

=cut
sub clear_constraint ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'constraint'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'constraint'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_constrainedElement($self) if $old;
    $val->add_constrainedElement($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_constraint>

  $obj->count_constraint;

Returns the number of elements associated with C<constraint>.

=cut
sub count_constraint ($)
{
  my ($self) = @_;

  my $x = $self->{'constraint'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd resident <---> container
# type = UMMF::UML::MetaModel::Foundation::Core::Component
# multiplicity = 0..*
# ordering = 

=head2 C<container>

  my @val = $obj->container;
  my $ary_val = $obj->container;

Returns the AssociationEnd C<container> values of type L<UMMF::UML::MetaModel::Foundation::Core::Component|UMMF::UML::MetaModel::Foundation::Core::Component>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub container ($)
{
  my ($self) = @_;

    my $x = $self->{'container'};

  # confess("Container for container $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_container>

  $obj->set_container(@val);

Sets the AssociationEnd C<container> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Component|UMMF::UML::MetaModel::Foundation::Core::Component>.
Returns C<$obj>.

=cut
sub set_container ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_container;
  $self->add_container(@val);
}


=head2 C<add_container>

  $obj->add_container(@val);

Adds AssociationEnd C<container> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Component|UMMF::UML::MetaModel::Foundation::Core::Component>.
Returns C<$obj>.

=cut
sub add_container ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'container'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Foundation::Core::Component')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.container");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_resident($self) if $old;
    $val->add_resident($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_container>

  $obj->remove_container(@val);

Removes the AssociationEnd C<container> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Component|UMMF::UML::MetaModel::Foundation::Core::Component>.
Returns C<$obj>.

=cut
sub remove_container ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'container'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Component')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.container");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_resident($self) if $old;
    $val->add_resident($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_container>

  $obj->clear_container;

Clears the AssociationEnd C<container> links to L<UMMF::UML::MetaModel::Foundation::Core::Component|UMMF::UML::MetaModel::Foundation::Core::Component>.
Returns C<$obj>.

=cut
sub clear_container ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'container'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'container'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_resident($self) if $old;
    $val->add_resident($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_container>

  $obj->count_container;

Returns the number of elements associated with C<container>.

=cut
sub count_container ($)
{
  my ($self) = @_;

  my $x = $self->{'container'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd ownedElement <---> namespace
# type = UMMF::UML::MetaModel::Foundation::Core::Namespace
# multiplicity = 0..1
# ordering = 

=head2 C<namespace>

  my $val = $obj->namespace;

Returns the AssociationEnd C<namespace> value of type L<UMMF::UML::MetaModel::Foundation::Core::Namespace|UMMF::UML::MetaModel::Foundation::Core::Namespace>.

=cut
sub namespace ($)
{
  my ($self) = @_;
		  
  $self->{'namespace'};
}


=head2 C<set_namespace>

  $obj->set_namespace($val);

Sets the AssociationEnd C<namespace> value.
C<$val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Namespace|UMMF::UML::MetaModel::Foundation::Core::Namespace>.
Returns C<$obj>.

=cut
sub set_namespace ($$)
{
  my ($self, $val) = @_;
		  
  no warnings; # Use of uninitialized value in string ne at ...
		  
  my $old;
  if ( ($old = $self->{'namespace'}) ne $val ) { # Recursion lock

    if ( defined $val ) { $self->__use('UMMF::UML::MetaModel::Foundation::Core::Namespace')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.namespace") }

    # Recursion lock
        $self->{'namespace'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_ownedElement($self) if $old;
    $val->add_ownedElement($self)    if $val;

    }
		  
  $self;
}


=head2 C<add_namespace>

  $obj->add_namespace($val);

Adds the AssociationEnd C<namespace> value.
C<$val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Namespace|UMMF::UML::MetaModel::Foundation::Core::Namespace>.
Throws exception if a value already exists.
Returns C<$obj>.

=cut
sub add_namespace ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'namespace'}) ne $val ) { # Recursion lock
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Namespace')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.namespace");
      
    # confess("UMMF::UML::MetaModel::Foundation::Core::ModelElement::namespace: too many")
    # if defined $self->{'namespace'};

    # Recursion lock
        $self->{'namespace'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_ownedElement($self) if $old;
    $val->add_ownedElement($self)    if $val;

  
  }

  $self;
}


=head2 C<remove_namespace>

  $obj->remove_namespace($val);

Removes the AssociationEnd C<namespace> value C<$val>.
Returns C<$obj>.

=cut
sub remove_namespace ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'namespace'}) eq $val ) { # Recursion lock
    $val = $self->{'namespace'} = undef;         # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_ownedElement($self) if $old;
    $val->add_ownedElement($self)    if $val;

  
  }
}


=head2 C<clear_namespace>

  $obj->clear_namespace;

Clears the AssociationEnd C<namespace> links to L<UMMF::UML::MetaModel::Foundation::Core::Namespace|UMMF::UML::MetaModel::Foundation::Core::Namespace>.
Returns C<$obj>.

=cut
sub clear_namespace ($@)
{
  my ($self) = @_;

  my $old;
  if ( defined ($old = $self->{'namespace'}) ) { # Recursion lock
    my $val = $self->{'namespace'} = undef;      # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_ownedElement($self) if $old;
    $val->add_ownedElement($self)    if $val;

    }

  $self;
}


=head2 C<count_namespace>

  $obj->count_namespace;

Returns the number of elements of type L<UMMF::UML::MetaModel::Foundation::Core::Namespace|UMMF::UML::MetaModel::Foundation::Core::Namespace> associated with C<namespace>.

=cut
sub count_namespace ($)
{
  my ($self) = @_;

  my $x = $self->{'namespace'};

  defined $x ? 1 : 0;
}




=for html <hr/>

=cut

#################################################################
# AssociationEnd ownedElement <---> namespace_AC
# type = UMMF::UML::MetaModel::Foundation::Core::ElementOwnership
# multiplicity = 0..1
# ordering = 

=head2 C<namespace_AC>

  my $val = $obj->namespace_AC;

Returns the AssociationEnd C<namespace_AC> value of type L<UMMF::UML::MetaModel::Foundation::Core::ElementOwnership|UMMF::UML::MetaModel::Foundation::Core::ElementOwnership>.

=cut
sub namespace_AC ($)
{
  my ($self) = @_;
		  
  $self->{'namespace_AC'};
}


=head2 C<set_namespace_AC>

  $obj->set_namespace_AC($val);

Sets the AssociationEnd C<namespace_AC> value.
C<$val> must of type L<UMMF::UML::MetaModel::Foundation::Core::ElementOwnership|UMMF::UML::MetaModel::Foundation::Core::ElementOwnership>.
Returns C<$obj>.

=cut
sub set_namespace_AC ($$)
{
  my ($self, $val) = @_;
		  
  no warnings; # Use of uninitialized value in string ne at ...
		  
  my $old;
  if ( ($old = $self->{'namespace_AC'}) ne $val ) { # Recursion lock

    if ( defined $val ) { $self->__use('UMMF::UML::MetaModel::Foundation::Core::ElementOwnership')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.namespace_AC") }

    # Recursion lock
        $self->{'namespace_AC'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_ownedElement($self) if $old;
    $val->add_ownedElement($self)    if $val;

    }
		  
  $self;
}


=head2 C<add_namespace_AC>

  $obj->add_namespace_AC($val);

Adds the AssociationEnd C<namespace_AC> value.
C<$val> must of type L<UMMF::UML::MetaModel::Foundation::Core::ElementOwnership|UMMF::UML::MetaModel::Foundation::Core::ElementOwnership>.
Throws exception if a value already exists.
Returns C<$obj>.

=cut
sub add_namespace_AC ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'namespace_AC'}) ne $val ) { # Recursion lock
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::ElementOwnership')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.namespace_AC");
      
    # confess("UMMF::UML::MetaModel::Foundation::Core::ModelElement::namespace_AC: too many")
    # if defined $self->{'namespace_AC'};

    # Recursion lock
        $self->{'namespace_AC'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_ownedElement($self) if $old;
    $val->add_ownedElement($self)    if $val;

  
  }

  $self;
}


=head2 C<remove_namespace_AC>

  $obj->remove_namespace_AC($val);

Removes the AssociationEnd C<namespace_AC> value C<$val>.
Returns C<$obj>.

=cut
sub remove_namespace_AC ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'namespace_AC'}) eq $val ) { # Recursion lock
    $val = $self->{'namespace_AC'} = undef;         # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_ownedElement($self) if $old;
    $val->add_ownedElement($self)    if $val;

  
  }
}


=head2 C<clear_namespace_AC>

  $obj->clear_namespace_AC;

Clears the AssociationEnd C<namespace_AC> links to L<UMMF::UML::MetaModel::Foundation::Core::ElementOwnership|UMMF::UML::MetaModel::Foundation::Core::ElementOwnership>.
Returns C<$obj>.

=cut
sub clear_namespace_AC ($@)
{
  my ($self) = @_;

  my $old;
  if ( defined ($old = $self->{'namespace_AC'}) ) { # Recursion lock
    my $val = $self->{'namespace_AC'} = undef;      # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_ownedElement($self) if $old;
    $val->add_ownedElement($self)    if $val;

    }

  $self;
}


=head2 C<count_namespace_AC>

  $obj->count_namespace_AC;

Returns the number of elements of type L<UMMF::UML::MetaModel::Foundation::Core::ElementOwnership|UMMF::UML::MetaModel::Foundation::Core::ElementOwnership> associated with C<namespace_AC>.

=cut
sub count_namespace_AC ($)
{
  my ($self) = @_;

  my $x = $self->{'namespace_AC'};

  defined $x ? 1 : 0;
}




=for html <hr/>

=cut

#################################################################
# AssociationEnd importedElement <---> package
# type = UMMF::UML::MetaModel::Model_Management::Package
# multiplicity = 0..*
# ordering = 

=head2 C<package>

  my @val = $obj->package;
  my $ary_val = $obj->package;

Returns the AssociationEnd C<package> values of type L<UMMF::UML::MetaModel::Model_Management::Package|UMMF::UML::MetaModel::Model_Management::Package>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub package ($)
{
  my ($self) = @_;

    my $x = $self->{'package'};

  # confess("Container for package $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_package>

  $obj->set_package(@val);

Sets the AssociationEnd C<package> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Model_Management::Package|UMMF::UML::MetaModel::Model_Management::Package>.
Returns C<$obj>.

=cut
sub set_package ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_package;
  $self->add_package(@val);
}


=head2 C<add_package>

  $obj->add_package(@val);

Adds AssociationEnd C<package> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Model_Management::Package|UMMF::UML::MetaModel::Model_Management::Package>.
Returns C<$obj>.

=cut
sub add_package ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'package'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Model_Management::Package')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.package");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_importedElement($self) if $old;
    $val->add_importedElement($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_package>

  $obj->remove_package(@val);

Removes the AssociationEnd C<package> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Model_Management::Package|UMMF::UML::MetaModel::Model_Management::Package>.
Returns C<$obj>.

=cut
sub remove_package ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'package'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Model_Management::Package')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.package");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_importedElement($self) if $old;
    $val->add_importedElement($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_package>

  $obj->clear_package;

Clears the AssociationEnd C<package> links to L<UMMF::UML::MetaModel::Model_Management::Package|UMMF::UML::MetaModel::Model_Management::Package>.
Returns C<$obj>.

=cut
sub clear_package ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'package'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'package'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_importedElement($self) if $old;
    $val->add_importedElement($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_package>

  $obj->count_package;

Returns the number of elements associated with C<package>.

=cut
sub count_package ($)
{
  my ($self) = @_;

  my $x = $self->{'package'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd importedElement <---> package_AC
# type = UMMF::UML::MetaModel::Model_Management::ElementImport
# multiplicity = 0..*
# ordering = 

=head2 C<package_AC>

  my @val = $obj->package_AC;
  my $ary_val = $obj->package_AC;

Returns the AssociationEnd C<package_AC> values of type L<UMMF::UML::MetaModel::Model_Management::ElementImport|UMMF::UML::MetaModel::Model_Management::ElementImport>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub package_AC ($)
{
  my ($self) = @_;

    my $x = $self->{'package_AC'};

  # confess("Container for package_AC $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_package_AC>

  $obj->set_package_AC(@val);

Sets the AssociationEnd C<package_AC> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Model_Management::ElementImport|UMMF::UML::MetaModel::Model_Management::ElementImport>.
Returns C<$obj>.

=cut
sub set_package_AC ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_package_AC;
  $self->add_package_AC(@val);
}


=head2 C<add_package_AC>

  $obj->add_package_AC(@val);

Adds AssociationEnd C<package_AC> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Model_Management::ElementImport|UMMF::UML::MetaModel::Model_Management::ElementImport>.
Returns C<$obj>.

=cut
sub add_package_AC ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'package_AC'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Model_Management::ElementImport')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.package_AC");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_importedElement($self) if $old;
    $val->add_importedElement($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_package_AC>

  $obj->remove_package_AC(@val);

Removes the AssociationEnd C<package_AC> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Model_Management::ElementImport|UMMF::UML::MetaModel::Model_Management::ElementImport>.
Returns C<$obj>.

=cut
sub remove_package_AC ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'package_AC'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Model_Management::ElementImport')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.package_AC");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_importedElement($self) if $old;
    $val->add_importedElement($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_package_AC>

  $obj->clear_package_AC;

Clears the AssociationEnd C<package_AC> links to L<UMMF::UML::MetaModel::Model_Management::ElementImport|UMMF::UML::MetaModel::Model_Management::ElementImport>.
Returns C<$obj>.

=cut
sub clear_package_AC ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'package_AC'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'package_AC'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_importedElement($self) if $old;
    $val->add_importedElement($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_package_AC>

  $obj->count_package_AC;

Returns the number of elements associated with C<package_AC>.

=cut
sub count_package_AC ($)
{
  my ($self) = @_;

  my $x = $self->{'package_AC'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd contents <---> partition_contents
# type = UMMF::UML::MetaModel::Behavioral_Elements::Activity_Graphs::Partition
# multiplicity = 0..*
# ordering = 

=head2 C<partition_contents>

  my @val = $obj->partition_contents;
  my $ary_val = $obj->partition_contents;

Returns the AssociationEnd C<partition_contents> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::Activity_Graphs::Partition|UMMF::UML::MetaModel::Behavioral_Elements::Activity_Graphs::Partition>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub partition_contents ($)
{
  my ($self) = @_;

    my $x = $self->{'partition_contents'};

  # confess("Container for partition_contents $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_partition_contents>

  $obj->set_partition_contents(@val);

Sets the AssociationEnd C<partition_contents> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Activity_Graphs::Partition|UMMF::UML::MetaModel::Behavioral_Elements::Activity_Graphs::Partition>.
Returns C<$obj>.

=cut
sub set_partition_contents ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_partition_contents;
  $self->add_partition_contents(@val);
}


=head2 C<add_partition_contents>

  $obj->add_partition_contents(@val);

Adds AssociationEnd C<partition_contents> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Activity_Graphs::Partition|UMMF::UML::MetaModel::Behavioral_Elements::Activity_Graphs::Partition>.
Returns C<$obj>.

=cut
sub add_partition_contents ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'partition_contents'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Activity_Graphs::Partition')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.partition_contents");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_contents($self) if $old;
    $val->add_contents($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_partition_contents>

  $obj->remove_partition_contents(@val);

Removes the AssociationEnd C<partition_contents> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Activity_Graphs::Partition|UMMF::UML::MetaModel::Behavioral_Elements::Activity_Graphs::Partition>.
Returns C<$obj>.

=cut
sub remove_partition_contents ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'partition_contents'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Activity_Graphs::Partition')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.partition_contents");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_contents($self) if $old;
    $val->add_contents($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_partition_contents>

  $obj->clear_partition_contents;

Clears the AssociationEnd C<partition_contents> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Activity_Graphs::Partition|UMMF::UML::MetaModel::Behavioral_Elements::Activity_Graphs::Partition>.
Returns C<$obj>.

=cut
sub clear_partition_contents ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'partition_contents'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'partition_contents'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_contents($self) if $old;
    $val->add_contents($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_partition_contents>

  $obj->count_partition_contents;

Returns the number of elements associated with C<partition_contents>.

=cut
sub count_partition_contents ($)
{
  my ($self) = @_;

  my $x = $self->{'partition_contents'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd subject <---> presentation
# type = UMMF::UML::MetaModel::Foundation::Core::PresentationElement
# multiplicity = 0..*
# ordering = 

=head2 C<presentation>

  my @val = $obj->presentation;
  my $ary_val = $obj->presentation;

Returns the AssociationEnd C<presentation> values of type L<UMMF::UML::MetaModel::Foundation::Core::PresentationElement|UMMF::UML::MetaModel::Foundation::Core::PresentationElement>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub presentation ($)
{
  my ($self) = @_;

    my $x = $self->{'presentation'};

  # confess("Container for presentation $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_presentation>

  $obj->set_presentation(@val);

Sets the AssociationEnd C<presentation> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::PresentationElement|UMMF::UML::MetaModel::Foundation::Core::PresentationElement>.
Returns C<$obj>.

=cut
sub set_presentation ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_presentation;
  $self->add_presentation(@val);
}


=head2 C<add_presentation>

  $obj->add_presentation(@val);

Adds AssociationEnd C<presentation> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::PresentationElement|UMMF::UML::MetaModel::Foundation::Core::PresentationElement>.
Returns C<$obj>.

=cut
sub add_presentation ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'presentation'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Foundation::Core::PresentationElement')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.presentation");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_subject($self) if $old;
    $val->add_subject($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_presentation>

  $obj->remove_presentation(@val);

Removes the AssociationEnd C<presentation> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::PresentationElement|UMMF::UML::MetaModel::Foundation::Core::PresentationElement>.
Returns C<$obj>.

=cut
sub remove_presentation ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'presentation'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::PresentationElement')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.presentation");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_subject($self) if $old;
    $val->add_subject($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_presentation>

  $obj->clear_presentation;

Clears the AssociationEnd C<presentation> links to L<UMMF::UML::MetaModel::Foundation::Core::PresentationElement|UMMF::UML::MetaModel::Foundation::Core::PresentationElement>.
Returns C<$obj>.

=cut
sub clear_presentation ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'presentation'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'presentation'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_subject($self) if $old;
    $val->add_subject($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_presentation>

  $obj->count_presentation;

Returns the number of elements associated with C<presentation>.

=cut
sub count_presentation ($)
{
  my ($self) = @_;

  my $x = $self->{'presentation'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd referenceValue <---> referenceTag
# type = UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue
# multiplicity = 0..*
# ordering = 

=head2 C<referenceTag>

  my @val = $obj->referenceTag;
  my $ary_val = $obj->referenceTag;

Returns the AssociationEnd C<referenceTag> values of type L<UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue|UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub referenceTag ($)
{
  my ($self) = @_;

    my $x = $self->{'referenceTag'};

  # confess("Container for referenceTag $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_referenceTag>

  $obj->set_referenceTag(@val);

Sets the AssociationEnd C<referenceTag> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue|UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue>.
Returns C<$obj>.

=cut
sub set_referenceTag ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_referenceTag;
  $self->add_referenceTag(@val);
}


=head2 C<add_referenceTag>

  $obj->add_referenceTag(@val);

Adds AssociationEnd C<referenceTag> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue|UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue>.
Returns C<$obj>.

=cut
sub add_referenceTag ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'referenceTag'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.referenceTag");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_referenceValue($self) if $old;
    $val->add_referenceValue($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_referenceTag>

  $obj->remove_referenceTag(@val);

Removes the AssociationEnd C<referenceTag> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue|UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue>.
Returns C<$obj>.

=cut
sub remove_referenceTag ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'referenceTag'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.referenceTag");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_referenceValue($self) if $old;
    $val->add_referenceValue($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_referenceTag>

  $obj->clear_referenceTag;

Clears the AssociationEnd C<referenceTag> links to L<UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue|UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue>.
Returns C<$obj>.

=cut
sub clear_referenceTag ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'referenceTag'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'referenceTag'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_referenceValue($self) if $old;
    $val->add_referenceValue($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_referenceTag>

  $obj->count_referenceTag;

Returns the number of elements associated with C<referenceTag>.

=cut
sub count_referenceTag ($)
{
  my ($self) = @_;

  my $x = $self->{'referenceTag'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd source <---> sourceFlow
# type = UMMF::UML::MetaModel::Foundation::Core::Flow
# multiplicity = 0..*
# ordering = 

=head2 C<sourceFlow>

  my @val = $obj->sourceFlow;
  my $ary_val = $obj->sourceFlow;

Returns the AssociationEnd C<sourceFlow> values of type L<UMMF::UML::MetaModel::Foundation::Core::Flow|UMMF::UML::MetaModel::Foundation::Core::Flow>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub sourceFlow ($)
{
  my ($self) = @_;

    my $x = $self->{'sourceFlow'};

  # confess("Container for sourceFlow $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_sourceFlow>

  $obj->set_sourceFlow(@val);

Sets the AssociationEnd C<sourceFlow> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Flow|UMMF::UML::MetaModel::Foundation::Core::Flow>.
Returns C<$obj>.

=cut
sub set_sourceFlow ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_sourceFlow;
  $self->add_sourceFlow(@val);
}


=head2 C<add_sourceFlow>

  $obj->add_sourceFlow(@val);

Adds AssociationEnd C<sourceFlow> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Flow|UMMF::UML::MetaModel::Foundation::Core::Flow>.
Returns C<$obj>.

=cut
sub add_sourceFlow ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'sourceFlow'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Foundation::Core::Flow')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.sourceFlow");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_source($self) if $old;
    $val->add_source($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_sourceFlow>

  $obj->remove_sourceFlow(@val);

Removes the AssociationEnd C<sourceFlow> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Flow|UMMF::UML::MetaModel::Foundation::Core::Flow>.
Returns C<$obj>.

=cut
sub remove_sourceFlow ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'sourceFlow'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Flow')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.sourceFlow");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_source($self) if $old;
    $val->add_source($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_sourceFlow>

  $obj->clear_sourceFlow;

Clears the AssociationEnd C<sourceFlow> links to L<UMMF::UML::MetaModel::Foundation::Core::Flow|UMMF::UML::MetaModel::Foundation::Core::Flow>.
Returns C<$obj>.

=cut
sub clear_sourceFlow ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'sourceFlow'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'sourceFlow'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_source($self) if $old;
    $val->add_source($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_sourceFlow>

  $obj->count_sourceFlow;

Returns the number of elements associated with C<sourceFlow>.

=cut
sub count_sourceFlow ($)
{
  my ($self) = @_;

  my $x = $self->{'sourceFlow'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd extendedElement <---> stereotype
# type = UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::Stereotype
# multiplicity = 0..*
# ordering = 

=head2 C<stereotype>

  my @val = $obj->stereotype;
  my $ary_val = $obj->stereotype;

Returns the AssociationEnd C<stereotype> values of type L<UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::Stereotype|UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::Stereotype>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub stereotype ($)
{
  my ($self) = @_;

    my $x = $self->{'stereotype'};

  # confess("Container for stereotype $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_stereotype>

  $obj->set_stereotype(@val);

Sets the AssociationEnd C<stereotype> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::Stereotype|UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::Stereotype>.
Returns C<$obj>.

=cut
sub set_stereotype ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_stereotype;
  $self->add_stereotype(@val);
}


=head2 C<add_stereotype>

  $obj->add_stereotype(@val);

Adds AssociationEnd C<stereotype> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::Stereotype|UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::Stereotype>.
Returns C<$obj>.

=cut
sub add_stereotype ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'stereotype'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::Stereotype')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.stereotype");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_extendedElement($self) if $old;
    $val->add_extendedElement($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_stereotype>

  $obj->remove_stereotype(@val);

Removes the AssociationEnd C<stereotype> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::Stereotype|UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::Stereotype>.
Returns C<$obj>.

=cut
sub remove_stereotype ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'stereotype'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::Stereotype')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.stereotype");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_extendedElement($self) if $old;
    $val->add_extendedElement($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_stereotype>

  $obj->clear_stereotype;

Clears the AssociationEnd C<stereotype> links to L<UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::Stereotype|UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::Stereotype>.
Returns C<$obj>.

=cut
sub clear_stereotype ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'stereotype'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'stereotype'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_extendedElement($self) if $old;
    $val->add_extendedElement($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_stereotype>

  $obj->count_stereotype;

Returns the number of elements associated with C<stereotype>.

=cut
sub count_stereotype ($)
{
  my ($self) = @_;

  my $x = $self->{'stereotype'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd supplier <---> supplierDependency
# type = UMMF::UML::MetaModel::Foundation::Core::Dependency
# multiplicity = 0..*
# ordering = 

=head2 C<supplierDependency>

  my @val = $obj->supplierDependency;
  my $ary_val = $obj->supplierDependency;

Returns the AssociationEnd C<supplierDependency> values of type L<UMMF::UML::MetaModel::Foundation::Core::Dependency|UMMF::UML::MetaModel::Foundation::Core::Dependency>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub supplierDependency ($)
{
  my ($self) = @_;

    my $x = $self->{'supplierDependency'};

  # confess("Container for supplierDependency $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_supplierDependency>

  $obj->set_supplierDependency(@val);

Sets the AssociationEnd C<supplierDependency> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Dependency|UMMF::UML::MetaModel::Foundation::Core::Dependency>.
Returns C<$obj>.

=cut
sub set_supplierDependency ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_supplierDependency;
  $self->add_supplierDependency(@val);
}


=head2 C<add_supplierDependency>

  $obj->add_supplierDependency(@val);

Adds AssociationEnd C<supplierDependency> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Dependency|UMMF::UML::MetaModel::Foundation::Core::Dependency>.
Returns C<$obj>.

=cut
sub add_supplierDependency ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'supplierDependency'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Foundation::Core::Dependency')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.supplierDependency");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_supplier($self) if $old;
    $val->add_supplier($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_supplierDependency>

  $obj->remove_supplierDependency(@val);

Removes the AssociationEnd C<supplierDependency> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Dependency|UMMF::UML::MetaModel::Foundation::Core::Dependency>.
Returns C<$obj>.

=cut
sub remove_supplierDependency ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'supplierDependency'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Dependency')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.supplierDependency");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_supplier($self) if $old;
    $val->add_supplier($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_supplierDependency>

  $obj->clear_supplierDependency;

Clears the AssociationEnd C<supplierDependency> links to L<UMMF::UML::MetaModel::Foundation::Core::Dependency|UMMF::UML::MetaModel::Foundation::Core::Dependency>.
Returns C<$obj>.

=cut
sub clear_supplierDependency ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'supplierDependency'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'supplierDependency'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_supplier($self) if $old;
    $val->add_supplier($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_supplierDependency>

  $obj->count_supplierDependency;

Returns the number of elements associated with C<supplierDependency>.

=cut
sub count_supplierDependency ($)
{
  my ($self) = @_;

  my $x = $self->{'supplierDependency'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd modelElement <---> taggedValue
# type = UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue
# multiplicity = 0..*
# ordering = 

=head2 C<taggedValue>

  my @val = $obj->taggedValue;
  my $ary_val = $obj->taggedValue;

Returns the AssociationEnd C<taggedValue> values of type L<UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue|UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub taggedValue ($)
{
  my ($self) = @_;

    my $x = $self->{'taggedValue'};

  # confess("Container for taggedValue $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_taggedValue>

  $obj->set_taggedValue(@val);

Sets the AssociationEnd C<taggedValue> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue|UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue>.
Returns C<$obj>.

=cut
sub set_taggedValue ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_taggedValue;
  $self->add_taggedValue(@val);
}


=head2 C<add_taggedValue>

  $obj->add_taggedValue(@val);

Adds AssociationEnd C<taggedValue> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue|UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue>.
Returns C<$obj>.

=cut
sub add_taggedValue ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'taggedValue'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.taggedValue");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_modelElement($self) if $old;
    $val->add_modelElement($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_taggedValue>

  $obj->remove_taggedValue(@val);

Removes the AssociationEnd C<taggedValue> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue|UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue>.
Returns C<$obj>.

=cut
sub remove_taggedValue ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'taggedValue'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.taggedValue");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_modelElement($self) if $old;
    $val->add_modelElement($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_taggedValue>

  $obj->clear_taggedValue;

Clears the AssociationEnd C<taggedValue> links to L<UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue|UMMF::UML::MetaModel::Foundation::Extension_Mechanisms::TaggedValue>.
Returns C<$obj>.

=cut
sub clear_taggedValue ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'taggedValue'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'taggedValue'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_modelElement($self) if $old;
    $val->add_modelElement($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_taggedValue>

  $obj->count_taggedValue;

Returns the number of elements associated with C<taggedValue>.

=cut
sub count_taggedValue ($)
{
  my ($self) = @_;

  my $x = $self->{'taggedValue'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd target <---> targetFlow
# type = UMMF::UML::MetaModel::Foundation::Core::Flow
# multiplicity = 0..*
# ordering = 

=head2 C<targetFlow>

  my @val = $obj->targetFlow;
  my $ary_val = $obj->targetFlow;

Returns the AssociationEnd C<targetFlow> values of type L<UMMF::UML::MetaModel::Foundation::Core::Flow|UMMF::UML::MetaModel::Foundation::Core::Flow>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub targetFlow ($)
{
  my ($self) = @_;

    my $x = $self->{'targetFlow'};

  # confess("Container for targetFlow $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_targetFlow>

  $obj->set_targetFlow(@val);

Sets the AssociationEnd C<targetFlow> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Flow|UMMF::UML::MetaModel::Foundation::Core::Flow>.
Returns C<$obj>.

=cut
sub set_targetFlow ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_targetFlow;
  $self->add_targetFlow(@val);
}


=head2 C<add_targetFlow>

  $obj->add_targetFlow(@val);

Adds AssociationEnd C<targetFlow> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Flow|UMMF::UML::MetaModel::Foundation::Core::Flow>.
Returns C<$obj>.

=cut
sub add_targetFlow ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'targetFlow'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Foundation::Core::Flow')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.targetFlow");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_target($self) if $old;
    $val->add_target($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_targetFlow>

  $obj->remove_targetFlow(@val);

Removes the AssociationEnd C<targetFlow> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Flow|UMMF::UML::MetaModel::Foundation::Core::Flow>.
Returns C<$obj>.

=cut
sub remove_targetFlow ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'targetFlow'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Flow')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.targetFlow");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_target($self) if $old;
    $val->add_target($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_targetFlow>

  $obj->clear_targetFlow;

Clears the AssociationEnd C<targetFlow> links to L<UMMF::UML::MetaModel::Foundation::Core::Flow|UMMF::UML::MetaModel::Foundation::Core::Flow>.
Returns C<$obj>.

=cut
sub clear_targetFlow ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'targetFlow'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'targetFlow'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_target($self) if $old;
    $val->add_target($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_targetFlow>

  $obj->count_targetFlow;

Returns the number of elements associated with C<targetFlow>.

=cut
sub count_targetFlow ($)
{
  my ($self) = @_;

  my $x = $self->{'targetFlow'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd templateParameter <---> template
# type = UMMF::UML::MetaModel::Foundation::Core::ModelElement
# multiplicity = 0..1
# ordering = 

=head2 C<template>

  my $val = $obj->template;

Returns the AssociationEnd C<template> value of type L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>.

=cut
sub template ($)
{
  my ($self) = @_;
		  
  $self->{'template'};
}


=head2 C<set_template>

  $obj->set_template($val);

Sets the AssociationEnd C<template> value.
C<$val> must of type L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>.
Returns C<$obj>.

=cut
sub set_template ($$)
{
  my ($self, $val) = @_;
		  
  no warnings; # Use of uninitialized value in string ne at ...
		  
  my $old;
  if ( ($old = $self->{'template'}) ne $val ) { # Recursion lock

    if ( defined $val ) { $self->__use('UMMF::UML::MetaModel::Foundation::Core::ModelElement')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.template") }

    # Recursion lock
        $self->{'template'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_templateParameter($self) if $old;
    $val->add_templateParameter($self)    if $val;

    }
		  
  $self;
}


=head2 C<add_template>

  $obj->add_template($val);

Adds the AssociationEnd C<template> value.
C<$val> must of type L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>.
Throws exception if a value already exists.
Returns C<$obj>.

=cut
sub add_template ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'template'}) ne $val ) { # Recursion lock
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::ModelElement')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.template");
      
    # confess("UMMF::UML::MetaModel::Foundation::Core::ModelElement::template: too many")
    # if defined $self->{'template'};

    # Recursion lock
        $self->{'template'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_templateParameter($self) if $old;
    $val->add_templateParameter($self)    if $val;

  
  }

  $self;
}


=head2 C<remove_template>

  $obj->remove_template($val);

Removes the AssociationEnd C<template> value C<$val>.
Returns C<$obj>.

=cut
sub remove_template ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'template'}) eq $val ) { # Recursion lock
    $val = $self->{'template'} = undef;         # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_templateParameter($self) if $old;
    $val->add_templateParameter($self)    if $val;

  
  }
}


=head2 C<clear_template>

  $obj->clear_template;

Clears the AssociationEnd C<template> links to L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>.
Returns C<$obj>.

=cut
sub clear_template ($@)
{
  my ($self) = @_;

  my $old;
  if ( defined ($old = $self->{'template'}) ) { # Recursion lock
    my $val = $self->{'template'} = undef;      # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_templateParameter($self) if $old;
    $val->add_templateParameter($self)    if $val;

    }

  $self;
}


=head2 C<count_template>

  $obj->count_template;

Returns the number of elements of type L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement> associated with C<template>.

=cut
sub count_template ($)
{
  my ($self) = @_;

  my $x = $self->{'template'};

  defined $x ? 1 : 0;
}




=for html <hr/>

=cut

#################################################################
# AssociationEnd modelElement <---> templateArgument
# type = UMMF::UML::MetaModel::Foundation::Core::TemplateArgument
# multiplicity = 0..*
# ordering = 

=head2 C<templateArgument>

  my @val = $obj->templateArgument;
  my $ary_val = $obj->templateArgument;

Returns the AssociationEnd C<templateArgument> values of type L<UMMF::UML::MetaModel::Foundation::Core::TemplateArgument|UMMF::UML::MetaModel::Foundation::Core::TemplateArgument>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub templateArgument ($)
{
  my ($self) = @_;

    my $x = $self->{'templateArgument'};

  # confess("Container for templateArgument $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_templateArgument>

  $obj->set_templateArgument(@val);

Sets the AssociationEnd C<templateArgument> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::TemplateArgument|UMMF::UML::MetaModel::Foundation::Core::TemplateArgument>.
Returns C<$obj>.

=cut
sub set_templateArgument ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_templateArgument;
  $self->add_templateArgument(@val);
}


=head2 C<add_templateArgument>

  $obj->add_templateArgument(@val);

Adds AssociationEnd C<templateArgument> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::TemplateArgument|UMMF::UML::MetaModel::Foundation::Core::TemplateArgument>.
Returns C<$obj>.

=cut
sub add_templateArgument ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'templateArgument'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Foundation::Core::TemplateArgument')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.templateArgument");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_modelElement($self) if $old;
    $val->add_modelElement($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_templateArgument>

  $obj->remove_templateArgument(@val);

Removes the AssociationEnd C<templateArgument> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::TemplateArgument|UMMF::UML::MetaModel::Foundation::Core::TemplateArgument>.
Returns C<$obj>.

=cut
sub remove_templateArgument ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'templateArgument'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::TemplateArgument')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.templateArgument");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_modelElement($self) if $old;
    $val->add_modelElement($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_templateArgument>

  $obj->clear_templateArgument;

Clears the AssociationEnd C<templateArgument> links to L<UMMF::UML::MetaModel::Foundation::Core::TemplateArgument|UMMF::UML::MetaModel::Foundation::Core::TemplateArgument>.
Returns C<$obj>.

=cut
sub clear_templateArgument ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'templateArgument'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'templateArgument'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_modelElement($self) if $old;
    $val->add_modelElement($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_templateArgument>

  $obj->count_templateArgument;

Returns the number of elements associated with C<templateArgument>.

=cut
sub count_templateArgument ($)
{
  my ($self) = @_;

  my $x = $self->{'templateArgument'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd template <---> templateParameter
# type = UMMF::UML::MetaModel::Foundation::Core::ModelElement
# multiplicity = 0..*
# ordering = ordered

=head2 C<templateParameter>

  my @val = $obj->templateParameter;
  my $ary_val = $obj->templateParameter;

Returns the AssociationEnd C<templateParameter> values of type L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub templateParameter ($)
{
  my ($self) = @_;

    my $x = $self->{'templateParameter'} ||= [ ];

  wantarray ? @{$x} : $x;
  
}


=head2 C<index_templateParameter>

  my $x = $obj->index_templateParameter($i);
  my @x = $obj->index_templateParameter($i, $count);

In scalar context, returns the value of AssociationEnd C<templateParameter> at index C<$i>.
In array context, returns the values between index C<$i> and C<$i + $count - 1>, inclusive.

=cut
sub index_templateParameter ($$@)
{
  my ($self, $i, $count) = @_;

  ;

  my $val = $self->{'templateParameter'} ||= [ ];

  ;

  wantarray ? $val->[$i .. (defined $count ? $i + $count - 1 : $i)]
            : $val->[$i];
}


=head2 C<index_of_templateParameter>

  my $index = $obj->index_of_templateParameter($val);

Returns the index of C<$val> in AssociationEnd C<templateParameter>.
Return C<undef> if C<$val> is not in C<templateParameter>.

=cut
sub index_of_templateParameter ($$)
{
  my ($self, $x) = @_;

  ;

  my $val = $self->{'templateParameter'} ||= [ ];

  ;

  __ummf_array_index($val, $x);
}


=head2 C<set_templateParameter>

  $obj->set_templateParameter(@val);

Sets the AssociationEnd C<templateParameter> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>.
Returns C<$obj>.

=cut
sub set_templateParameter ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_templateParameter;
  $self->add_templateParameter(@val);
}


=head2 C<set_index_templateParameter>

  $obj->set_index_templateParameter($i, $val);

Sets the value of AssociationEnd C<templateParameter> at index C<$i>.
Returns self.

=cut
sub set_index_templateParameter ($$$)
{
  my ($self, $i, $val) = @_;

  ;

  my $x = $self->{'templateParameter'} ||= [ ];

  no warnings;
  my $old;
  if ( ($old = $x->[$i]) ne $val) {
    # Recursion lock
        $x->[$i] = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_template($self) if $old;
    $val->add_template($self)    if $val;

  
    ;
  }

  $self;
}


=head2 C<add_templateParameter>

  $obj->add_templateParameter(@val);

Adds AssociationEnd C<templateParameter> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>.
Returns C<$obj>.

=cut
sub add_templateParameter ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'templateParameter'} ||= [ ];
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if grep($_ eq $val, @$x);
        $self->__use('UMMF::UML::MetaModel::Foundation::Core::ModelElement')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.templateParameter");

    # Recursion lock
        push(@{$x}, $val);
        
    # Remove and add associations with other ends.
        
    $old->remove_template($self) if $old;
    $val->add_template($self)    if $val;

    }
  
  $self;
}


=head2 C<add_index_templateParameter>

  $obj->add_index_templateParameter($i, @val);

Adds AssociationEnd C<templateParameter> values at index C<$i>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>.
Returns C<$obj>.

=cut
sub add_index_templateParameter ($$@)
{
  my ($self, $i, @val) = @_;

  
    my $x = $self->{'templateParameter'} ||= [ ];
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if grep($_ eq $val, @$x);
        $self->__use('UMMF::UML::MetaModel::Foundation::Core::ModelElement')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.templateParameter");

    # Recursion lock
        splice(@{$x}, $i, 0, $val); # Recursion lock
        ++ $i;
    
    # Remove and add associations with other ends.
        
    $old->remove_template($self) if $old;
    $val->add_template($self)    if $val;

    }
  
  
  $self;
}


=head2 C<remove_templateParameter>

  $obj->remove_templateParameter(@val);

Removes the AssociationEnd C<templateParameter> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>.
Returns C<$obj>.

=cut
sub remove_templateParameter ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'templateParameter'} ||= [ ];
  
  for my $old ( @val ) {
    # Recursion lock
        my $i; # index of $old in @$x.
    next unless defined($i = __ummf_array_index($x, $old));
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::ModelElement')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.templateParameter");

    # Recursion lock
        splice(@$x, $i, 1);     
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_template($self) if $old;
    $val->add_template($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_templateParameter>

  $obj->clear_templateParameter;

Clears the AssociationEnd C<templateParameter> links to L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>.
Returns C<$obj>.

=cut
sub clear_templateParameter ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'templateParameter'} ||= [ ];
  
  my $val; # Place holder for other MACRO.
  
    $self->{'templateParameter'} = [ ];  # Recursion lock
  for my $old ( @$x ) { # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_template($self) if $old;
    $val->add_template($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_templateParameter>

  $obj->count_templateParameter;

Returns the number of elements associated with C<templateParameter>.

=cut
sub count_templateParameter ($)
{
  my ($self) = @_;

  my $x = $self->{'templateParameter'};

    defined $x ? scalar @$x : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd template <---> templateParameter_AC
# type = UMMF::UML::MetaModel::Foundation::Core::TemplateParameter
# multiplicity = 0..*
# ordering = ordered

=head2 C<templateParameter_AC>

  my @val = $obj->templateParameter_AC;
  my $ary_val = $obj->templateParameter_AC;

Returns the AssociationEnd C<templateParameter_AC> values of type L<UMMF::UML::MetaModel::Foundation::Core::TemplateParameter|UMMF::UML::MetaModel::Foundation::Core::TemplateParameter>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub templateParameter_AC ($)
{
  my ($self) = @_;

    my $x = $self->{'templateParameter_AC'} ||= [ ];

  wantarray ? @{$x} : $x;
  
}


=head2 C<index_templateParameter_AC>

  my $x = $obj->index_templateParameter_AC($i);
  my @x = $obj->index_templateParameter_AC($i, $count);

In scalar context, returns the value of AssociationEnd C<templateParameter_AC> at index C<$i>.
In array context, returns the values between index C<$i> and C<$i + $count - 1>, inclusive.

=cut
sub index_templateParameter_AC ($$@)
{
  my ($self, $i, $count) = @_;

  ;

  my $val = $self->{'templateParameter_AC'} ||= [ ];

  ;

  wantarray ? $val->[$i .. (defined $count ? $i + $count - 1 : $i)]
            : $val->[$i];
}


=head2 C<index_of_templateParameter_AC>

  my $index = $obj->index_of_templateParameter_AC($val);

Returns the index of C<$val> in AssociationEnd C<templateParameter_AC>.
Return C<undef> if C<$val> is not in C<templateParameter_AC>.

=cut
sub index_of_templateParameter_AC ($$)
{
  my ($self, $x) = @_;

  ;

  my $val = $self->{'templateParameter_AC'} ||= [ ];

  ;

  __ummf_array_index($val, $x);
}


=head2 C<set_templateParameter_AC>

  $obj->set_templateParameter_AC(@val);

Sets the AssociationEnd C<templateParameter_AC> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::TemplateParameter|UMMF::UML::MetaModel::Foundation::Core::TemplateParameter>.
Returns C<$obj>.

=cut
sub set_templateParameter_AC ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_templateParameter_AC;
  $self->add_templateParameter_AC(@val);
}


=head2 C<set_index_templateParameter_AC>

  $obj->set_index_templateParameter_AC($i, $val);

Sets the value of AssociationEnd C<templateParameter_AC> at index C<$i>.
Returns self.

=cut
sub set_index_templateParameter_AC ($$$)
{
  my ($self, $i, $val) = @_;

  ;

  my $x = $self->{'templateParameter_AC'} ||= [ ];

  no warnings;
  my $old;
  if ( ($old = $x->[$i]) ne $val) {
    # Recursion lock
        $x->[$i] = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_template($self) if $old;
    $val->add_template($self)    if $val;

  
    ;
  }

  $self;
}


=head2 C<add_templateParameter_AC>

  $obj->add_templateParameter_AC(@val);

Adds AssociationEnd C<templateParameter_AC> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::TemplateParameter|UMMF::UML::MetaModel::Foundation::Core::TemplateParameter>.
Returns C<$obj>.

=cut
sub add_templateParameter_AC ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'templateParameter_AC'} ||= [ ];
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if grep($_ eq $val, @$x);
        $self->__use('UMMF::UML::MetaModel::Foundation::Core::TemplateParameter')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.templateParameter_AC");

    # Recursion lock
        push(@{$x}, $val);
        
    # Remove and add associations with other ends.
        
    $old->remove_template($self) if $old;
    $val->add_template($self)    if $val;

    }
  
  $self;
}


=head2 C<add_index_templateParameter_AC>

  $obj->add_index_templateParameter_AC($i, @val);

Adds AssociationEnd C<templateParameter_AC> values at index C<$i>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::TemplateParameter|UMMF::UML::MetaModel::Foundation::Core::TemplateParameter>.
Returns C<$obj>.

=cut
sub add_index_templateParameter_AC ($$@)
{
  my ($self, $i, @val) = @_;

  
    my $x = $self->{'templateParameter_AC'} ||= [ ];
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if grep($_ eq $val, @$x);
        $self->__use('UMMF::UML::MetaModel::Foundation::Core::TemplateParameter')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.templateParameter_AC");

    # Recursion lock
        splice(@{$x}, $i, 0, $val); # Recursion lock
        ++ $i;
    
    # Remove and add associations with other ends.
        
    $old->remove_template($self) if $old;
    $val->add_template($self)    if $val;

    }
  
  
  $self;
}


=head2 C<remove_templateParameter_AC>

  $obj->remove_templateParameter_AC(@val);

Removes the AssociationEnd C<templateParameter_AC> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::TemplateParameter|UMMF::UML::MetaModel::Foundation::Core::TemplateParameter>.
Returns C<$obj>.

=cut
sub remove_templateParameter_AC ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'templateParameter_AC'} ||= [ ];
  
  for my $old ( @val ) {
    # Recursion lock
        my $i; # index of $old in @$x.
    next unless defined($i = __ummf_array_index($x, $old));
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::TemplateParameter')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.templateParameter_AC");

    # Recursion lock
        splice(@$x, $i, 1);     
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_template($self) if $old;
    $val->add_template($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_templateParameter_AC>

  $obj->clear_templateParameter_AC;

Clears the AssociationEnd C<templateParameter_AC> links to L<UMMF::UML::MetaModel::Foundation::Core::TemplateParameter|UMMF::UML::MetaModel::Foundation::Core::TemplateParameter>.
Returns C<$obj>.

=cut
sub clear_templateParameter_AC ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'templateParameter_AC'} ||= [ ];
  
  my $val; # Place holder for other MACRO.
  
    $self->{'templateParameter_AC'} = [ ];  # Recursion lock
  for my $old ( @$x ) { # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_template($self) if $old;
    $val->add_template($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_templateParameter_AC>

  $obj->count_templateParameter_AC;

Returns the number of elements associated with C<templateParameter_AC>.

=cut
sub count_templateParameter_AC ($)
{
  my ($self) = @_;

  my $x = $self->{'templateParameter_AC'};

    defined $x ? scalar @$x : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd defaultElement <---> templateParameter_defaultElement
# type = UMMF::UML::MetaModel::Foundation::Core::TemplateParameter
# multiplicity = 0..*
# ordering = 

=head2 C<templateParameter_defaultElement>

  my @val = $obj->templateParameter_defaultElement;
  my $ary_val = $obj->templateParameter_defaultElement;

Returns the AssociationEnd C<templateParameter_defaultElement> values of type L<UMMF::UML::MetaModel::Foundation::Core::TemplateParameter|UMMF::UML::MetaModel::Foundation::Core::TemplateParameter>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub templateParameter_defaultElement ($)
{
  my ($self) = @_;

    my $x = $self->{'templateParameter_defaultElement'};

  # confess("Container for templateParameter_defaultElement $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_templateParameter_defaultElement>

  $obj->set_templateParameter_defaultElement(@val);

Sets the AssociationEnd C<templateParameter_defaultElement> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::TemplateParameter|UMMF::UML::MetaModel::Foundation::Core::TemplateParameter>.
Returns C<$obj>.

=cut
sub set_templateParameter_defaultElement ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_templateParameter_defaultElement;
  $self->add_templateParameter_defaultElement(@val);
}


=head2 C<add_templateParameter_defaultElement>

  $obj->add_templateParameter_defaultElement(@val);

Adds AssociationEnd C<templateParameter_defaultElement> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::TemplateParameter|UMMF::UML::MetaModel::Foundation::Core::TemplateParameter>.
Returns C<$obj>.

=cut
sub add_templateParameter_defaultElement ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'templateParameter_defaultElement'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Foundation::Core::TemplateParameter')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.templateParameter_defaultElement");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_defaultElement($self) if $old;
    $val->add_defaultElement($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_templateParameter_defaultElement>

  $obj->remove_templateParameter_defaultElement(@val);

Removes the AssociationEnd C<templateParameter_defaultElement> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::TemplateParameter|UMMF::UML::MetaModel::Foundation::Core::TemplateParameter>.
Returns C<$obj>.

=cut
sub remove_templateParameter_defaultElement ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'templateParameter_defaultElement'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::TemplateParameter')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.templateParameter_defaultElement");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_defaultElement($self) if $old;
    $val->add_defaultElement($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_templateParameter_defaultElement>

  $obj->clear_templateParameter_defaultElement;

Clears the AssociationEnd C<templateParameter_defaultElement> links to L<UMMF::UML::MetaModel::Foundation::Core::TemplateParameter|UMMF::UML::MetaModel::Foundation::Core::TemplateParameter>.
Returns C<$obj>.

=cut
sub clear_templateParameter_defaultElement ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'templateParameter_defaultElement'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'templateParameter_defaultElement'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_defaultElement($self) if $old;
    $val->add_defaultElement($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_templateParameter_defaultElement>

  $obj->count_templateParameter_defaultElement;

Returns the number of elements associated with C<templateParameter_defaultElement>.

=cut
sub count_templateParameter_defaultElement ($)
{
  my ($self) = @_;

  my $x = $self->{'templateParameter_defaultElement'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd templateParameter <---> template_AC
# type = UMMF::UML::MetaModel::Foundation::Core::TemplateParameter
# multiplicity = 0..1
# ordering = 

=head2 C<template_AC>

  my $val = $obj->template_AC;

Returns the AssociationEnd C<template_AC> value of type L<UMMF::UML::MetaModel::Foundation::Core::TemplateParameter|UMMF::UML::MetaModel::Foundation::Core::TemplateParameter>.

=cut
sub template_AC ($)
{
  my ($self) = @_;
		  
  $self->{'template_AC'};
}


=head2 C<set_template_AC>

  $obj->set_template_AC($val);

Sets the AssociationEnd C<template_AC> value.
C<$val> must of type L<UMMF::UML::MetaModel::Foundation::Core::TemplateParameter|UMMF::UML::MetaModel::Foundation::Core::TemplateParameter>.
Returns C<$obj>.

=cut
sub set_template_AC ($$)
{
  my ($self, $val) = @_;
		  
  no warnings; # Use of uninitialized value in string ne at ...
		  
  my $old;
  if ( ($old = $self->{'template_AC'}) ne $val ) { # Recursion lock

    if ( defined $val ) { $self->__use('UMMF::UML::MetaModel::Foundation::Core::TemplateParameter')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.template_AC") }

    # Recursion lock
        $self->{'template_AC'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_templateParameter($self) if $old;
    $val->add_templateParameter($self)    if $val;

    }
		  
  $self;
}


=head2 C<add_template_AC>

  $obj->add_template_AC($val);

Adds the AssociationEnd C<template_AC> value.
C<$val> must of type L<UMMF::UML::MetaModel::Foundation::Core::TemplateParameter|UMMF::UML::MetaModel::Foundation::Core::TemplateParameter>.
Throws exception if a value already exists.
Returns C<$obj>.

=cut
sub add_template_AC ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'template_AC'}) ne $val ) { # Recursion lock
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::TemplateParameter')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::ModelElement.template_AC");
      
    # confess("UMMF::UML::MetaModel::Foundation::Core::ModelElement::template_AC: too many")
    # if defined $self->{'template_AC'};

    # Recursion lock
        $self->{'template_AC'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_templateParameter($self) if $old;
    $val->add_templateParameter($self)    if $val;

  
  }

  $self;
}


=head2 C<remove_template_AC>

  $obj->remove_template_AC($val);

Removes the AssociationEnd C<template_AC> value C<$val>.
Returns C<$obj>.

=cut
sub remove_template_AC ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'template_AC'}) eq $val ) { # Recursion lock
    $val = $self->{'template_AC'} = undef;         # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_templateParameter($self) if $old;
    $val->add_templateParameter($self)    if $val;

  
  }
}


=head2 C<clear_template_AC>

  $obj->clear_template_AC;

Clears the AssociationEnd C<template_AC> links to L<UMMF::UML::MetaModel::Foundation::Core::TemplateParameter|UMMF::UML::MetaModel::Foundation::Core::TemplateParameter>.
Returns C<$obj>.

=cut
sub clear_template_AC ($@)
{
  my ($self) = @_;

  my $old;
  if ( defined ($old = $self->{'template_AC'}) ) { # Recursion lock
    my $val = $self->{'template_AC'} = undef;      # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_templateParameter($self) if $old;
    $val->add_templateParameter($self)    if $val;

    }

  $self;
}


=head2 C<count_template_AC>

  $obj->count_template_AC;

Returns the number of elements of type L<UMMF::UML::MetaModel::Foundation::Core::TemplateParameter|UMMF::UML::MetaModel::Foundation::Core::TemplateParameter> associated with C<template_AC>.

=cut
sub count_template_AC ($)
{
  my ($self) = @_;

  my $x = $self->{'template_AC'};

  defined $x ? 1 : 0;
}







# End of Class ModelElement


=pod

=for html <hr/>

I<END OF DOCUMENT>

=cut

############################################################################

1; # is true!

############################################################################

### Keep these comments at end of file: kstephens@users.sourceforge.net 2003/04/06 ###
### Local Variables: ###
### mode:perl ###
### perl-indent-level:2 ###
### perl-continued-statement-offset:0 ###
### perl-brace-offset:0 ###
### perl-label-offset:0 ###
### End: ###

