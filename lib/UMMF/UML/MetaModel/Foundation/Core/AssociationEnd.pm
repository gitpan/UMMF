# -*- perl -*-
# DO NOT EDIT - This file is generated by UMMF; http://ummf.sourceforge.net 
# From template: $Id: PerlTemplate.txt,v 1.74 2004/08/01 03:50:07 kstephens Exp $

package UMMF::UML::MetaModel::Foundation::Core::AssociationEnd;

#use 5.6.1;
use strict;
use warnings;

#################################################################
# Version
#

our $VERSION = do { my @r = (q{1.0} =~ /\d+/g); sprintf "%d." . "%03d" x $#r, @r };


#################################################################
# Documentation
#

=head1 NAME

UMMF::UML::MetaModel::Foundation::Core::AssociationEnd -- 

=head1 VERSION

1.0

=head1 SYNOPSIS

=head1 DESCRIPTION 

=head1 USAGE

=head1 EXPORT

=head1 METATYPE

L<UMMF::UML::MetaModel::Foundation::Core::Class|UMMF::UML::MetaModel::Foundation::Core::Class>

=head1 SUPERCLASSES

L<UMMF::UML::MetaModel::Foundation::Core::ModelElement|UMMF::UML::MetaModel::Foundation::Core::ModelElement>




=head1 ATTRIBUTES


=head2 C<isNavigable> : UMMF::UML::MetaModel::Foundation::Data_Types::Boolean 


=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>

=item type = L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = C<<"true">>

=item container_type = C<Set::Object>

=back


=head2 C<ordering> : UMMF::UML::MetaModel::Foundation::Data_Types::OrderingKind 


=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>

=item type = L<UMMF::UML::MetaModel::Foundation::Data_Types::OrderingKind|UMMF::UML::MetaModel::Foundation::Data_Types::OrderingKind>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = C<<"unordered">>

=item container_type = C<Set::Object>

=back


=head2 C<aggregation> : UMMF::UML::MetaModel::Foundation::Data_Types::AggregationKind 


=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>

=item type = L<UMMF::UML::MetaModel::Foundation::Data_Types::AggregationKind|UMMF::UML::MetaModel::Foundation::Data_Types::AggregationKind>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = C<<"none">>

=item container_type = C<Set::Object>

=back


=head2 C<targetScope> : UMMF::UML::MetaModel::Foundation::Data_Types::ScopeKind 


=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>

=item type = L<UMMF::UML::MetaModel::Foundation::Data_Types::ScopeKind|UMMF::UML::MetaModel::Foundation::Data_Types::ScopeKind>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = C<<"instance">>

=item container_type = C<Set::Object>

=back


=head2 C<multiplicity> : UMMF::UML::MetaModel::Foundation::Data_Types::Multiplicity 


=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>

=item type = L<UMMF::UML::MetaModel::Foundation::Data_Types::Multiplicity|UMMF::UML::MetaModel::Foundation::Data_Types::Multiplicity>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = I<UNSPECIFIED>

=item container_type = C<Set::Object>

=back


=head2 C<changeability> : UMMF::UML::MetaModel::Foundation::Data_Types::ChangeableKind 


=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>

=item type = L<UMMF::UML::MetaModel::Foundation::Data_Types::ChangeableKind|UMMF::UML::MetaModel::Foundation::Data_Types::ChangeableKind>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = C<<"changeable">>

=item container_type = C<Set::Object>

=back


=head2 C<visibility> : UMMF::UML::MetaModel::Foundation::Data_Types::VisibilityKind 


=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>

=item type = L<UMMF::UML::MetaModel::Foundation::Data_Types::VisibilityKind|UMMF::UML::MetaModel::Foundation::Data_Types::VisibilityKind>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = C<<"public">>

=item container_type = C<Set::Object>

=back



=head1 ASSOCIATIONS


=head2 C<2..*> : C<connection> E<lt>---E<gt>  C<_association> : UMMF::UML::MetaModel::Foundation::Core::Association C<1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::Association|UMMF::UML::MetaModel::Foundation::Core::Association>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<composite>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<1> : C<end> E<lt>----  C<> : UMMF::UML::MetaModel::Behavioral_Elements::Actions::Read_Write_Actions::Association_Actions::LinkEndData C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Read_Write_Actions::Association_Actions::LinkEndData|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Read_Write_Actions::Association_Actions::LinkEndData>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<1> : C<end> E<lt>----  C<> : UMMF::UML::MetaModel::Behavioral_Elements::Actions::Read_Write_Actions::Association_Actions::ReadLinkObjectEndAction C<0..1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Actions::Read_Write_Actions::Association_Actions::ReadLinkObjectEndAction|UMMF::UML::MetaModel::Behavioral_Elements::Actions::Read_Write_Actions::Association_Actions::ReadLinkObjectEndAction>

=item multiplicity = C<0..1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<1> : C<associationEnd> E<lt>---E<gt>  C<linkEnd> : UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<1> : C<navigationSource> E<lt>----  C<> : UMMF::UML::MetaModel::OCL::Expressions::NavigationCallExp C<1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::OCL::Expressions::NavigationCallExp|UMMF::UML::MetaModel::OCL::Expressions::NavigationCallExp>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<association> E<lt>---E<gt>  C<participant> : UMMF::UML::MetaModel::Foundation::Core::Classifier C<1>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::Classifier|UMMF::UML::MetaModel::Foundation::Core::Classifier>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<0..1> : C<associationEnd> E<lt>---E<gt>  C<qualifier> : UMMF::UML::MetaModel::Foundation::Core::Attribute C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<ordered>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<ARRAY>

=back


=head2 C<1> : C<referredAssociationEnd> E<lt>----  C<> : UMMF::UML::MetaModel::OCL::Expressions::AssociationEndCallExp C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::OCL::Expressions::AssociationEndCallExp|UMMF::UML::MetaModel::OCL::Expressions::AssociationEndCallExp>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<0..*> : C<specifiedEnd> E<lt>---E<gt>  C<specification> : UMMF::UML::MetaModel::Foundation::Core::Classifier C<0..*>



=over 4

=item metatype = L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML::MetaModel::Foundation::Core::Classifier|UMMF::UML::MetaModel::Foundation::Core::Classifier>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back



=head1 METHODS

=cut



#################################################################
# Dependencies
#





use Carp qw(croak confess);
use Set::Object 1.05;
use Class::Multimethods 1.70;
use Data::Dumper;
use Scalar::Util qw(weaken);
use UMMF::UML::MetaModel::__ObjectBase qw(:__ummf_array);


#################################################################
# Generalizations
#

use base qw(
  UMMF::UML::MetaModel::Foundation::Core::ModelElement



);


#################################################################
# Exports
#

our @EXPORT_OK = qw(
);
our %EXPORT_TAGS = ( 'all' => \@EXPORT_OK );





#################################################################
# Validation
#


=head2 C<__validate_type>

  UMMF::UML::MetaModel::Foundation::Core::AssociationEnd->__validate_type($value);

Returns true if C<$value> is a valid representation of L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>.

=cut
sub __validate_type($$)
{
  my ($self, $x) = @_;

  no warnings;

  UNIVERSAL::isa($x, 'UMMF::UML::MetaModel::Foundation::Core::AssociationEnd')  ;
}


=head2 C<__typecheck>

  UMMF::UML::MetaModel::Foundation::Core::AssociationEnd->__typecheck($value, $msg);

Calls C<confess()> with C<$msg> if C<<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd->__validate_type($value)>> is false.

=cut
sub __typecheck
{
  my ($self, $x, $msg) = @_;

  confess("typecheck: $msg: type '" . 'UMMF::UML::MetaModel::Foundation::Core::AssociationEnd' . ": value '$x'")
    unless __validate_type($self, $x);
}


=head2 C<isaAssociationEnd>


Returns true if receiver is a L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>.
Other receivers will return false.

=cut
sub isaAssociationEnd { 1 }


=head2 C<isaFoundation__Core__AssociationEnd>


Returns true if receiver is a L<UMMF::UML::MetaModel::Foundation::Core::AssociationEnd|UMMF::UML::MetaModel::Foundation::Core::AssociationEnd>.
Other receivers will return false.
This is the fully qualified version of the C<isaAssociationEnd> method.

=cut
sub isaFoundation__Core__AssociationEnd { 1 }


#################################################################
# Introspection
#

=head2 C<__model_name> 

  my $name = $obj_or_package->__model_name;

Returns the UML Model name (C<'Foundation::Core::AssociationEnd'>) for an object or package of
this Classifier.

=cut
sub __model_name { 'Foundation::Core::AssociationEnd' }



=head2 C<__isAbstract>

  $package->__isAbstract;

Returns C<0>.

=cut
sub __isAbstract { 0; }


my $__tangram_schema;
=head2 C<__tangram_schema>

  my $tangram_schema $obj_or_package->__tangram_schema

Returns a HASH ref that describes this Classifier for Tangram.

See L<UMMF::UML::Export::Perl::Tangram|UMMF::UML::Export::Perl::Tangram>

=cut
sub __tangram_schema
{
  my ($self) = @_;

  $__tangram_schema ||=
  {
   'classes' =>
   [
     'UMMF::UML::MetaModel::Foundation::Core::AssociationEnd' =>
     {
       'table' => 'Foundation__Core__AssociationEnd',
       'abstract' => 0,
       'slots' => 
       { 
	 # Attributes
	 	       'isNavigable'
       => {
	 'type_impl' => 'string',
                                             'col' => 'isNavigable', 

                                                                                                                   }
      ,
         	       'ordering'
       => {
	 'type_impl' => 'string',
                                             'col' => 'ordering', 

                                                                                                                   }
      ,
         	       'aggregation'
       => {
	 'type_impl' => 'string',
                                             'col' => 'aggregation', 

                                                                                                                   }
      ,
         	       'targetScope'
       => {
	 'type_impl' => 'string',
                                             'col' => 'targetScope', 

                                                                                                                   }
      ,
         	       'multiplicity'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::UML::MetaModel::Foundation::Data_Types::Multiplicity',

                                             'col' => 'multiplicity', 

                                                                                                                   }
      ,
         	       'changeability'
       => {
	 'type_impl' => 'string',
                                             'col' => 'changeability', 

                                                                                                                   }
      ,
         	       'visibility'
       => {
	 'type_impl' => 'string',
                                             'col' => 'visibility', 

                                                                                                                   }
      ,
         
	 # Associations
	 	 	       '_association'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::Association',

                                             'col' => '_association', 

                                                                                                                   }
      ,
                  	 	                     	 	                     	 	       'linkEnd'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd',

                           'table' => 'Foundation__Core__AssociationEnd__linkEnd', 

                                                               'coll' => 'associationEnd',

                                                                               }
      ,
                  	 	                     	 	       'participant'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::Classifier',

                                             'col' => 'participant', 

                                                                                                                   }
      ,
                  	 	       'qualifier'
       => {
	 'type_impl' => 'iarray',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::Attribute',

                           'table' => 'Foundation__Core__AssociationEnd__qualifier', 

                                                               'coll' => 'associationEnd',

                  'slot' => 'associationEnd_i', 

                                    'aggreg' => '1', 

                                           }
      ,
                  	 	                     	 	       'specification'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML::MetaModel::Foundation::Core::Classifier',

                           'table' => 'Foundation__Core__SpecifiedEnd_Specification', 

                                                      'item' => 'specification', 

                  'coll' => 'specifiedEnd',

                                                                               }
      ,
                         },
       'bases' => [  'UMMF::UML::MetaModel::Foundation::Core::ModelElement',  ],
       'sql' => {

       },
     },
   ],

   'sql' =>
   {
    # Note Tangram::Ref::get_exporter() has
    # "UPDATE $table SET $self->{col} = $refid WHERE id = $id",
    # The id_col is hard-coded, 
    # Thus id_col will not work.
    #'id_col' => '__sid',
    #'class_col' => '__stype',
   },
     # 'set_id' => sub { }
     # 'get_id' => sub { }

      
  };
}


#################################################################
# Class Attributes
#


                  

#################################################################
# Class Associations
#


    

#################################################################
# Initialization
#


=head2 C<___initialize>

Initialize all Attributes and AssociationEnds in a instance of this Classifier.
Does B<not> initalize slots in its Generalizations.

See also: C<__initialize>.

=cut
sub ___initialize
{
  my ($self) = @_;

  # Attributes

    # Attribute isNavigable
  if ( exists $self->{'isNavigable'} ) {
    my $x = $self->{'isNavigable'};
    $self->{'isNavigable'} = undef;
    $self->set_isNavigable($x);
  } else {
        $self->{'isNavigable'} = "true";
      }
  
    # Attribute ordering
  if ( exists $self->{'ordering'} ) {
    my $x = $self->{'ordering'};
    $self->{'ordering'} = undef;
    $self->set_ordering($x);
  } else {
        $self->{'ordering'} = "unordered";
      }
  
    # Attribute aggregation
  if ( exists $self->{'aggregation'} ) {
    my $x = $self->{'aggregation'};
    $self->{'aggregation'} = undef;
    $self->set_aggregation($x);
  } else {
        $self->{'aggregation'} = "none";
      }
  
    # Attribute targetScope
  if ( exists $self->{'targetScope'} ) {
    my $x = $self->{'targetScope'};
    $self->{'targetScope'} = undef;
    $self->set_targetScope($x);
  } else {
        $self->{'targetScope'} = "instance";
      }
  
    # Attribute multiplicity
  if ( exists $self->{'multiplicity'} ) {
    my $x = $self->{'multiplicity'};
    $self->{'multiplicity'} = undef;
    $self->set_multiplicity($x);
  } else {
      }
  
    # Attribute changeability
  if ( exists $self->{'changeability'} ) {
    my $x = $self->{'changeability'};
    $self->{'changeability'} = undef;
    $self->set_changeability($x);
  } else {
        $self->{'changeability'} = "changeable";
      }
  
    # Attribute visibility
  if ( exists $self->{'visibility'} ) {
    my $x = $self->{'visibility'};
    $self->{'visibility'} = undef;
    $self->set_visibility($x);
  } else {
        $self->{'visibility'} = "public";
      }
  


  # Associations

  # AssociationEnd 
  #  connection 2..*
  #  <--> 
  #  _association 1 UMMF::UML::MetaModel::Foundation::Core::Association.
    if ( defined $self->{'_association'} ) {
    my $x = $self->{'_association'};
    $self->{'_association'} = undef;
    $self->set__association($x);
  }
  
  # AssociationEnd 
  #  associationEnd 1
  #  <--> 
  #  linkEnd 0..* UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd.
    if ( defined $self->{'linkEnd'} ) {
    my $x = $self->{'linkEnd'};
        $self->{'linkEnd'} = Set::Object->new();
        $self->set_linkEnd(@$x);
  }
  
  # AssociationEnd 
  #  association 0..*
  #  <--> 
  #  participant 1 UMMF::UML::MetaModel::Foundation::Core::Classifier.
    if ( defined $self->{'participant'} ) {
    my $x = $self->{'participant'};
    $self->{'participant'} = undef;
    $self->set_participant($x);
  }
  
  # AssociationEnd 
  #  associationEnd 0..1
  #  <--> 
  #  qualifier 0..* UMMF::UML::MetaModel::Foundation::Core::Attribute.
    if ( defined $self->{'qualifier'} ) {
    my $x = $self->{'qualifier'};
        $self->{'qualifier'} = [ ];
        $self->set_qualifier(@$x);
  }
  
  # AssociationEnd 
  #  specifiedEnd 0..*
  #  <--> 
  #  specification 0..* UMMF::UML::MetaModel::Foundation::Core::Classifier.
    if ( defined $self->{'specification'} ) {
    my $x = $self->{'specification'};
        $self->{'specification'} = Set::Object->new();
        $self->set_specification(@$x);
  }
  

  $self;
}


my $__initialize_use;

=head2 C<__initialize>

Initialize all slots in this Classifier and all its Generalizations.

See also: C<___initialize>.

=cut
sub __initialize
{
  my ($self) = @_;

  # $DB::single = 1;

  unless ( ! $__initialize_use ) {
    $__initialize_use = 1;
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Element');
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::ModelElement');
  }

  $self->UMMF::UML::MetaModel::Foundation::Core::AssociationEnd::___initialize;
  $self->UMMF::UML::MetaModel::Foundation::Core::Element::___initialize;
  $self->UMMF::UML::MetaModel::Foundation::Core::ModelElement::___initialize;

  $self;
}
      

=head2 C<__create>

Calls all <<create>> Methods for this Classifier and all Generalizations.

See also: C<___create>.

=cut
sub __create
{
  my ($self, @args) = @_;

  # $DB::single = 1;
  $self->UMMF::UML::MetaModel::Foundation::Core::AssociationEnd::___create(@args);
  $self->UMMF::UML::MetaModel::Foundation::Core::Element::___create();
  $self->UMMF::UML::MetaModel::Foundation::Core::ModelElement::___create();

  $self;
}




#################################################################
# Attributes
#



=for html <hr/>

=cut

#################################################################
# Attribute isNavigable
# type = UMMF::UML::MetaModel::Foundation::Data_Types::Boolean
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = "true"

=head2 C<isNavigable>

  my $val = $obj->isNavigable;

Returns the L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean> value of Attribute C<isNavigable>.

=cut
sub isNavigable ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isNavigable'};

  ;

  $val;
}


=head2 C<set_isNavigable>

  $obj->set_isNavigable($val);

Sets the value of Attribute C<isNavigable>.
C<$val> must be of type L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean> or C<undef>.
Returns C<$obj>.

=cut
sub set_isNavigable ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    ;
  }

    $self->{'isNavigable'} = $val
  ;

  ;

  $self;
}


=head2 C<count_isNavigable>

  $obj->count_isNavigable;

Returns the number of elements (0 or 1) in C<isNavigable>.

=cut
sub count_isNavigable ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isNavigable'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute ordering
# type = UMMF::UML::MetaModel::Foundation::Data_Types::OrderingKind
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = "unordered"

=head2 C<ordering>

  my $val = $obj->ordering;

Returns the L<UMMF::UML::MetaModel::Foundation::Data_Types::OrderingKind|UMMF::UML::MetaModel::Foundation::Data_Types::OrderingKind> value of Attribute C<ordering>.

=cut
sub ordering ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'ordering'};

  ;

  $val;
}


=head2 C<set_ordering>

  $obj->set_ordering($val);

Sets the value of Attribute C<ordering>.
C<$val> must be of type L<UMMF::UML::MetaModel::Foundation::Data_Types::OrderingKind|UMMF::UML::MetaModel::Foundation::Data_Types::OrderingKind> or C<undef>.
Returns C<$obj>.

=cut
sub set_ordering ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    $self->__use('UMMF::UML::MetaModel::Foundation::Data_Types::OrderingKind')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::AssociationEnd.ordering");
  }

    $self->{'ordering'} = $val
  ;

  ;

  $self;
}


=head2 C<count_ordering>

  $obj->count_ordering;

Returns the number of elements (0 or 1) in C<ordering>.

=cut
sub count_ordering ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'ordering'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute aggregation
# type = UMMF::UML::MetaModel::Foundation::Data_Types::AggregationKind
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = "none"

=head2 C<aggregation>

  my $val = $obj->aggregation;

Returns the L<UMMF::UML::MetaModel::Foundation::Data_Types::AggregationKind|UMMF::UML::MetaModel::Foundation::Data_Types::AggregationKind> value of Attribute C<aggregation>.

=cut
sub aggregation ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'aggregation'};

  ;

  $val;
}


=head2 C<set_aggregation>

  $obj->set_aggregation($val);

Sets the value of Attribute C<aggregation>.
C<$val> must be of type L<UMMF::UML::MetaModel::Foundation::Data_Types::AggregationKind|UMMF::UML::MetaModel::Foundation::Data_Types::AggregationKind> or C<undef>.
Returns C<$obj>.

=cut
sub set_aggregation ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    $self->__use('UMMF::UML::MetaModel::Foundation::Data_Types::AggregationKind')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::AssociationEnd.aggregation");
  }

    $self->{'aggregation'} = $val
  ;

  ;

  $self;
}


=head2 C<count_aggregation>

  $obj->count_aggregation;

Returns the number of elements (0 or 1) in C<aggregation>.

=cut
sub count_aggregation ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'aggregation'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute targetScope
# type = UMMF::UML::MetaModel::Foundation::Data_Types::ScopeKind
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = "instance"

=head2 C<targetScope>

  my $val = $obj->targetScope;

Returns the L<UMMF::UML::MetaModel::Foundation::Data_Types::ScopeKind|UMMF::UML::MetaModel::Foundation::Data_Types::ScopeKind> value of Attribute C<targetScope>.

=cut
sub targetScope ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'targetScope'};

  ;

  $val;
}


=head2 C<set_targetScope>

  $obj->set_targetScope($val);

Sets the value of Attribute C<targetScope>.
C<$val> must be of type L<UMMF::UML::MetaModel::Foundation::Data_Types::ScopeKind|UMMF::UML::MetaModel::Foundation::Data_Types::ScopeKind> or C<undef>.
Returns C<$obj>.

=cut
sub set_targetScope ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    $self->__use('UMMF::UML::MetaModel::Foundation::Data_Types::ScopeKind')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::AssociationEnd.targetScope");
  }

    $self->{'targetScope'} = $val
  ;

  ;

  $self;
}


=head2 C<count_targetScope>

  $obj->count_targetScope;

Returns the number of elements (0 or 1) in C<targetScope>.

=cut
sub count_targetScope ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'targetScope'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute multiplicity
# type = UMMF::UML::MetaModel::Foundation::Data_Types::Multiplicity
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = 

=head2 C<multiplicity>

  my $val = $obj->multiplicity;

Returns the L<UMMF::UML::MetaModel::Foundation::Data_Types::Multiplicity|UMMF::UML::MetaModel::Foundation::Data_Types::Multiplicity> value of Attribute C<multiplicity>.

=cut
sub multiplicity ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'multiplicity'};

  ;

  $val;
}


=head2 C<set_multiplicity>

  $obj->set_multiplicity($val);

Sets the value of Attribute C<multiplicity>.
C<$val> must be of type L<UMMF::UML::MetaModel::Foundation::Data_Types::Multiplicity|UMMF::UML::MetaModel::Foundation::Data_Types::Multiplicity> or C<undef>.
Returns C<$obj>.

=cut
sub set_multiplicity ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    $self->__use('UMMF::UML::MetaModel::Foundation::Data_Types::Multiplicity')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::AssociationEnd.multiplicity");
  }

    $self->{'multiplicity'} = $val
  ;

  ;

  $self;
}


=head2 C<count_multiplicity>

  $obj->count_multiplicity;

Returns the number of elements (0 or 1) in C<multiplicity>.

=cut
sub count_multiplicity ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'multiplicity'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute changeability
# type = UMMF::UML::MetaModel::Foundation::Data_Types::ChangeableKind
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = "changeable"

=head2 C<changeability>

  my $val = $obj->changeability;

Returns the L<UMMF::UML::MetaModel::Foundation::Data_Types::ChangeableKind|UMMF::UML::MetaModel::Foundation::Data_Types::ChangeableKind> value of Attribute C<changeability>.

=cut
sub changeability ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'changeability'};

  ;

  $val;
}


=head2 C<set_changeability>

  $obj->set_changeability($val);

Sets the value of Attribute C<changeability>.
C<$val> must be of type L<UMMF::UML::MetaModel::Foundation::Data_Types::ChangeableKind|UMMF::UML::MetaModel::Foundation::Data_Types::ChangeableKind> or C<undef>.
Returns C<$obj>.

=cut
sub set_changeability ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    $self->__use('UMMF::UML::MetaModel::Foundation::Data_Types::ChangeableKind')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::AssociationEnd.changeability");
  }

    $self->{'changeability'} = $val
  ;

  ;

  $self;
}


=head2 C<count_changeability>

  $obj->count_changeability;

Returns the number of elements (0 or 1) in C<changeability>.

=cut
sub count_changeability ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'changeability'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute visibility
# type = UMMF::UML::MetaModel::Foundation::Data_Types::VisibilityKind
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = "public"

=head2 C<visibility>

  my $val = $obj->visibility;

Returns the L<UMMF::UML::MetaModel::Foundation::Data_Types::VisibilityKind|UMMF::UML::MetaModel::Foundation::Data_Types::VisibilityKind> value of Attribute C<visibility>.

=cut
sub visibility ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'visibility'};

  ;

  $val;
}


=head2 C<set_visibility>

  $obj->set_visibility($val);

Sets the value of Attribute C<visibility>.
C<$val> must be of type L<UMMF::UML::MetaModel::Foundation::Data_Types::VisibilityKind|UMMF::UML::MetaModel::Foundation::Data_Types::VisibilityKind> or C<undef>.
Returns C<$obj>.

=cut
sub set_visibility ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    $self->__use('UMMF::UML::MetaModel::Foundation::Data_Types::VisibilityKind')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::AssociationEnd.visibility");
  }

    $self->{'visibility'} = $val
  ;

  ;

  $self;
}


=head2 C<count_visibility>

  $obj->count_visibility;

Returns the number of elements (0 or 1) in C<visibility>.

=cut
sub count_visibility ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'visibility'};

  ;

  defined $val ? 1 : 0;
}




#################################################################
# Association
#


=for html <hr/>

=cut

#################################################################
# AssociationEnd connection <---> _association
# type = UMMF::UML::MetaModel::Foundation::Core::Association
# multiplicity = 1
# ordering = 

=head2 C<_association>

  my $val = $obj->_association;

Returns the AssociationEnd C<_association> value of type L<UMMF::UML::MetaModel::Foundation::Core::Association|UMMF::UML::MetaModel::Foundation::Core::Association>.

=cut
sub _association ($)
{
  my ($self) = @_;
		  
  $self->{'_association'};
}


=head2 C<set__association>

  $obj->set__association($val);

Sets the AssociationEnd C<_association> value.
C<$val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Association|UMMF::UML::MetaModel::Foundation::Core::Association>.
Returns C<$obj>.

=cut
sub set__association ($$)
{
  my ($self, $val) = @_;
		  
  no warnings; # Use of uninitialized value in string ne at ...
		  
  my $old;
  if ( ($old = $self->{'_association'}) ne $val ) { # Recursion lock

    if ( defined $val ) { $self->__use('UMMF::UML::MetaModel::Foundation::Core::Association')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::AssociationEnd._association") }

    # Recursion lock
        $self->{'_association'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_connection($self) if $old;
    $val->add_connection($self)    if $val;

    }
		  
  $self;
}


=head2 C<add__association>

  $obj->add__association($val);

Adds the AssociationEnd C<_association> value.
C<$val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Association|UMMF::UML::MetaModel::Foundation::Core::Association>.
Throws exception if a value already exists.
Returns C<$obj>.

=cut
sub add__association ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'_association'}) ne $val ) { # Recursion lock
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Association')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::AssociationEnd._association");
      
    # confess("UMMF::UML::MetaModel::Foundation::Core::AssociationEnd::_association: too many")
    # if defined $self->{'_association'};

    # Recursion lock
        $self->{'_association'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_connection($self) if $old;
    $val->add_connection($self)    if $val;

  
  }

  $self;
}


=head2 C<remove__association>

  $obj->remove__association($val);

Removes the AssociationEnd C<_association> value C<$val>.
Returns C<$obj>.

=cut
sub remove__association ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'_association'}) eq $val ) { # Recursion lock
    $val = $self->{'_association'} = undef;         # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_connection($self) if $old;
    $val->add_connection($self)    if $val;

  
  }
}


=head2 C<clear__association>

  $obj->clear__association;

Clears the AssociationEnd C<_association> links to L<UMMF::UML::MetaModel::Foundation::Core::Association|UMMF::UML::MetaModel::Foundation::Core::Association>.
Returns C<$obj>.

=cut
sub clear__association ($@)
{
  my ($self) = @_;

  my $old;
  if ( defined ($old = $self->{'_association'}) ) { # Recursion lock
    my $val = $self->{'_association'} = undef;      # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_connection($self) if $old;
    $val->add_connection($self)    if $val;

    }

  $self;
}


=head2 C<count__association>

  $obj->count__association;

Returns the number of elements of type L<UMMF::UML::MetaModel::Foundation::Core::Association|UMMF::UML::MetaModel::Foundation::Core::Association> associated with C<_association>.

=cut
sub count__association ($)
{
  my ($self) = @_;

  my $x = $self->{'_association'};

  defined $x ? 1 : 0;
}




=for html <hr/>

=cut

#################################################################
# AssociationEnd associationEnd <---> linkEnd
# type = UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd
# multiplicity = 0..*
# ordering = 

=head2 C<linkEnd>

  my @val = $obj->linkEnd;
  my $ary_val = $obj->linkEnd;

Returns the AssociationEnd C<linkEnd> values of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub linkEnd ($)
{
  my ($self) = @_;

    my $x = $self->{'linkEnd'};

  # confess("Container for linkEnd $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_linkEnd>

  $obj->set_linkEnd(@val);

Sets the AssociationEnd C<linkEnd> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd>.
Returns C<$obj>.

=cut
sub set_linkEnd ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_linkEnd;
  $self->add_linkEnd(@val);
}


=head2 C<add_linkEnd>

  $obj->add_linkEnd(@val);

Adds AssociationEnd C<linkEnd> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd>.
Returns C<$obj>.

=cut
sub add_linkEnd ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'linkEnd'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::AssociationEnd.linkEnd");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_associationEnd($self) if $old;
    $val->add_associationEnd($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_linkEnd>

  $obj->remove_linkEnd(@val);

Removes the AssociationEnd C<linkEnd> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd>.
Returns C<$obj>.

=cut
sub remove_linkEnd ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'linkEnd'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::AssociationEnd.linkEnd");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_associationEnd($self) if $old;
    $val->add_associationEnd($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_linkEnd>

  $obj->clear_linkEnd;

Clears the AssociationEnd C<linkEnd> links to L<UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd|UMMF::UML::MetaModel::Behavioral_Elements::Common_Behavior::LinkEnd>.
Returns C<$obj>.

=cut
sub clear_linkEnd ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'linkEnd'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'linkEnd'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_associationEnd($self) if $old;
    $val->add_associationEnd($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_linkEnd>

  $obj->count_linkEnd;

Returns the number of elements associated with C<linkEnd>.

=cut
sub count_linkEnd ($)
{
  my ($self) = @_;

  my $x = $self->{'linkEnd'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd association <---> participant
# type = UMMF::UML::MetaModel::Foundation::Core::Classifier
# multiplicity = 1
# ordering = 

=head2 C<participant>

  my $val = $obj->participant;

Returns the AssociationEnd C<participant> value of type L<UMMF::UML::MetaModel::Foundation::Core::Classifier|UMMF::UML::MetaModel::Foundation::Core::Classifier>.

=cut
sub participant ($)
{
  my ($self) = @_;
		  
  $self->{'participant'};
}


=head2 C<set_participant>

  $obj->set_participant($val);

Sets the AssociationEnd C<participant> value.
C<$val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Classifier|UMMF::UML::MetaModel::Foundation::Core::Classifier>.
Returns C<$obj>.

=cut
sub set_participant ($$)
{
  my ($self, $val) = @_;
		  
  no warnings; # Use of uninitialized value in string ne at ...
		  
  my $old;
  if ( ($old = $self->{'participant'}) ne $val ) { # Recursion lock

    if ( defined $val ) { $self->__use('UMMF::UML::MetaModel::Foundation::Core::Classifier')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::AssociationEnd.participant") }

    # Recursion lock
        $self->{'participant'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_association($self) if $old;
    $val->add_association($self)    if $val;

    }
		  
  $self;
}


=head2 C<add_participant>

  $obj->add_participant($val);

Adds the AssociationEnd C<participant> value.
C<$val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Classifier|UMMF::UML::MetaModel::Foundation::Core::Classifier>.
Throws exception if a value already exists.
Returns C<$obj>.

=cut
sub add_participant ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'participant'}) ne $val ) { # Recursion lock
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Classifier')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::AssociationEnd.participant");
      
    # confess("UMMF::UML::MetaModel::Foundation::Core::AssociationEnd::participant: too many")
    # if defined $self->{'participant'};

    # Recursion lock
        $self->{'participant'} = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_association($self) if $old;
    $val->add_association($self)    if $val;

  
  }

  $self;
}


=head2 C<remove_participant>

  $obj->remove_participant($val);

Removes the AssociationEnd C<participant> value C<$val>.
Returns C<$obj>.

=cut
sub remove_participant ($$)
{
  my ($self, $val) = @_;

  no warnings; # Use of uninitialized value in string ne at ...

  my $old;
  if ( ($old = $self->{'participant'}) eq $val ) { # Recursion lock
    $val = $self->{'participant'} = undef;         # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_association($self) if $old;
    $val->add_association($self)    if $val;

  
  }
}


=head2 C<clear_participant>

  $obj->clear_participant;

Clears the AssociationEnd C<participant> links to L<UMMF::UML::MetaModel::Foundation::Core::Classifier|UMMF::UML::MetaModel::Foundation::Core::Classifier>.
Returns C<$obj>.

=cut
sub clear_participant ($@)
{
  my ($self) = @_;

  my $old;
  if ( defined ($old = $self->{'participant'}) ) { # Recursion lock
    my $val = $self->{'participant'} = undef;      # Recursion lock

    # Remove and add associations with other ends.
        
    $old->remove_association($self) if $old;
    $val->add_association($self)    if $val;

    }

  $self;
}


=head2 C<count_participant>

  $obj->count_participant;

Returns the number of elements of type L<UMMF::UML::MetaModel::Foundation::Core::Classifier|UMMF::UML::MetaModel::Foundation::Core::Classifier> associated with C<participant>.

=cut
sub count_participant ($)
{
  my ($self) = @_;

  my $x = $self->{'participant'};

  defined $x ? 1 : 0;
}




=for html <hr/>

=cut

#################################################################
# AssociationEnd associationEnd <---> qualifier
# type = UMMF::UML::MetaModel::Foundation::Core::Attribute
# multiplicity = 0..*
# ordering = ordered

=head2 C<qualifier>

  my @val = $obj->qualifier;
  my $ary_val = $obj->qualifier;

Returns the AssociationEnd C<qualifier> values of type L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub qualifier ($)
{
  my ($self) = @_;

    my $x = $self->{'qualifier'} ||= [ ];

  wantarray ? @{$x} : $x;
  
}


=head2 C<index_qualifier>

  my $x = $obj->index_qualifier($i);
  my @x = $obj->index_qualifier($i, $count);

In scalar context, returns the value of AssociationEnd C<qualifier> at index C<$i>.
In array context, returns the values between index C<$i> and C<$i + $count - 1>, inclusive.

=cut
sub index_qualifier ($$@)
{
  my ($self, $i, $count) = @_;

  ;

  my $val = $self->{'qualifier'} ||= [ ];

  ;

  wantarray ? $val->[$i .. (defined $count ? $i + $count - 1 : $i)]
            : $val->[$i];
}


=head2 C<index_of_qualifier>

  my $index = $obj->index_of_qualifier($val);

Returns the index of C<$val> in AssociationEnd C<qualifier>.
Return C<undef> if C<$val> is not in C<qualifier>.

=cut
sub index_of_qualifier ($$)
{
  my ($self, $x) = @_;

  ;

  my $val = $self->{'qualifier'} ||= [ ];

  ;

  __ummf_array_index($val, $x);
}


=head2 C<set_qualifier>

  $obj->set_qualifier(@val);

Sets the AssociationEnd C<qualifier> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>.
Returns C<$obj>.

=cut
sub set_qualifier ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_qualifier;
  $self->add_qualifier(@val);
}


=head2 C<set_index_qualifier>

  $obj->set_index_qualifier($i, $val);

Sets the value of AssociationEnd C<qualifier> at index C<$i>.
Returns self.

=cut
sub set_index_qualifier ($$$)
{
  my ($self, $i, $val) = @_;

  ;

  my $x = $self->{'qualifier'} ||= [ ];

  no warnings;
  my $old;
  if ( ($old = $x->[$i]) ne $val) {
    # Recursion lock
        $x->[$i] = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_associationEnd($self) if $old;
    $val->add_associationEnd($self)    if $val;

  
    ;
  }

  $self;
}


=head2 C<add_qualifier>

  $obj->add_qualifier(@val);

Adds AssociationEnd C<qualifier> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>.
Returns C<$obj>.

=cut
sub add_qualifier ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'qualifier'} ||= [ ];
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if grep($_ eq $val, @$x);
        $self->__use('UMMF::UML::MetaModel::Foundation::Core::Attribute')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::AssociationEnd.qualifier");

    # Recursion lock
        push(@{$x}, $val);
        
    # Remove and add associations with other ends.
        
    $old->remove_associationEnd($self) if $old;
    $val->add_associationEnd($self)    if $val;

    }
  
  $self;
}


=head2 C<add_index_qualifier>

  $obj->add_index_qualifier($i, @val);

Adds AssociationEnd C<qualifier> values at index C<$i>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>.
Returns C<$obj>.

=cut
sub add_index_qualifier ($$@)
{
  my ($self, $i, @val) = @_;

  
    my $x = $self->{'qualifier'} ||= [ ];
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if grep($_ eq $val, @$x);
        $self->__use('UMMF::UML::MetaModel::Foundation::Core::Attribute')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::AssociationEnd.qualifier");

    # Recursion lock
        splice(@{$x}, $i, 0, $val); # Recursion lock
        ++ $i;
    
    # Remove and add associations with other ends.
        
    $old->remove_associationEnd($self) if $old;
    $val->add_associationEnd($self)    if $val;

    }
  
  
  $self;
}


=head2 C<remove_qualifier>

  $obj->remove_qualifier(@val);

Removes the AssociationEnd C<qualifier> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>.
Returns C<$obj>.

=cut
sub remove_qualifier ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'qualifier'} ||= [ ];
  
  for my $old ( @val ) {
    # Recursion lock
        my $i; # index of $old in @$x.
    next unless defined($i = __ummf_array_index($x, $old));
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Attribute')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::AssociationEnd.qualifier");

    # Recursion lock
        splice(@$x, $i, 1);     
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_associationEnd($self) if $old;
    $val->add_associationEnd($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_qualifier>

  $obj->clear_qualifier;

Clears the AssociationEnd C<qualifier> links to L<UMMF::UML::MetaModel::Foundation::Core::Attribute|UMMF::UML::MetaModel::Foundation::Core::Attribute>.
Returns C<$obj>.

=cut
sub clear_qualifier ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'qualifier'} ||= [ ];
  
  my $val; # Place holder for other MACRO.
  
    $self->{'qualifier'} = [ ];  # Recursion lock
  for my $old ( @$x ) { # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_associationEnd($self) if $old;
    $val->add_associationEnd($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_qualifier>

  $obj->count_qualifier;

Returns the number of elements associated with C<qualifier>.

=cut
sub count_qualifier ($)
{
  my ($self) = @_;

  my $x = $self->{'qualifier'};

    defined $x ? scalar @$x : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd specifiedEnd <---> specification
# type = UMMF::UML::MetaModel::Foundation::Core::Classifier
# multiplicity = 0..*
# ordering = 

=head2 C<specification>

  my @val = $obj->specification;
  my $ary_val = $obj->specification;

Returns the AssociationEnd C<specification> values of type L<UMMF::UML::MetaModel::Foundation::Core::Classifier|UMMF::UML::MetaModel::Foundation::Core::Classifier>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub specification ($)
{
  my ($self) = @_;

    my $x = $self->{'specification'};

  # confess("Container for specification $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_specification>

  $obj->set_specification(@val);

Sets the AssociationEnd C<specification> value.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Classifier|UMMF::UML::MetaModel::Foundation::Core::Classifier>.
Returns C<$obj>.

=cut
sub set_specification ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_specification;
  $self->add_specification(@val);
}


=head2 C<add_specification>

  $obj->add_specification(@val);

Adds AssociationEnd C<specification> values.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Classifier|UMMF::UML::MetaModel::Foundation::Core::Classifier>.
Returns C<$obj>.

=cut
sub add_specification ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'specification'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML::MetaModel::Foundation::Core::Classifier')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::AssociationEnd.specification");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_specifiedEnd($self) if $old;
    $val->add_specifiedEnd($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_specification>

  $obj->remove_specification(@val);

Removes the AssociationEnd C<specification> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML::MetaModel::Foundation::Core::Classifier|UMMF::UML::MetaModel::Foundation::Core::Classifier>.
Returns C<$obj>.

=cut
sub remove_specification ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'specification'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML::MetaModel::Foundation::Core::Classifier')->__typecheck($val, "UMMF::UML::MetaModel::Foundation::Core::AssociationEnd.specification");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_specifiedEnd($self) if $old;
    $val->add_specifiedEnd($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_specification>

  $obj->clear_specification;

Clears the AssociationEnd C<specification> links to L<UMMF::UML::MetaModel::Foundation::Core::Classifier|UMMF::UML::MetaModel::Foundation::Core::Classifier>.
Returns C<$obj>.

=cut
sub clear_specification ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'specification'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'specification'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_specifiedEnd($self) if $old;
    $val->add_specifiedEnd($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_specification>

  $obj->count_specification;

Returns the number of elements associated with C<specification>.

=cut
sub count_specification ($)
{
  my ($self) = @_;

  my $x = $self->{'specification'};

    defined $x ? $x->size : 0;
  }







# End of Class AssociationEnd


=pod

=for html <hr/>

I<END OF DOCUMENT>

=cut

############################################################################

1; # is true!

############################################################################

### Keep these comments at end of file: kstephens@users.sourceforge.net 2003/04/06 ###
### Local Variables: ###
### mode:perl ###
### perl-indent-level:2 ###
### perl-continued-statement-offset:0 ###
### perl-brace-offset:0 ###
### perl-label-offset:0 ###
### End: ###

