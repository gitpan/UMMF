# -*- perl -*-
# DO NOT EDIT - This file is generated by UMMF; http://ummf.sourceforge.net 
# From template: $Id: PerlTemplate.txt,v 1.74 2004/08/01 03:50:07 kstephens Exp $

package UMMF::UML::MetaModel::Foundation::Data_Types::Boolean;

#use 5.6.1;
use strict;
use warnings;

#################################################################
# Version
#

our $VERSION = do { my @r = (q{1.0} =~ /\d+/g); sprintf "%d." . "%03d" x $#r, @r };


#################################################################
# Documentation
#

=head1 NAME

UMMF::UML::MetaModel::Foundation::Data_Types::Boolean -- 

=head1 VERSION

1.0

=head1 SYNOPSIS

=head1 DESCRIPTION 

=head1 USAGE

=head1 EXPORT

=head1 METATYPE

L<UMMF::UML::MetaModel::Foundation::Core::Enumeration|UMMF::UML::MetaModel::Foundation::Core::Enumeration>

=head1 SUPERCLASSES

L<UMMF::UML::MetaModel::__ObjectBase|UMMF::UML::MetaModel::__ObjectBase>




=head1 ENUMERATION LITERALS


=head2 C<false>




=head2 C<true>





=head1 METHODS

=cut



#################################################################
# Dependencies
#





use Carp qw(croak confess);
use Set::Object 1.05;
use Class::Multimethods 1.70;
use Data::Dumper;
use Scalar::Util qw(weaken);
use UMMF::UML::MetaModel::__ObjectBase qw(:__ummf_array);


#################################################################
# Generalizations
#

use base qw(


  UMMF::UML::MetaModel::__ObjectBase
  Exporter

);


#################################################################
# Exports
#

our @EXPORT_OK = qw(
      FALSE      TRUE  );
our %EXPORT_TAGS = ( 'all' => \@EXPORT_OK );



#################################################################
# Instantiation
#

=head2 C<new>

Constructs new UMMF::UML::MetaModel::Foundation::Data_Types::Boolean value.

=cut
sub new
{
  my ($self, @args) = @_;

  my $x = pop(@args);

    $x = (defined($x) && $x ne '' && $x ne '0' && substr($x, 0, 1) ne 'f' && substr($x, 0, 1) ne 'n')   ;
  
  __typecheck($self, $x, 'UMMF::UML::MetaModel::Foundation::Data_Types::Boolean::new');

  $x;
}




#################################################################
# EnumerationLiterals
#


=head2 C<FALSE>

Returns 'false'.

=cut
sub FALSE{
  'false';
}


=head2 C<TRUE>

Returns 'true'.

=cut
sub TRUE{
  'true';
}




#################################################################
# Validation
#

my %__literal = 
(
    'false' => 'false',
    'true' => 'true',
  );

=head2 C<__validate_type>

  UMMF::UML::MetaModel::Foundation::Data_Types::Boolean->__validate_type($value);

Returns true if C<$value> is a valid representation of L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean>.

=cut
sub __validate_type($$)
{
  my ($self, $x) = @_;

  no warnings;

  1  ;
}


=head2 C<__typecheck>

  UMMF::UML::MetaModel::Foundation::Data_Types::Boolean->__typecheck($value, $msg);

Calls C<confess()> with C<$msg> if C<<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean->__validate_type($value)>> is false.

=cut
sub __typecheck
{
  my ($self, $x, $msg) = @_;

  confess("typecheck: $msg: type '" . 'UMMF::UML::MetaModel::Foundation::Data_Types::Boolean' . ": value '$x'")
    unless __validate_type($self, $x);
}


=head2 C<isaBoolean>


Returns true if receiver is a L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean>.
Other receivers will return false.

=cut
sub isaBoolean { 1 }


=head2 C<isaFoundation__Data_Types__Boolean>


Returns true if receiver is a L<UMMF::UML::MetaModel::Foundation::Data_Types::Boolean|UMMF::UML::MetaModel::Foundation::Data_Types::Boolean>.
Other receivers will return false.
This is the fully qualified version of the C<isaBoolean> method.

=cut
sub isaFoundation__Data_Types__Boolean { 1 }


#################################################################
# Introspection
#

=head2 C<__model_name> 

  my $name = $obj_or_package->__model_name;

Returns the UML Model name (C<'Foundation::Data_Types::Boolean'>) for an object or package of
this Classifier.

=cut
sub __model_name { 'Foundation::Data_Types::Boolean' }



=head2 C<__isAbstract>

  $package->__isAbstract;

Returns C<0>.

=cut
sub __isAbstract { 0; }


my $__tangram_schema;
=head2 C<__tangram_schema>

  my $tangram_schema $obj_or_package->__tangram_schema

Returns a HASH ref that describes this Classifier for Tangram.

See L<UMMF::UML::Export::Perl::Tangram|UMMF::UML::Export::Perl::Tangram>

=cut
sub __tangram_schema
{
  my ($self) = @_;

  $__tangram_schema ||=
  {

      
  };
}


#################################################################
# Class Attributes
#


    

#################################################################
# Class Associations
#


    

#################################################################
# Initialization
#


=head2 C<___initialize>

Initialize all Attributes and AssociationEnds in a instance of this Classifier.
Does B<not> initalize slots in its Generalizations.

See also: C<__initialize>.

=cut
sub ___initialize
{
  my ($self) = @_;

  # Attributes



  # Associations


  $self;
}


my $__initialize_use;

=head2 C<__initialize>

Initialize all slots in this Classifier and all its Generalizations.

See also: C<___initialize>.

=cut
sub __initialize
{
  my ($self) = @_;

  # $DB::single = 1;

  unless ( ! $__initialize_use ) {
    $__initialize_use = 1;
  }

  $self->UMMF::UML::MetaModel::Foundation::Data_Types::Boolean::___initialize;

  $self;
}
      

=head2 C<__create>

Calls all <<create>> Methods for this Classifier and all Generalizations.

See also: C<___create>.

=cut
sub __create
{
  my ($self, @args) = @_;

  # $DB::single = 1;
  $self->UMMF::UML::MetaModel::Foundation::Data_Types::Boolean::___create(@args);

  $self;
}




#################################################################
# Attributes
#




#################################################################
# Association
#





# End of Class Boolean


=pod

=for html <hr/>

I<END OF DOCUMENT>

=cut

############################################################################

1; # is true!

############################################################################

### Keep these comments at end of file: kstephens@users.sourceforge.net 2003/04/06 ###
### Local Variables: ###
### mode:perl ###
### perl-indent-level:2 ###
### perl-continued-statement-offset:0 ###
### perl-brace-offset:0 ###
### perl-label-offset:0 ###
### End: ###

