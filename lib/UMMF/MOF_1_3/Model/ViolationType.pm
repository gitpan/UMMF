# -*- perl -*-
# DO NOT EDIT - This file is generated by UMMF; http://ummf.sourceforge.net 
# From template: $Id: Perl.txt,v 1.77 2006/05/14 01:40:03 kstephens Exp $

package UMMF::MOF_1_3::Model::ViolationType;

#use 5.6.1;
use strict;
use warnings;

#################################################################
# Version
#

our $VERSION = do { my @r = (q{1.3} =~ /\d+/g); sprintf "%d." . "%03d" x $#r, @r };


#################################################################
# Documentation
#

=head1 NAME

UMMF::MOF_1_3::Model::ViolationType -- 

=head1 VERSION

1.3

=head1 SYNOPSIS

=head1 DESCRIPTION 

=head1 USAGE

=head1 EXPORT

=head1 METATYPE

L<UMMF::UML_1_5::Foundation::Core::Class|UMMF::UML_1_5::Foundation::Core::Class>

=head1 SUPERCLASSES

L<UMMF::MOF_1_3::__ObjectBase|UMMF::MOF_1_3::__ObjectBase>




=head1 ATTRIBUTES


=head2 C<type> : UMMF::MOF_1_3::Model::String 


=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::Attribute|UMMF::UML_1_5::Foundation::Core::Attribute>

=item type = L<UMMF::MOF_1_3::Model::String|UMMF::MOF_1_3::Model::String>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = I<UNSPECIFIED>

=item container_type = C<Set::Object>

=back


=head2 C<elementInError> : UMMF::MOF_1_3::Model::Reflective::RefObject 


=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::Attribute|UMMF::UML_1_5::Foundation::Core::Attribute>

=item type = L<UMMF::MOF_1_3::Model::Reflective::RefObject|UMMF::MOF_1_3::Model::Reflective::RefObject>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = I<UNSPECIFIED>

=item container_type = C<Set::Object>

=back


=head2 C<valuesInError> : UMMF::MOF_1_3::Model::Reflective::NamedValueList 


=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::Attribute|UMMF::UML_1_5::Foundation::Core::Attribute>

=item type = L<UMMF::MOF_1_3::Model::Reflective::NamedValueList|UMMF::MOF_1_3::Model::Reflective::NamedValueList>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = I<UNSPECIFIED>

=item container_type = C<Set::Object>

=back


=head2 C<errorDescription> : UMMF::MOF_1_3::Model::String 


=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::Attribute|UMMF::UML_1_5::Foundation::Core::Attribute>

=item type = L<UMMF::MOF_1_3::Model::String|UMMF::MOF_1_3::Model::String>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = I<UNSPECIFIED>

=item container_type = C<Set::Object>

=back



=head1 ASSOCIATIONS

I<NO ASSOCIATIONS>


=head1 METHODS

=cut



#################################################################
# Dependencies
#





use Carp qw(croak confess);
use Set::Object 1.05;
use Class::Multimethods 1.70;
use Data::Dumper;
use Scalar::Util qw(weaken);
use UMMF::MOF_1_3::__ObjectBase qw(:__ummf_array);


#################################################################
# Generalizations
#

use base qw(


  UMMF::MOF_1_3::__ObjectBase

);


#################################################################
# Exports
#

our @EXPORT_OK = qw(
);
our %EXPORT_TAGS = ( 'all' => \@EXPORT_OK );





#################################################################
# Validation
#


=head2 C<__validate_type>

  UMMF::MOF_1_3::Model::ViolationType->__validate_type($value);

Returns true if C<$value> is a valid representation of L<UMMF::MOF_1_3::Model::ViolationType|UMMF::MOF_1_3::Model::ViolationType>.

=cut
sub __validate_type($$)
{
  my ($self, $x) = @_;

  no warnings;

  UNIVERSAL::isa($x, 'UMMF::MOF_1_3::Model::ViolationType')  ;
}


=head2 C<__typecheck>

  UMMF::MOF_1_3::Model::ViolationType->__typecheck($value, $msg);

Calls C<confess()> with C<$msg> if C<<UMMF::MOF_1_3::Model::ViolationType->__validate_type($value)>> is false.

=cut
sub __typecheck
{
  my ($self, $x, $msg) = @_;

  confess("typecheck: $msg: type '" . 'UMMF::MOF_1_3::Model::ViolationType' . ": value '$x'")
    unless __validate_type($self, $x);
}


=head2 C<isaViolationType>


Returns true if receiver is a L<UMMF::MOF_1_3::Model::ViolationType|UMMF::MOF_1_3::Model::ViolationType>.
Other receivers will return false.

=cut
sub isaViolationType { 1 }


=head2 C<isaModel__ViolationType>


Returns true if receiver is a L<UMMF::MOF_1_3::Model::ViolationType|UMMF::MOF_1_3::Model::ViolationType>.
Other receivers will return false.
This is the fully qualified version of the C<isaViolationType> method.

=cut
sub isaModel__ViolationType { 1 }


#################################################################
# Introspection
#

=head2 C<__model_name> 

  my $name = $obj_or_package->__model_name;

Returns the UML Model name (C<'Model::ViolationType'>) for an object or package of
this Classifier.

=cut
sub __model_name { 'Model::ViolationType' }



=head2 C<__isAbstract>

  $package->__isAbstract;

Returns C<0>.

=cut
sub __isAbstract { 0; }


my $__tangram_schema;
=head2 C<__tangram_schema>

  my $tangram_schema $obj_or_package->__tangram_schema

Returns a HASH ref that describes this Classifier for Tangram.

See L<UMMF::Export::Perl::Tangram|UMMF::Export::Perl::Tangram>

=cut
sub __tangram_schema
{
  my ($self) = @_;

  $__tangram_schema ||=
  {
   'classes' =>
   [
     'UMMF::MOF_1_3::Model::ViolationType' =>
     {
       'table' => 'Model__ViolationType',
       'abstract' => 0,
       'slots' => 
       { 
	 # Attributes
	 	       'type'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::MOF_1_3::Model::String',

                                             'col' => 'type', 

                                                                                                                   }
      ,
         	       'elementInError'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::MOF_1_3::Model::Reflective::RefObject',

                                             'col' => 'elementInError', 

                                                                                                                   }
      ,
         	       'valuesInError'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::MOF_1_3::Model::Reflective::NamedValueList',

                                             'col' => 'valuesInError', 

                                                                                                                   }
      ,
         	       'errorDescription'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::MOF_1_3::Model::String',

                                             'col' => 'errorDescription', 

                                                                                                                   }
      ,
         
	 # Associations
	        },
       'bases' => [  ],
       'sql' => {

       },
     },
   ],

   'sql' =>
   {
    # Note Tangram::Ref::get_exporter() has
    # "UPDATE $table SET $self->{col} = $refid WHERE id = $id",
    # The id_col is hard-coded, 
    # Thus id_col will not work.
    #'id_col' => '__sid',
    #'class_col' => '__stype',
   },
     # 'set_id' => sub { }
     # 'get_id' => sub { }

      
  };
}


#################################################################
# Class Attributes
#


            

#################################################################
# Class Associations
#


    

#################################################################
# Initialization
#


=head2 C<___initialize>

Initialize all Attributes and AssociationEnds in a instance of this Classifier.
Does B<not> initalize slots in its Generalizations.

See also: C<__initialize>.

=cut
sub ___initialize
{
  my ($self) = @_;

  # Attributes

    # Attribute type
  if ( exists $self->{'type'} ) {
    my $x = $self->{'type'};
    $self->{'type'} = undef;
        $self->set_type($x);
      } else {
      }
  
    # Attribute elementInError
  if ( exists $self->{'elementInError'} ) {
    my $x = $self->{'elementInError'};
    $self->{'elementInError'} = undef;
        $self->set_elementInError($x);
      } else {
      }
  
    # Attribute valuesInError
  if ( exists $self->{'valuesInError'} ) {
    my $x = $self->{'valuesInError'};
    $self->{'valuesInError'} = undef;
        $self->set_valuesInError($x);
      } else {
      }
  
    # Attribute errorDescription
  if ( exists $self->{'errorDescription'} ) {
    my $x = $self->{'errorDescription'};
    $self->{'errorDescription'} = undef;
        $self->set_errorDescription($x);
      } else {
      }
  


  # Associations


  $self;
}


my $__initialize_use;

=head2 C<__initialize>

Initialize all slots in this Classifier and all its Generalizations.

See also: C<___initialize>.

=cut
sub __initialize
{
  my ($self) = @_;

  # $DB::single = 1;

  unless ( ! $__initialize_use ) {
    $__initialize_use = 1;
  }

  $self->UMMF::MOF_1_3::Model::ViolationType::___initialize;

  $self;
}
      

=head2 C<__create>

Calls all <<create>> Methods for this Classifier and all Generalizations.

See also: C<___create>.

=cut
sub __create
{
  my ($self, @args) = @_;

  # $DB::single = 1;
  $self->UMMF::MOF_1_3::Model::ViolationType::___create(@args);

  $self;
}




#################################################################
# Attributes
#



=for html <hr/>

=cut

#################################################################
# Attribute type
# type = UMMF::MOF_1_3::Model::String
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = 

=head2 C<type>

  my $val = $obj->type;

Returns the L<UMMF::MOF_1_3::Model::String|UMMF::MOF_1_3::Model::String> value of Attribute C<type>.

=cut
sub type ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'type'};

  ;

  $val;
}


=head2 C<set_type>

  $obj->set_type($val);

Sets the value of Attribute C<type>.
C<$val> must be of type L<UMMF::MOF_1_3::Model::String|UMMF::MOF_1_3::Model::String> or C<undef>.
Returns C<$obj>.

=cut
sub set_type ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    ;
  }

    $self->{'type'} = $val
  ;

  ;

  $self;
}


=head2 C<count_type>

  $obj->count_type;

Returns the number of elements (0 or 1) in C<type>.

=cut
sub count_type ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'type'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute elementInError
# type = UMMF::MOF_1_3::Model::Reflective::RefObject
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = 

=head2 C<elementInError>

  my $val = $obj->elementInError;

Returns the L<UMMF::MOF_1_3::Model::Reflective::RefObject|UMMF::MOF_1_3::Model::Reflective::RefObject> value of Attribute C<elementInError>.

=cut
sub elementInError ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'elementInError'};

  ;

  $val;
}


=head2 C<set_elementInError>

  $obj->set_elementInError($val);

Sets the value of Attribute C<elementInError>.
C<$val> must be of type L<UMMF::MOF_1_3::Model::Reflective::RefObject|UMMF::MOF_1_3::Model::Reflective::RefObject> or C<undef>.
Returns C<$obj>.

=cut
sub set_elementInError ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    $self->__use('UMMF::MOF_1_3::Model::Reflective::RefObject')->__typecheck($val, "UMMF::MOF_1_3::Model::ViolationType.elementInError");
  }

    $self->{'elementInError'} = $val
  ;

  ;

  $self;
}


=head2 C<count_elementInError>

  $obj->count_elementInError;

Returns the number of elements (0 or 1) in C<elementInError>.

=cut
sub count_elementInError ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'elementInError'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute valuesInError
# type = UMMF::MOF_1_3::Model::Reflective::NamedValueList
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = 

=head2 C<valuesInError>

  my $val = $obj->valuesInError;

Returns the L<UMMF::MOF_1_3::Model::Reflective::NamedValueList|UMMF::MOF_1_3::Model::Reflective::NamedValueList> value of Attribute C<valuesInError>.

=cut
sub valuesInError ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'valuesInError'};

  ;

  $val;
}


=head2 C<set_valuesInError>

  $obj->set_valuesInError($val);

Sets the value of Attribute C<valuesInError>.
C<$val> must be of type L<UMMF::MOF_1_3::Model::Reflective::NamedValueList|UMMF::MOF_1_3::Model::Reflective::NamedValueList> or C<undef>.
Returns C<$obj>.

=cut
sub set_valuesInError ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    $self->__use('UMMF::MOF_1_3::Model::Reflective::NamedValueList')->__typecheck($val, "UMMF::MOF_1_3::Model::ViolationType.valuesInError");
  }

    $self->{'valuesInError'} = $val
  ;

  ;

  $self;
}


=head2 C<count_valuesInError>

  $obj->count_valuesInError;

Returns the number of elements (0 or 1) in C<valuesInError>.

=cut
sub count_valuesInError ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'valuesInError'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute errorDescription
# type = UMMF::MOF_1_3::Model::String
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = 

=head2 C<errorDescription>

  my $val = $obj->errorDescription;

Returns the L<UMMF::MOF_1_3::Model::String|UMMF::MOF_1_3::Model::String> value of Attribute C<errorDescription>.

=cut
sub errorDescription ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'errorDescription'};

  ;

  $val;
}


=head2 C<set_errorDescription>

  $obj->set_errorDescription($val);

Sets the value of Attribute C<errorDescription>.
C<$val> must be of type L<UMMF::MOF_1_3::Model::String|UMMF::MOF_1_3::Model::String> or C<undef>.
Returns C<$obj>.

=cut
sub set_errorDescription ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    ;
  }

    $self->{'errorDescription'} = $val
  ;

  ;

  $self;
}


=head2 C<count_errorDescription>

  $obj->count_errorDescription;

Returns the number of elements (0 or 1) in C<errorDescription>.

=cut
sub count_errorDescription ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'errorDescription'};

  ;

  defined $val ? 1 : 0;
}




#################################################################
# Association
#





# End of Class ViolationType


=pod

=for html <hr/>

I<END OF DOCUMENT>

=cut

############################################################################

1; # is true!

############################################################################

### Keep these comments at end of file: kstephens@users.sourceforge.net 2003/04/06 ###
### Local Variables: ###
### mode:perl ###
### perl-indent-level:2 ###
### perl-continued-statement-offset:0 ###
### perl-brace-offset:0 ###
### perl-label-offset:0 ###
### End: ###

