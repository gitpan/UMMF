# -*- perl -*-
# DO NOT EDIT - This file is generated by UMMF; http://ummf.sourceforge.net 
# From template: $Id: Perl.txt,v 1.77 2006/05/14 01:40:03 kstephens Exp $

package UMMF::MOF_1_4_1::Model::StructureField;

#use 5.6.1;
use strict;
use warnings;

#################################################################
# Version
#

our $VERSION = do { my @r = (q{1.4.1} =~ /\d+/g); sprintf "%d." . "%03d" x $#r, @r };


#################################################################
# Documentation
#

=head1 NAME

UMMF::MOF_1_4_1::Model::StructureField -- 

=head1 VERSION

1.4.1

=head1 SYNOPSIS

=head1 DESCRIPTION 

=head1 USAGE

=head1 EXPORT

=head1 METATYPE

L<UMMF::UML_1_5::Foundation::Core::Class|UMMF::UML_1_5::Foundation::Core::Class>

=head1 SUPERCLASSES

L<UMMF::MOF_1_4_1::Model::TypedElement|UMMF::MOF_1_4_1::Model::TypedElement>




=head1 ATTRIBUTES

I<NO ATTRIBUTES>


=head1 ASSOCIATIONS

I<NO ASSOCIATIONS>


=head1 METHODS

=cut



#################################################################
# Dependencies
#





use Carp qw(croak confess);
use Set::Object 1.05;
use Class::Multimethods 1.70;
use Data::Dumper;
use Scalar::Util qw(weaken);
use UMMF::MOF_1_4_1::__ObjectBase qw(:__ummf_array);


#################################################################
# Generalizations
#

use base qw(
  UMMF::MOF_1_4_1::Model::TypedElement



);


#################################################################
# Exports
#

our @EXPORT_OK = qw(
);
our %EXPORT_TAGS = ( 'all' => \@EXPORT_OK );





#################################################################
# Validation
#


=head2 C<__validate_type>

  UMMF::MOF_1_4_1::Model::StructureField->__validate_type($value);

Returns true if C<$value> is a valid representation of L<UMMF::MOF_1_4_1::Model::StructureField|UMMF::MOF_1_4_1::Model::StructureField>.

=cut
sub __validate_type($$)
{
  my ($self, $x) = @_;

  no warnings;

  UNIVERSAL::isa($x, 'UMMF::MOF_1_4_1::Model::StructureField')  ;
}


=head2 C<__typecheck>

  UMMF::MOF_1_4_1::Model::StructureField->__typecheck($value, $msg);

Calls C<confess()> with C<$msg> if C<<UMMF::MOF_1_4_1::Model::StructureField->__validate_type($value)>> is false.

=cut
sub __typecheck
{
  my ($self, $x, $msg) = @_;

  confess("typecheck: $msg: type '" . 'UMMF::MOF_1_4_1::Model::StructureField' . ": value '$x'")
    unless __validate_type($self, $x);
}


=head2 C<isaStructureField>


Returns true if receiver is a L<UMMF::MOF_1_4_1::Model::StructureField|UMMF::MOF_1_4_1::Model::StructureField>.
Other receivers will return false.

=cut
sub isaStructureField { 1 }


=head2 C<isaModel__StructureField>


Returns true if receiver is a L<UMMF::MOF_1_4_1::Model::StructureField|UMMF::MOF_1_4_1::Model::StructureField>.
Other receivers will return false.
This is the fully qualified version of the C<isaStructureField> method.

=cut
sub isaModel__StructureField { 1 }


#################################################################
# Introspection
#

=head2 C<__model_name> 

  my $name = $obj_or_package->__model_name;

Returns the UML Model name (C<'Model::StructureField'>) for an object or package of
this Classifier.

=cut
sub __model_name { 'Model::StructureField' }



=head2 C<__isAbstract>

  $package->__isAbstract;

Returns C<0>.

=cut
sub __isAbstract { 0; }


my $__tangram_schema;
=head2 C<__tangram_schema>

  my $tangram_schema $obj_or_package->__tangram_schema

Returns a HASH ref that describes this Classifier for Tangram.

See L<UMMF::Export::Perl::Tangram|UMMF::Export::Perl::Tangram>

=cut
sub __tangram_schema
{
  my ($self) = @_;

  $__tangram_schema ||=
  {
   'classes' =>
   [
     'UMMF::MOF_1_4_1::Model::StructureField' =>
     {
       'table' => 'Model__StructureField',
       'abstract' => 0,
       'slots' => 
       { 
	 # Attributes
	 
	 # Associations
	        },
       'bases' => [  'UMMF::MOF_1_4_1::Model::TypedElement',  ],
       'sql' => {

       },
     },
   ],

   'sql' =>
   {
    # Note Tangram::Ref::get_exporter() has
    # "UPDATE $table SET $self->{col} = $refid WHERE id = $id",
    # The id_col is hard-coded, 
    # Thus id_col will not work.
    #'id_col' => '__sid',
    #'class_col' => '__stype',
   },
     # 'set_id' => sub { }
     # 'get_id' => sub { }

      
  };
}


#################################################################
# Class Attributes
#


    

#################################################################
# Class Associations
#


    

#################################################################
# Initialization
#


=head2 C<___initialize>

Initialize all Attributes and AssociationEnds in a instance of this Classifier.
Does B<not> initalize slots in its Generalizations.

See also: C<__initialize>.

=cut
sub ___initialize
{
  my ($self) = @_;

  # Attributes



  # Associations


  $self;
}


my $__initialize_use;

=head2 C<__initialize>

Initialize all slots in this Classifier and all its Generalizations.

See also: C<___initialize>.

=cut
sub __initialize
{
  my ($self) = @_;

  # $DB::single = 1;

  unless ( ! $__initialize_use ) {
    $__initialize_use = 1;
    $self->__use('UMMF::MOF_1_4_1::Model::ModelElement');
    $self->__use('UMMF::MOF_1_4_1::Model::TypedElement');
  }

  $self->UMMF::MOF_1_4_1::Model::StructureField::___initialize;
  $self->UMMF::MOF_1_4_1::Model::ModelElement::___initialize;
  $self->UMMF::MOF_1_4_1::Model::TypedElement::___initialize;

  $self;
}
      

=head2 C<__create>

Calls all <<create>> Methods for this Classifier and all Generalizations.

See also: C<___create>.

=cut
sub __create
{
  my ($self, @args) = @_;

  # $DB::single = 1;
  $self->UMMF::MOF_1_4_1::Model::StructureField::___create(@args);
  $self->UMMF::MOF_1_4_1::Model::ModelElement::___create();
  $self->UMMF::MOF_1_4_1::Model::TypedElement::___create();

  $self;
}




#################################################################
# Attributes
#




#################################################################
# Association
#





# End of Class StructureField


=pod

=for html <hr/>

I<END OF DOCUMENT>

=cut

############################################################################

1; # is true!

############################################################################

### Keep these comments at end of file: kstephens@users.sourceforge.net 2003/04/06 ###
### Local Variables: ###
### mode:perl ###
### perl-indent-level:2 ###
### perl-continued-statement-offset:0 ###
### perl-brace-offset:0 ###
### perl-label-offset:0 ###
### End: ###

