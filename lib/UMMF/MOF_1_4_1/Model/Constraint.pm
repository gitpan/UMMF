# -*- perl -*-
# DO NOT EDIT - This file is generated by UMMF; http://ummf.sourceforge.net 
# From template: $Id: Perl.txt,v 1.77 2006/05/14 01:40:03 kstephens Exp $

package UMMF::MOF_1_4_1::Model::Constraint;

#use 5.6.1;
use strict;
use warnings;

#################################################################
# Version
#

our $VERSION = do { my @r = (q{1.4.1} =~ /\d+/g); sprintf "%d." . "%03d" x $#r, @r };


#################################################################
# Documentation
#

=head1 NAME

UMMF::MOF_1_4_1::Model::Constraint -- 

=head1 VERSION

1.4.1

=head1 SYNOPSIS

=head1 DESCRIPTION 

=head1 USAGE

=head1 EXPORT

=head1 METATYPE

L<UMMF::UML_1_5::Foundation::Core::Class|UMMF::UML_1_5::Foundation::Core::Class>

=head1 SUPERCLASSES

L<UMMF::MOF_1_4_1::Model::ModelElement|UMMF::MOF_1_4_1::Model::ModelElement>




=head1 ATTRIBUTES


=head2 C<expression> : UMMF::MOF_1_4_1::Model::String 


=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::Attribute|UMMF::UML_1_5::Foundation::Core::Attribute>

=item type = L<UMMF::MOF_1_4_1::Model::String|UMMF::MOF_1_4_1::Model::String>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = I<UNSPECIFIED>

=item container_type = C<Set::Object>

=back


=head2 C<language> : UMMF::MOF_1_4_1::Model::String 


=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::Attribute|UMMF::UML_1_5::Foundation::Core::Attribute>

=item type = L<UMMF::MOF_1_4_1::Model::String|UMMF::MOF_1_4_1::Model::String>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = I<UNSPECIFIED>

=item container_type = C<Set::Object>

=back


=head2 C<evaluationPolicy> : UMMF::MOF_1_4_1::Model::EvaluationKind 


=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::Attribute|UMMF::UML_1_5::Foundation::Core::Attribute>

=item type = L<UMMF::MOF_1_4_1::Model::EvaluationKind|UMMF::MOF_1_4_1::Model::EvaluationKind>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = I<UNSPECIFIED>

=item container_type = C<Set::Object>

=back



=head1 ASSOCIATIONS


=head2 C<constraint> : I<THIS> C<0..*> E<lt>---E<gt>  C<constrainedElement> : UMMF::MOF_1_4_1::Model::ModelElement C<1..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::MOF_1_4_1::Model::ModelElement|UMMF::MOF_1_4_1::Model::ModelElement>

=item multiplicity = C<1..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back



=head1 METHODS

=cut



#################################################################
# Dependencies
#





use Carp qw(croak confess);
use Set::Object 1.05;
use Class::Multimethods 1.70;
use Data::Dumper;
use Scalar::Util qw(weaken);
use UMMF::MOF_1_4_1::__ObjectBase qw(:__ummf_array);


#################################################################
# Generalizations
#

use base qw(
  UMMF::MOF_1_4_1::Model::ModelElement



);


#################################################################
# Exports
#

our @EXPORT_OK = qw(
);
our %EXPORT_TAGS = ( 'all' => \@EXPORT_OK );





#################################################################
# Validation
#


=head2 C<__validate_type>

  UMMF::MOF_1_4_1::Model::Constraint->__validate_type($value);

Returns true if C<$value> is a valid representation of L<UMMF::MOF_1_4_1::Model::Constraint|UMMF::MOF_1_4_1::Model::Constraint>.

=cut
sub __validate_type($$)
{
  my ($self, $x) = @_;

  no warnings;

  UNIVERSAL::isa($x, 'UMMF::MOF_1_4_1::Model::Constraint')  ;
}


=head2 C<__typecheck>

  UMMF::MOF_1_4_1::Model::Constraint->__typecheck($value, $msg);

Calls C<confess()> with C<$msg> if C<<UMMF::MOF_1_4_1::Model::Constraint->__validate_type($value)>> is false.

=cut
sub __typecheck
{
  my ($self, $x, $msg) = @_;

  confess("typecheck: $msg: type '" . 'UMMF::MOF_1_4_1::Model::Constraint' . ": value '$x'")
    unless __validate_type($self, $x);
}


=head2 C<isaConstraint>


Returns true if receiver is a L<UMMF::MOF_1_4_1::Model::Constraint|UMMF::MOF_1_4_1::Model::Constraint>.
Other receivers will return false.

=cut
sub isaConstraint { 1 }


=head2 C<isaModel__Constraint>


Returns true if receiver is a L<UMMF::MOF_1_4_1::Model::Constraint|UMMF::MOF_1_4_1::Model::Constraint>.
Other receivers will return false.
This is the fully qualified version of the C<isaConstraint> method.

=cut
sub isaModel__Constraint { 1 }


#################################################################
# Introspection
#

=head2 C<__model_name> 

  my $name = $obj_or_package->__model_name;

Returns the UML Model name (C<'Model::Constraint'>) for an object or package of
this Classifier.

=cut
sub __model_name { 'Model::Constraint' }



=head2 C<__isAbstract>

  $package->__isAbstract;

Returns C<0>.

=cut
sub __isAbstract { 0; }


my $__tangram_schema;
=head2 C<__tangram_schema>

  my $tangram_schema $obj_or_package->__tangram_schema

Returns a HASH ref that describes this Classifier for Tangram.

See L<UMMF::Export::Perl::Tangram|UMMF::Export::Perl::Tangram>

=cut
sub __tangram_schema
{
  my ($self) = @_;

  $__tangram_schema ||=
  {
   'classes' =>
   [
     'UMMF::MOF_1_4_1::Model::Constraint' =>
     {
       'table' => 'Model__Constraint',
       'abstract' => 0,
       'slots' => 
       { 
	 # Attributes
	 	       'expression'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::MOF_1_4_1::Model::String',

                                             'col' => 'expression', 

                                                                                                                   }
      ,
         	       'language'
       => {
	 'type_impl' => 'ref',
         'class' => 'UMMF::MOF_1_4_1::Model::String',

                                             'col' => 'language', 

                                                                                                                   }
      ,
         	       'evaluationPolicy'
       => {
	 'type_impl' => 'string',
                                             'col' => 'evaluationPolicy', 

                                                                                                                   }
      ,
         
	 # Associations
	 	 	       'constrainedElement'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::MOF_1_4_1::Model::ModelElement',

                           'table' => 'Model__Constrains', 

                                                      'item' => 'constrainedElement', 

                  'coll' => 'constraint',

                                                                               }
      ,
                         },
       'bases' => [  'UMMF::MOF_1_4_1::Model::ModelElement',  ],
       'sql' => {

       },
     },
   ],

   'sql' =>
   {
    # Note Tangram::Ref::get_exporter() has
    # "UPDATE $table SET $self->{col} = $refid WHERE id = $id",
    # The id_col is hard-coded, 
    # Thus id_col will not work.
    #'id_col' => '__sid',
    #'class_col' => '__stype',
   },
     # 'set_id' => sub { }
     # 'get_id' => sub { }

      
  };
}


#################################################################
# Class Attributes
#


          

#################################################################
# Class Associations
#


    

#################################################################
# Initialization
#


=head2 C<___initialize>

Initialize all Attributes and AssociationEnds in a instance of this Classifier.
Does B<not> initalize slots in its Generalizations.

See also: C<__initialize>.

=cut
sub ___initialize
{
  my ($self) = @_;

  # Attributes

    # Attribute expression
  if ( exists $self->{'expression'} ) {
    my $x = $self->{'expression'};
    $self->{'expression'} = undef;
        $self->set_expression($x);
      } else {
      }
  
    # Attribute language
  if ( exists $self->{'language'} ) {
    my $x = $self->{'language'};
    $self->{'language'} = undef;
        $self->set_language($x);
      } else {
      }
  
    # Attribute evaluationPolicy
  if ( exists $self->{'evaluationPolicy'} ) {
    my $x = $self->{'evaluationPolicy'};
    $self->{'evaluationPolicy'} = undef;
        $self->set_evaluationPolicy($x);
      } else {
      }
  


  # Associations

  # AssociationEnd 
  #  constraint 0..*
  #  <--> 
  #  constrainedElement 1..* UMMF::MOF_1_4_1::Model::ModelElement.
    if ( defined $self->{'constrainedElement'} ) {
    my $x = $self->{'constrainedElement'};
        $self->{'constrainedElement'} = Set::Object->new();
        $self->set_constrainedElement(@$x);
  }
  

  $self;
}


my $__initialize_use;

=head2 C<__initialize>

Initialize all slots in this Classifier and all its Generalizations.

See also: C<___initialize>.

=cut
sub __initialize
{
  my ($self) = @_;

  # $DB::single = 1;

  unless ( ! $__initialize_use ) {
    $__initialize_use = 1;
    $self->__use('UMMF::MOF_1_4_1::Model::ModelElement');
  }

  $self->UMMF::MOF_1_4_1::Model::Constraint::___initialize;
  $self->UMMF::MOF_1_4_1::Model::ModelElement::___initialize;

  $self;
}
      

=head2 C<__create>

Calls all <<create>> Methods for this Classifier and all Generalizations.

See also: C<___create>.

=cut
sub __create
{
  my ($self, @args) = @_;

  # $DB::single = 1;
  $self->UMMF::MOF_1_4_1::Model::Constraint::___create(@args);
  $self->UMMF::MOF_1_4_1::Model::ModelElement::___create();

  $self;
}




#################################################################
# Attributes
#



=for html <hr/>

=cut

#################################################################
# Attribute expression
# type = UMMF::MOF_1_4_1::Model::String
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = 

=head2 C<expression>

  my $val = $obj->expression;

Returns the L<UMMF::MOF_1_4_1::Model::String|UMMF::MOF_1_4_1::Model::String> value of Attribute C<expression>.

=cut
sub expression ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'expression'};

  ;

  $val;
}


=head2 C<set_expression>

  $obj->set_expression($val);

Sets the value of Attribute C<expression>.
C<$val> must be of type L<UMMF::MOF_1_4_1::Model::String|UMMF::MOF_1_4_1::Model::String> or C<undef>.
Returns C<$obj>.

=cut
sub set_expression ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    ;
  }

    $self->{'expression'} = $val
  ;

  ;

  $self;
}


=head2 C<count_expression>

  $obj->count_expression;

Returns the number of elements (0 or 1) in C<expression>.

=cut
sub count_expression ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'expression'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute language
# type = UMMF::MOF_1_4_1::Model::String
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = 

=head2 C<language>

  my $val = $obj->language;

Returns the L<UMMF::MOF_1_4_1::Model::String|UMMF::MOF_1_4_1::Model::String> value of Attribute C<language>.

=cut
sub language ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'language'};

  ;

  $val;
}


=head2 C<set_language>

  $obj->set_language($val);

Sets the value of Attribute C<language>.
C<$val> must be of type L<UMMF::MOF_1_4_1::Model::String|UMMF::MOF_1_4_1::Model::String> or C<undef>.
Returns C<$obj>.

=cut
sub set_language ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    ;
  }

    $self->{'language'} = $val
  ;

  ;

  $self;
}


=head2 C<count_language>

  $obj->count_language;

Returns the number of elements (0 or 1) in C<language>.

=cut
sub count_language ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'language'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute evaluationPolicy
# type = UMMF::MOF_1_4_1::Model::EvaluationKind
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = 

=head2 C<evaluationPolicy>

  my $val = $obj->evaluationPolicy;

Returns the L<UMMF::MOF_1_4_1::Model::EvaluationKind|UMMF::MOF_1_4_1::Model::EvaluationKind> value of Attribute C<evaluationPolicy>.

=cut
sub evaluationPolicy ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'evaluationPolicy'};

  ;

  $val;
}


=head2 C<set_evaluationPolicy>

  $obj->set_evaluationPolicy($val);

Sets the value of Attribute C<evaluationPolicy>.
C<$val> must be of type L<UMMF::MOF_1_4_1::Model::EvaluationKind|UMMF::MOF_1_4_1::Model::EvaluationKind> or C<undef>.
Returns C<$obj>.

=cut
sub set_evaluationPolicy ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    $self->__use('UMMF::MOF_1_4_1::Model::EvaluationKind')->__typecheck($val, "UMMF::MOF_1_4_1::Model::Constraint.evaluationPolicy");
  }

    $self->{'evaluationPolicy'} = $val
  ;

  ;

  $self;
}


=head2 C<count_evaluationPolicy>

  $obj->count_evaluationPolicy;

Returns the number of elements (0 or 1) in C<evaluationPolicy>.

=cut
sub count_evaluationPolicy ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'evaluationPolicy'};

  ;

  defined $val ? 1 : 0;
}




#################################################################
# Association
#


=for html <hr/>

=cut

#################################################################
# AssociationEnd constraint <---> constrainedElement
# type = UMMF::MOF_1_4_1::Model::ModelElement
# multiplicity = 1..*
# ordering = 

=head2 C<constrainedElement>

  my @val = $obj->constrainedElement;
  my $ary_val = $obj->constrainedElement;

Returns the AssociationEnd C<constrainedElement> values of type L<UMMF::MOF_1_4_1::Model::ModelElement|UMMF::MOF_1_4_1::Model::ModelElement>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub constrainedElement ($)
{
  my ($self) = @_;

    my $x = $self->{'constrainedElement'};

  # confess("Container for constrainedElement $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_constrainedElement>

  $obj->set_constrainedElement(@val);

Sets the AssociationEnd C<constrainedElement> value.
Elements of C<@val> must of type L<UMMF::MOF_1_4_1::Model::ModelElement|UMMF::MOF_1_4_1::Model::ModelElement>.
Returns C<$obj>.

=cut
sub set_constrainedElement ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_constrainedElement;
  $self->add_constrainedElement(@val);
}


=head2 C<add_constrainedElement>

  $obj->add_constrainedElement(@val);

Adds AssociationEnd C<constrainedElement> values.
Elements of C<@val> must of type L<UMMF::MOF_1_4_1::Model::ModelElement|UMMF::MOF_1_4_1::Model::ModelElement>.
Returns C<$obj>.

=cut
sub add_constrainedElement ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'constrainedElement'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::MOF_1_4_1::Model::ModelElement')->__typecheck($val, "UMMF::MOF_1_4_1::Model::Constraint.constrainedElement");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_constraint($self) if $old;
    $val->add_constraint($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_constrainedElement>

  $obj->remove_constrainedElement(@val);

Removes the AssociationEnd C<constrainedElement> values C<@val>.
Elements of C<@val> must of type L<UMMF::MOF_1_4_1::Model::ModelElement|UMMF::MOF_1_4_1::Model::ModelElement>.
Returns C<$obj>.

=cut
sub remove_constrainedElement ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'constrainedElement'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::MOF_1_4_1::Model::ModelElement')->__typecheck($val, "UMMF::MOF_1_4_1::Model::Constraint.constrainedElement");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_constraint($self) if $old;
    $val->add_constraint($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_constrainedElement>

  $obj->clear_constrainedElement;

Clears the AssociationEnd C<constrainedElement> links to L<UMMF::MOF_1_4_1::Model::ModelElement|UMMF::MOF_1_4_1::Model::ModelElement>.
Returns C<$obj>.

=cut
sub clear_constrainedElement ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'constrainedElement'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'constrainedElement'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_constraint($self) if $old;
    $val->add_constraint($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_constrainedElement>

  $obj->count_constrainedElement;

Returns the number of elements associated with C<constrainedElement>.

=cut
sub count_constrainedElement ($)
{
  my ($self) = @_;

  my $x = $self->{'constrainedElement'};

    defined $x ? $x->size : 0;
  }







# End of Class Constraint


=pod

=for html <hr/>

I<END OF DOCUMENT>

=cut

############################################################################

1; # is true!

############################################################################

### Keep these comments at end of file: kstephens@users.sourceforge.net 2003/04/06 ###
### Local Variables: ###
### mode:perl ###
### perl-indent-level:2 ###
### perl-continued-statement-offset:0 ###
### perl-brace-offset:0 ###
### perl-label-offset:0 ###
### End: ###

