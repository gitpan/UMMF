# -*- perl -*-
# DO NOT EDIT - This file is generated by UMMF; http://ummf.sourceforge.net 
# From template: $Id: Perl.txt,v 1.77 2006/05/14 01:40:03 kstephens Exp $

package UMMF::MOF_1_4_1::Model::GeneralizableElement;

#use 5.6.1;
use strict;
use warnings;

#################################################################
# Version
#

our $VERSION = do { my @r = (q{1.4.1} =~ /\d+/g); sprintf "%d." . "%03d" x $#r, @r };


#################################################################
# Documentation
#

=head1 NAME

UMMF::MOF_1_4_1::Model::GeneralizableElement -- 

=head1 VERSION

1.4.1

=head1 SYNOPSIS

=head1 DESCRIPTION 

=head1 USAGE

=head1 EXPORT

=head1 METATYPE

L<UMMF::UML_1_5::Foundation::Core::Class|UMMF::UML_1_5::Foundation::Core::Class>

=head1 SUPERCLASSES

L<UMMF::MOF_1_4_1::Model::Namespace|UMMF::MOF_1_4_1::Model::Namespace>




=head1 ATTRIBUTES


=head2 C<isRoot> : UMMF::MOF_1_4_1::Model::Boolean 


=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::Attribute|UMMF::UML_1_5::Foundation::Core::Attribute>

=item type = L<UMMF::MOF_1_4_1::Model::Boolean|UMMF::MOF_1_4_1::Model::Boolean>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = I<UNSPECIFIED>

=item container_type = C<Set::Object>

=back


=head2 C<isLeaf> : UMMF::MOF_1_4_1::Model::Boolean 


=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::Attribute|UMMF::UML_1_5::Foundation::Core::Attribute>

=item type = L<UMMF::MOF_1_4_1::Model::Boolean|UMMF::MOF_1_4_1::Model::Boolean>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = I<UNSPECIFIED>

=item container_type = C<Set::Object>

=back


=head2 C<isAbstract> : UMMF::MOF_1_4_1::Model::Boolean 


=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::Attribute|UMMF::UML_1_5::Foundation::Core::Attribute>

=item type = L<UMMF::MOF_1_4_1::Model::Boolean|UMMF::MOF_1_4_1::Model::Boolean>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = I<UNSPECIFIED>

=item container_type = C<Set::Object>

=back


=head2 C<visibility> : UMMF::MOF_1_4_1::Model::VisibilityKind 


=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::Attribute|UMMF::UML_1_5::Foundation::Core::Attribute>

=item type = L<UMMF::MOF_1_4_1::Model::VisibilityKind|UMMF::MOF_1_4_1::Model::VisibilityKind>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = I<UNSPECIFIED>

=item container_type = C<Set::Object>

=back



=head1 ASSOCIATIONS


=head2 C<supertype> : I<THIS> C<0..*> E<lt>---E<gt>  C<subtype> : UMMF::MOF_1_4_1::Model::GeneralizableElement C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::MOF_1_4_1::Model::GeneralizableElement|UMMF::MOF_1_4_1::Model::GeneralizableElement>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<subtype> : I<THIS> C<0..*> E<lt>---E<gt>  C<supertype> : UMMF::MOF_1_4_1::Model::GeneralizableElement C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::MOF_1_4_1::Model::GeneralizableElement|UMMF::MOF_1_4_1::Model::GeneralizableElement>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<ordered>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<ARRAY>

=back



=head1 METHODS

=cut



#################################################################
# Dependencies
#





use Carp qw(croak confess);
use Set::Object 1.05;
use Class::Multimethods 1.70;
use Data::Dumper;
use Scalar::Util qw(weaken);
use UMMF::MOF_1_4_1::__ObjectBase qw(:__ummf_array);


#################################################################
# Generalizations
#

use base qw(
  UMMF::MOF_1_4_1::Model::Namespace



);


#################################################################
# Exports
#

our @EXPORT_OK = qw(
);
our %EXPORT_TAGS = ( 'all' => \@EXPORT_OK );





#################################################################
# Validation
#


=head2 C<__validate_type>

  UMMF::MOF_1_4_1::Model::GeneralizableElement->__validate_type($value);

Returns true if C<$value> is a valid representation of L<UMMF::MOF_1_4_1::Model::GeneralizableElement|UMMF::MOF_1_4_1::Model::GeneralizableElement>.

=cut
sub __validate_type($$)
{
  my ($self, $x) = @_;

  no warnings;

  UNIVERSAL::isa($x, 'UMMF::MOF_1_4_1::Model::GeneralizableElement')  ;
}


=head2 C<__typecheck>

  UMMF::MOF_1_4_1::Model::GeneralizableElement->__typecheck($value, $msg);

Calls C<confess()> with C<$msg> if C<<UMMF::MOF_1_4_1::Model::GeneralizableElement->__validate_type($value)>> is false.

=cut
sub __typecheck
{
  my ($self, $x, $msg) = @_;

  confess("typecheck: $msg: type '" . 'UMMF::MOF_1_4_1::Model::GeneralizableElement' . ": value '$x'")
    unless __validate_type($self, $x);
}


=head2 C<isaGeneralizableElement>


Returns true if receiver is a L<UMMF::MOF_1_4_1::Model::GeneralizableElement|UMMF::MOF_1_4_1::Model::GeneralizableElement>.
Other receivers will return false.

=cut
sub isaGeneralizableElement { 1 }


=head2 C<isaModel__GeneralizableElement>


Returns true if receiver is a L<UMMF::MOF_1_4_1::Model::GeneralizableElement|UMMF::MOF_1_4_1::Model::GeneralizableElement>.
Other receivers will return false.
This is the fully qualified version of the C<isaGeneralizableElement> method.

=cut
sub isaModel__GeneralizableElement { 1 }


#################################################################
# Introspection
#

=head2 C<__model_name> 

  my $name = $obj_or_package->__model_name;

Returns the UML Model name (C<'Model::GeneralizableElement'>) for an object or package of
this Classifier.

=cut
sub __model_name { 'Model::GeneralizableElement' }



=head2 C<__isAbstract>

  $package->__isAbstract;

Returns C<1>.

=cut
sub __isAbstract { 1; }


my $__tangram_schema;
=head2 C<__tangram_schema>

  my $tangram_schema $obj_or_package->__tangram_schema

Returns a HASH ref that describes this Classifier for Tangram.

See L<UMMF::Export::Perl::Tangram|UMMF::Export::Perl::Tangram>

=cut
sub __tangram_schema
{
  my ($self) = @_;

  $__tangram_schema ||=
  {
   'classes' =>
   [
     'UMMF::MOF_1_4_1::Model::GeneralizableElement' =>
     {
       'table' => 'Model__GeneralizableElement',
       'abstract' => 1,
       'slots' => 
       { 
	 # Attributes
	 	       'isRoot'
       => {
	 'type_impl' => 'string',
                                             'col' => 'isRoot', 

                                                                                                                   }
      ,
         	       'isLeaf'
       => {
	 'type_impl' => 'string',
                                             'col' => 'isLeaf', 

                                                                                                                   }
      ,
         	       'isAbstract'
       => {
	 'type_impl' => 'string',
                                             'col' => 'isAbstract', 

                                                                                                                   }
      ,
         	       'visibility'
       => {
	 'type_impl' => 'string',
                                             'col' => 'visibility', 

                                                                                                                   }
      ,
         
	 # Associations
	 	 	       'subtype'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::MOF_1_4_1::Model::GeneralizableElement',

                           'table' => 'Model__GeneralizableElement__Generalizes', 

                                                      'item' => 'subtype', 

                  'coll' => 'supertype',

                                                                               }
      ,
                  	 	       'supertype'
       => {
	 'type_impl' => 'array',
         'class' => 'UMMF::MOF_1_4_1::Model::GeneralizableElement',

                           'table' => 'Model__GeneralizableElement__Generalizes', 

                                                      'item' => 'supertype', 

                  'coll' => 'subtype',

                  'slot' => 'supertype_i', 

                                                                      }
      ,
                         },
       'bases' => [  'UMMF::MOF_1_4_1::Model::Namespace',  ],
       'sql' => {

       },
     },
   ],

   'sql' =>
   {
    # Note Tangram::Ref::get_exporter() has
    # "UPDATE $table SET $self->{col} = $refid WHERE id = $id",
    # The id_col is hard-coded, 
    # Thus id_col will not work.
    #'id_col' => '__sid',
    #'class_col' => '__stype',
   },
     # 'set_id' => sub { }
     # 'get_id' => sub { }

      
  };
}


#################################################################
# Class Attributes
#


            

#################################################################
# Class Associations
#


    

#################################################################
# Initialization
#


=head2 C<___initialize>

Initialize all Attributes and AssociationEnds in a instance of this Classifier.
Does B<not> initalize slots in its Generalizations.

See also: C<__initialize>.

=cut
sub ___initialize
{
  my ($self) = @_;

  # Attributes

    # Attribute isRoot
  if ( exists $self->{'isRoot'} ) {
    my $x = $self->{'isRoot'};
    $self->{'isRoot'} = undef;
        $self->set_isRoot($x);
      } else {
      }
  
    # Attribute isLeaf
  if ( exists $self->{'isLeaf'} ) {
    my $x = $self->{'isLeaf'};
    $self->{'isLeaf'} = undef;
        $self->set_isLeaf($x);
      } else {
      }
  
    # Attribute isAbstract
  if ( exists $self->{'isAbstract'} ) {
    my $x = $self->{'isAbstract'};
    $self->{'isAbstract'} = undef;
        $self->set_isAbstract($x);
      } else {
      }
  
    # Attribute visibility
  if ( exists $self->{'visibility'} ) {
    my $x = $self->{'visibility'};
    $self->{'visibility'} = undef;
        $self->set_visibility($x);
      } else {
      }
  


  # Associations

  # AssociationEnd 
  #  supertype 0..*
  #  <--> 
  #  subtype 0..* UMMF::MOF_1_4_1::Model::GeneralizableElement.
    if ( defined $self->{'subtype'} ) {
    my $x = $self->{'subtype'};
        $self->{'subtype'} = Set::Object->new();
        $self->set_subtype(@$x);
  }
  
  # AssociationEnd 
  #  subtype 0..*
  #  <--> 
  #  supertype 0..* UMMF::MOF_1_4_1::Model::GeneralizableElement.
    if ( defined $self->{'supertype'} ) {
    my $x = $self->{'supertype'};
        $self->{'supertype'} = [ ];
        $self->set_supertype(@$x);
  }
  

  $self;
}


my $__initialize_use;

=head2 C<__initialize>

Initialize all slots in this Classifier and all its Generalizations.

See also: C<___initialize>.

=cut
sub __initialize
{
  my ($self) = @_;

  # $DB::single = 1;

  unless ( ! $__initialize_use ) {
    $__initialize_use = 1;
    $self->__use('UMMF::MOF_1_4_1::Model::ModelElement');
    $self->__use('UMMF::MOF_1_4_1::Model::Namespace');
  }

  $self->UMMF::MOF_1_4_1::Model::GeneralizableElement::___initialize;
  $self->UMMF::MOF_1_4_1::Model::ModelElement::___initialize;
  $self->UMMF::MOF_1_4_1::Model::Namespace::___initialize;

  $self;
}
      

=head2 C<__create>

Calls all <<create>> Methods for this Classifier and all Generalizations.

See also: C<___create>.

=cut
sub __create
{
  my ($self, @args) = @_;

  # $DB::single = 1;
  $self->UMMF::MOF_1_4_1::Model::GeneralizableElement::___create(@args);
  $self->UMMF::MOF_1_4_1::Model::ModelElement::___create();
  $self->UMMF::MOF_1_4_1::Model::Namespace::___create();

  $self;
}




#################################################################
# Attributes
#



=for html <hr/>

=cut

#################################################################
# Attribute isRoot
# type = UMMF::MOF_1_4_1::Model::Boolean
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = 

=head2 C<isRoot>

  my $val = $obj->isRoot;

Returns the L<UMMF::MOF_1_4_1::Model::Boolean|UMMF::MOF_1_4_1::Model::Boolean> value of Attribute C<isRoot>.

=cut
sub isRoot ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isRoot'};

  ;

  $val;
}


=head2 C<set_isRoot>

  $obj->set_isRoot($val);

Sets the value of Attribute C<isRoot>.
C<$val> must be of type L<UMMF::MOF_1_4_1::Model::Boolean|UMMF::MOF_1_4_1::Model::Boolean> or C<undef>.
Returns C<$obj>.

=cut
sub set_isRoot ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    ;
  }

    $self->{'isRoot'} = $val
  ;

  ;

  $self;
}


=head2 C<count_isRoot>

  $obj->count_isRoot;

Returns the number of elements (0 or 1) in C<isRoot>.

=cut
sub count_isRoot ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isRoot'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute isLeaf
# type = UMMF::MOF_1_4_1::Model::Boolean
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = 

=head2 C<isLeaf>

  my $val = $obj->isLeaf;

Returns the L<UMMF::MOF_1_4_1::Model::Boolean|UMMF::MOF_1_4_1::Model::Boolean> value of Attribute C<isLeaf>.

=cut
sub isLeaf ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isLeaf'};

  ;

  $val;
}


=head2 C<set_isLeaf>

  $obj->set_isLeaf($val);

Sets the value of Attribute C<isLeaf>.
C<$val> must be of type L<UMMF::MOF_1_4_1::Model::Boolean|UMMF::MOF_1_4_1::Model::Boolean> or C<undef>.
Returns C<$obj>.

=cut
sub set_isLeaf ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    ;
  }

    $self->{'isLeaf'} = $val
  ;

  ;

  $self;
}


=head2 C<count_isLeaf>

  $obj->count_isLeaf;

Returns the number of elements (0 or 1) in C<isLeaf>.

=cut
sub count_isLeaf ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isLeaf'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute isAbstract
# type = UMMF::MOF_1_4_1::Model::Boolean
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = 

=head2 C<isAbstract>

  my $val = $obj->isAbstract;

Returns the L<UMMF::MOF_1_4_1::Model::Boolean|UMMF::MOF_1_4_1::Model::Boolean> value of Attribute C<isAbstract>.

=cut
sub isAbstract ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isAbstract'};

  ;

  $val;
}


=head2 C<set_isAbstract>

  $obj->set_isAbstract($val);

Sets the value of Attribute C<isAbstract>.
C<$val> must be of type L<UMMF::MOF_1_4_1::Model::Boolean|UMMF::MOF_1_4_1::Model::Boolean> or C<undef>.
Returns C<$obj>.

=cut
sub set_isAbstract ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    ;
  }

    $self->{'isAbstract'} = $val
  ;

  ;

  $self;
}


=head2 C<count_isAbstract>

  $obj->count_isAbstract;

Returns the number of elements (0 or 1) in C<isAbstract>.

=cut
sub count_isAbstract ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isAbstract'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute visibility
# type = UMMF::MOF_1_4_1::Model::VisibilityKind
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = 

=head2 C<visibility>

  my $val = $obj->visibility;

Returns the L<UMMF::MOF_1_4_1::Model::VisibilityKind|UMMF::MOF_1_4_1::Model::VisibilityKind> value of Attribute C<visibility>.

=cut
sub visibility ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'visibility'};

  ;

  $val;
}


=head2 C<set_visibility>

  $obj->set_visibility($val);

Sets the value of Attribute C<visibility>.
C<$val> must be of type L<UMMF::MOF_1_4_1::Model::VisibilityKind|UMMF::MOF_1_4_1::Model::VisibilityKind> or C<undef>.
Returns C<$obj>.

=cut
sub set_visibility ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    $self->__use('UMMF::MOF_1_4_1::Model::VisibilityKind')->__typecheck($val, "UMMF::MOF_1_4_1::Model::GeneralizableElement.visibility");
  }

    $self->{'visibility'} = $val
  ;

  ;

  $self;
}


=head2 C<count_visibility>

  $obj->count_visibility;

Returns the number of elements (0 or 1) in C<visibility>.

=cut
sub count_visibility ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'visibility'};

  ;

  defined $val ? 1 : 0;
}




#################################################################
# Association
#


=for html <hr/>

=cut

#################################################################
# AssociationEnd supertype <---> subtype
# type = UMMF::MOF_1_4_1::Model::GeneralizableElement
# multiplicity = 0..*
# ordering = 

=head2 C<subtype>

  my @val = $obj->subtype;
  my $ary_val = $obj->subtype;

Returns the AssociationEnd C<subtype> values of type L<UMMF::MOF_1_4_1::Model::GeneralizableElement|UMMF::MOF_1_4_1::Model::GeneralizableElement>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub subtype ($)
{
  my ($self) = @_;

    my $x = $self->{'subtype'};

  # confess("Container for subtype $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_subtype>

  $obj->set_subtype(@val);

Sets the AssociationEnd C<subtype> value.
Elements of C<@val> must of type L<UMMF::MOF_1_4_1::Model::GeneralizableElement|UMMF::MOF_1_4_1::Model::GeneralizableElement>.
Returns C<$obj>.

=cut
sub set_subtype ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_subtype;
  $self->add_subtype(@val);
}


=head2 C<add_subtype>

  $obj->add_subtype(@val);

Adds AssociationEnd C<subtype> values.
Elements of C<@val> must of type L<UMMF::MOF_1_4_1::Model::GeneralizableElement|UMMF::MOF_1_4_1::Model::GeneralizableElement>.
Returns C<$obj>.

=cut
sub add_subtype ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'subtype'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::MOF_1_4_1::Model::GeneralizableElement')->__typecheck($val, "UMMF::MOF_1_4_1::Model::GeneralizableElement.subtype");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_supertype($self) if $old;
    $val->add_supertype($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_subtype>

  $obj->remove_subtype(@val);

Removes the AssociationEnd C<subtype> values C<@val>.
Elements of C<@val> must of type L<UMMF::MOF_1_4_1::Model::GeneralizableElement|UMMF::MOF_1_4_1::Model::GeneralizableElement>.
Returns C<$obj>.

=cut
sub remove_subtype ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'subtype'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::MOF_1_4_1::Model::GeneralizableElement')->__typecheck($val, "UMMF::MOF_1_4_1::Model::GeneralizableElement.subtype");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_supertype($self) if $old;
    $val->add_supertype($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_subtype>

  $obj->clear_subtype;

Clears the AssociationEnd C<subtype> links to L<UMMF::MOF_1_4_1::Model::GeneralizableElement|UMMF::MOF_1_4_1::Model::GeneralizableElement>.
Returns C<$obj>.

=cut
sub clear_subtype ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'subtype'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'subtype'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_supertype($self) if $old;
    $val->add_supertype($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_subtype>

  $obj->count_subtype;

Returns the number of elements associated with C<subtype>.

=cut
sub count_subtype ($)
{
  my ($self) = @_;

  my $x = $self->{'subtype'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd subtype <---> supertype
# type = UMMF::MOF_1_4_1::Model::GeneralizableElement
# multiplicity = 0..*
# ordering = ordered

=head2 C<supertype>

  my @val = $obj->supertype;
  my $ary_val = $obj->supertype;

Returns the AssociationEnd C<supertype> values of type L<UMMF::MOF_1_4_1::Model::GeneralizableElement|UMMF::MOF_1_4_1::Model::GeneralizableElement>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub supertype ($)
{
  my ($self) = @_;

    my $x = $self->{'supertype'} ||= [ ];

  wantarray ? @{$x} : $x;
  
}


=head2 C<index_supertype>

  my $x = $obj->index_supertype($i);
  my @x = $obj->index_supertype($i, $count);

In scalar context, returns the value of AssociationEnd C<supertype> at index C<$i>.
In array context, returns the values between index C<$i> and C<$i + $count - 1>, inclusive.

=cut
sub index_supertype ($$@)
{
  my ($self, $i, $count) = @_;

  ;

  my $val = $self->{'supertype'} ||= [ ];

  ;

  wantarray ? $val->[$i .. (defined $count ? $i + $count - 1 : $i)]
            : $val->[$i];
}


=head2 C<index_of_supertype>

  my $index = $obj->index_of_supertype($val);

Returns the index of C<$val> in AssociationEnd C<supertype>.
Return C<undef> if C<$val> is not in C<supertype>.

=cut
sub index_of_supertype ($$)
{
  my ($self, $x) = @_;

  ;

  my $val = $self->{'supertype'} ||= [ ];

  ;

  __ummf_array_index($val, $x);
}


=head2 C<set_supertype>

  $obj->set_supertype(@val);

Sets the AssociationEnd C<supertype> value.
Elements of C<@val> must of type L<UMMF::MOF_1_4_1::Model::GeneralizableElement|UMMF::MOF_1_4_1::Model::GeneralizableElement>.
Returns C<$obj>.

=cut
sub set_supertype ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_supertype;
  $self->add_supertype(@val);
}


=head2 C<set_index_supertype>

  $obj->set_index_supertype($i, $val);

Sets the value of AssociationEnd C<supertype> at index C<$i>.
Returns self.

=cut
sub set_index_supertype ($$$)
{
  my ($self, $i, $val) = @_;

  ;

  my $x = $self->{'supertype'} ||= [ ];

  no warnings;
  my $old;
  if ( ($old = $x->[$i]) ne $val) {
    # Recursion lock
        $x->[$i] = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_subtype($self) if $old;
    $val->add_subtype($self)    if $val;

  
    ;
  }

  $self;
}


=head2 C<add_supertype>

  $obj->add_supertype(@val);

Adds AssociationEnd C<supertype> values.
Elements of C<@val> must of type L<UMMF::MOF_1_4_1::Model::GeneralizableElement|UMMF::MOF_1_4_1::Model::GeneralizableElement>.
Returns C<$obj>.

=cut
sub add_supertype ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'supertype'} ||= [ ];
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if grep($_ eq $val, @$x);
        $self->__use('UMMF::MOF_1_4_1::Model::GeneralizableElement')->__typecheck($val, "UMMF::MOF_1_4_1::Model::GeneralizableElement.supertype");

    # Recursion lock
        push(@{$x}, $val);
        
    # Remove and add associations with other ends.
        
    $old->remove_subtype($self) if $old;
    $val->add_subtype($self)    if $val;

    }
  
  $self;
}


=head2 C<add_index_supertype>

  $obj->add_index_supertype($i, @val);

Adds AssociationEnd C<supertype> values at index C<$i>.
Elements of C<@val> must of type L<UMMF::MOF_1_4_1::Model::GeneralizableElement|UMMF::MOF_1_4_1::Model::GeneralizableElement>.
Returns C<$obj>.

=cut
sub add_index_supertype ($$@)
{
  my ($self, $i, @val) = @_;

  
    my $x = $self->{'supertype'} ||= [ ];
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if grep($_ eq $val, @$x);
        $self->__use('UMMF::MOF_1_4_1::Model::GeneralizableElement')->__typecheck($val, "UMMF::MOF_1_4_1::Model::GeneralizableElement.supertype");

    # Recursion lock
        splice(@{$x}, $i, 0, $val); # Recursion lock
        ++ $i;
    
    # Remove and add associations with other ends.
        
    $old->remove_subtype($self) if $old;
    $val->add_subtype($self)    if $val;

    }
  
  
  $self;
}


=head2 C<remove_supertype>

  $obj->remove_supertype(@val);

Removes the AssociationEnd C<supertype> values C<@val>.
Elements of C<@val> must of type L<UMMF::MOF_1_4_1::Model::GeneralizableElement|UMMF::MOF_1_4_1::Model::GeneralizableElement>.
Returns C<$obj>.

=cut
sub remove_supertype ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'supertype'} ||= [ ];
  
  for my $old ( @val ) {
    # Recursion lock
        my $i; # index of $old in @$x.
    next unless defined($i = __ummf_array_index($x, $old));
    
    my $val = $old;
      
    $self->__use('UMMF::MOF_1_4_1::Model::GeneralizableElement')->__typecheck($val, "UMMF::MOF_1_4_1::Model::GeneralizableElement.supertype");

    # Recursion lock
        splice(@$x, $i, 1);     
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_subtype($self) if $old;
    $val->add_subtype($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_supertype>

  $obj->clear_supertype;

Clears the AssociationEnd C<supertype> links to L<UMMF::MOF_1_4_1::Model::GeneralizableElement|UMMF::MOF_1_4_1::Model::GeneralizableElement>.
Returns C<$obj>.

=cut
sub clear_supertype ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'supertype'} ||= [ ];
  
  my $val; # Place holder for other MACRO.
  
    $self->{'supertype'} = [ ];  # Recursion lock
  for my $old ( @$x ) { # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_subtype($self) if $old;
    $val->add_subtype($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_supertype>

  $obj->count_supertype;

Returns the number of elements associated with C<supertype>.

=cut
sub count_supertype ($)
{
  my ($self) = @_;

  my $x = $self->{'supertype'};

    defined $x ? scalar @$x : 0;
  }







# End of Class GeneralizableElement


=pod

=for html <hr/>

I<END OF DOCUMENT>

=cut

############################################################################

1; # is true!

############################################################################

### Keep these comments at end of file: kstephens@users.sourceforge.net 2003/04/06 ###
### Local Variables: ###
### mode:perl ###
### perl-indent-level:2 ###
### perl-continued-statement-offset:0 ###
### perl-brace-offset:0 ###
### perl-label-offset:0 ###
### End: ###

