# -*- perl -*-
# DO NOT EDIT - This file is generated by UMMF; http://ummf.sourceforge.net 
# From template: $Id: Perl.txt,v 1.77 2006/05/14 01:40:03 kstephens Exp $

package UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase;

#use 5.6.1;
use strict;
use warnings;

#################################################################
# Version
#

our $VERSION = do { my @r = (q{1.5} =~ /\d+/g); sprintf "%d." . "%03d" x $#r, @r };


#################################################################
# Documentation
#

=head1 NAME

UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase -- 

=head1 VERSION

1.5

=head1 SYNOPSIS

=head1 DESCRIPTION 

=head1 USAGE

=head1 EXPORT

=head1 METATYPE

L<UMMF::UML_1_5::Foundation::Core::Class|UMMF::UML_1_5::Foundation::Core::Class>

=head1 SUPERCLASSES

L<UMMF::UML_1_5::Foundation::Core::Classifier|UMMF::UML_1_5::Foundation::Core::Classifier>




=head1 ATTRIBUTES

I<NO ATTRIBUTES>


=head1 ASSOCIATIONS


=head2 C<base> : I<THIS> C<1> E<lt>---E<gt>  C<extend> : UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<extension> : I<THIS> C<1> E<lt>---E<gt>  C<extended> : UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<useCase> : I<THIS> C<1> E<lt>---E<gt>  C<extensionPoint> : UMMF::UML_1_5::Behavioral_Elements::Use_Cases::ExtensionPoint C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::ExtensionPoint|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::ExtensionPoint>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<base> : I<THIS> C<1> E<lt>---E<gt>  C<include> : UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<addition> : I<THIS> C<1> E<lt>---E<gt>  C<include_addition> : UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back



=head1 METHODS

=cut



#################################################################
# Dependencies
#





use Carp qw(croak confess);
use Set::Object 1.05;
use Class::Multimethods 1.70;
use Data::Dumper;
use Scalar::Util qw(weaken);
use UMMF::UML_1_5::__ObjectBase qw(:__ummf_array);


#################################################################
# Generalizations
#

use base qw(
  UMMF::UML_1_5::Foundation::Core::Classifier



);


#################################################################
# Exports
#

our @EXPORT_OK = qw(
);
our %EXPORT_TAGS = ( 'all' => \@EXPORT_OK );





#################################################################
# Validation
#


=head2 C<__validate_type>

  UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase->__validate_type($value);

Returns true if C<$value> is a valid representation of L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase>.

=cut
sub __validate_type($$)
{
  my ($self, $x) = @_;

  no warnings;

  UNIVERSAL::isa($x, 'UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase')  ;
}


=head2 C<__typecheck>

  UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase->__typecheck($value, $msg);

Calls C<confess()> with C<$msg> if C<<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase->__validate_type($value)>> is false.

=cut
sub __typecheck
{
  my ($self, $x, $msg) = @_;

  confess("typecheck: $msg: type '" . 'UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase' . ": value '$x'")
    unless __validate_type($self, $x);
}


=head2 C<isaUseCase>


Returns true if receiver is a L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase>.
Other receivers will return false.

=cut
sub isaUseCase { 1 }


=head2 C<isaBehavioral_Elements__Use_Cases__UseCase>


Returns true if receiver is a L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase>.
Other receivers will return false.
This is the fully qualified version of the C<isaUseCase> method.

=cut
sub isaBehavioral_Elements__Use_Cases__UseCase { 1 }


#################################################################
# Introspection
#

=head2 C<__model_name> 

  my $name = $obj_or_package->__model_name;

Returns the UML Model name (C<'Behavioral_Elements::Use_Cases::UseCase'>) for an object or package of
this Classifier.

=cut
sub __model_name { 'Behavioral_Elements::Use_Cases::UseCase' }



=head2 C<__isAbstract>

  $package->__isAbstract;

Returns C<0>.

=cut
sub __isAbstract { 0; }


my $__tangram_schema;
=head2 C<__tangram_schema>

  my $tangram_schema $obj_or_package->__tangram_schema

Returns a HASH ref that describes this Classifier for Tangram.

See L<UMMF::Export::Perl::Tangram|UMMF::Export::Perl::Tangram>

=cut
sub __tangram_schema
{
  my ($self) = @_;

  $__tangram_schema ||=
  {
   'classes' =>
   [
     'UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase' =>
     {
       'table' => 'Behavioral_Elements__Use_Cases__UseCase',
       'abstract' => 0,
       'slots' => 
       { 
	 # Attributes
	 
	 # Associations
	 	 	       'extend'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend',

                           'table' => 'Behavioral_Elements__Use_Cases__UseCase__extend', 

                                                               'coll' => 'base',

                                                                               }
      ,
                  	 	       'extended'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend',

                           'table' => 'Behavioral_Elements__Use_Cases__UseCase__extended', 

                                                               'coll' => 'extension',

                                                                               }
      ,
                  	 	       'extensionPoint'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML_1_5::Behavioral_Elements::Use_Cases::ExtensionPoint',

                           'table' => 'Behavioral_Elements__Use_Cases__UseCase__extensionPoint', 

                                                               'coll' => 'useCase',

                                                                               }
      ,
                  	 	       'include'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include',

                           'table' => 'Behavioral_Elements__Use_Cases__UseCase__include', 

                                                               'coll' => 'base',

                                                                               }
      ,
                  	 	       'include_addition'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include',

                           'table' => 'Behavioral_Elements__Use_Cases__UseCase__include_addition', 

                                                               'coll' => 'addition',

                                                                               }
      ,
                         },
       'bases' => [  'UMMF::UML_1_5::Foundation::Core::Classifier',  ],
       'sql' => {

       },
     },
   ],

   'sql' =>
   {
    # Note Tangram::Ref::get_exporter() has
    # "UPDATE $table SET $self->{col} = $refid WHERE id = $id",
    # The id_col is hard-coded, 
    # Thus id_col will not work.
    #'id_col' => '__sid',
    #'class_col' => '__stype',
   },
     # 'set_id' => sub { }
     # 'get_id' => sub { }

      
  };
}


#################################################################
# Class Attributes
#


    

#################################################################
# Class Associations
#


    

#################################################################
# Initialization
#


=head2 C<___initialize>

Initialize all Attributes and AssociationEnds in a instance of this Classifier.
Does B<not> initalize slots in its Generalizations.

See also: C<__initialize>.

=cut
sub ___initialize
{
  my ($self) = @_;

  # Attributes



  # Associations

  # AssociationEnd 
  #  base 1
  #  <--> 
  #  extend 0..* UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend.
    if ( defined $self->{'extend'} ) {
    my $x = $self->{'extend'};
        $self->{'extend'} = Set::Object->new();
        $self->set_extend(@$x);
  }
  
  # AssociationEnd 
  #  extension 1
  #  <--> 
  #  extended 0..* UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend.
    if ( defined $self->{'extended'} ) {
    my $x = $self->{'extended'};
        $self->{'extended'} = Set::Object->new();
        $self->set_extended(@$x);
  }
  
  # AssociationEnd 
  #  useCase 1
  #  <--> 
  #  extensionPoint 0..* UMMF::UML_1_5::Behavioral_Elements::Use_Cases::ExtensionPoint.
    if ( defined $self->{'extensionPoint'} ) {
    my $x = $self->{'extensionPoint'};
        $self->{'extensionPoint'} = Set::Object->new();
        $self->set_extensionPoint(@$x);
  }
  
  # AssociationEnd 
  #  base 1
  #  <--> 
  #  include 0..* UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include.
    if ( defined $self->{'include'} ) {
    my $x = $self->{'include'};
        $self->{'include'} = Set::Object->new();
        $self->set_include(@$x);
  }
  
  # AssociationEnd 
  #  addition 1
  #  <--> 
  #  include_addition 0..* UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include.
    if ( defined $self->{'include_addition'} ) {
    my $x = $self->{'include_addition'};
        $self->{'include_addition'} = Set::Object->new();
        $self->set_include_addition(@$x);
  }
  

  $self;
}


my $__initialize_use;

=head2 C<__initialize>

Initialize all slots in this Classifier and all its Generalizations.

See also: C<___initialize>.

=cut
sub __initialize
{
  my ($self) = @_;

  # $DB::single = 1;

  unless ( ! $__initialize_use ) {
    $__initialize_use = 1;
    $self->__use('UMMF::UML_1_5::Foundation::Core::Namespace');
    $self->__use('UMMF::UML_1_5::Foundation::Core::Element');
    $self->__use('UMMF::UML_1_5::Foundation::Core::ModelElement');
    $self->__use('UMMF::UML_1_5::Foundation::Core::GeneralizableElement');
    $self->__use('UMMF::UML_1_5::Foundation::Core::Classifier');
  }

  $self->UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase::___initialize;
  $self->UMMF::UML_1_5::Foundation::Core::Namespace::___initialize;
  $self->UMMF::UML_1_5::Foundation::Core::Element::___initialize;
  $self->UMMF::UML_1_5::Foundation::Core::ModelElement::___initialize;
  $self->UMMF::UML_1_5::Foundation::Core::GeneralizableElement::___initialize;
  $self->UMMF::UML_1_5::Foundation::Core::Classifier::___initialize;

  $self;
}
      

=head2 C<__create>

Calls all <<create>> Methods for this Classifier and all Generalizations.

See also: C<___create>.

=cut
sub __create
{
  my ($self, @args) = @_;

  # $DB::single = 1;
  $self->UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase::___create(@args);
  $self->UMMF::UML_1_5::Foundation::Core::Namespace::___create();
  $self->UMMF::UML_1_5::Foundation::Core::Element::___create();
  $self->UMMF::UML_1_5::Foundation::Core::ModelElement::___create();
  $self->UMMF::UML_1_5::Foundation::Core::GeneralizableElement::___create();
  $self->UMMF::UML_1_5::Foundation::Core::Classifier::___create();

  $self;
}




#################################################################
# Attributes
#




#################################################################
# Association
#


=for html <hr/>

=cut

#################################################################
# AssociationEnd base <---> extend
# type = UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend
# multiplicity = 0..*
# ordering = 

=head2 C<extend>

  my @val = $obj->extend;
  my $ary_val = $obj->extend;

Returns the AssociationEnd C<extend> values of type L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub extend ($)
{
  my ($self) = @_;

    my $x = $self->{'extend'};

  # confess("Container for extend $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_extend>

  $obj->set_extend(@val);

Sets the AssociationEnd C<extend> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend>.
Returns C<$obj>.

=cut
sub set_extend ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_extend;
  $self->add_extend(@val);
}


=head2 C<add_extend>

  $obj->add_extend(@val);

Adds AssociationEnd C<extend> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend>.
Returns C<$obj>.

=cut
sub add_extend ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'extend'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend')->__typecheck($val, "UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase.extend");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_base($self) if $old;
    $val->add_base($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_extend>

  $obj->remove_extend(@val);

Removes the AssociationEnd C<extend> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend>.
Returns C<$obj>.

=cut
sub remove_extend ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'extend'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend')->__typecheck($val, "UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase.extend");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_base($self) if $old;
    $val->add_base($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_extend>

  $obj->clear_extend;

Clears the AssociationEnd C<extend> links to L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend>.
Returns C<$obj>.

=cut
sub clear_extend ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'extend'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'extend'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_base($self) if $old;
    $val->add_base($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_extend>

  $obj->count_extend;

Returns the number of elements associated with C<extend>.

=cut
sub count_extend ($)
{
  my ($self) = @_;

  my $x = $self->{'extend'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd extension <---> extended
# type = UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend
# multiplicity = 0..*
# ordering = 

=head2 C<extended>

  my @val = $obj->extended;
  my $ary_val = $obj->extended;

Returns the AssociationEnd C<extended> values of type L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub extended ($)
{
  my ($self) = @_;

    my $x = $self->{'extended'};

  # confess("Container for extended $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_extended>

  $obj->set_extended(@val);

Sets the AssociationEnd C<extended> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend>.
Returns C<$obj>.

=cut
sub set_extended ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_extended;
  $self->add_extended(@val);
}


=head2 C<add_extended>

  $obj->add_extended(@val);

Adds AssociationEnd C<extended> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend>.
Returns C<$obj>.

=cut
sub add_extended ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'extended'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend')->__typecheck($val, "UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase.extended");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_extension($self) if $old;
    $val->add_extension($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_extended>

  $obj->remove_extended(@val);

Removes the AssociationEnd C<extended> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend>.
Returns C<$obj>.

=cut
sub remove_extended ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'extended'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend')->__typecheck($val, "UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase.extended");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_extension($self) if $old;
    $val->add_extension($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_extended>

  $obj->clear_extended;

Clears the AssociationEnd C<extended> links to L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Extend>.
Returns C<$obj>.

=cut
sub clear_extended ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'extended'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'extended'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_extension($self) if $old;
    $val->add_extension($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_extended>

  $obj->count_extended;

Returns the number of elements associated with C<extended>.

=cut
sub count_extended ($)
{
  my ($self) = @_;

  my $x = $self->{'extended'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd useCase <---> extensionPoint
# type = UMMF::UML_1_5::Behavioral_Elements::Use_Cases::ExtensionPoint
# multiplicity = 0..*
# ordering = 

=head2 C<extensionPoint>

  my @val = $obj->extensionPoint;
  my $ary_val = $obj->extensionPoint;

Returns the AssociationEnd C<extensionPoint> values of type L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::ExtensionPoint|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::ExtensionPoint>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub extensionPoint ($)
{
  my ($self) = @_;

    my $x = $self->{'extensionPoint'};

  # confess("Container for extensionPoint $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_extensionPoint>

  $obj->set_extensionPoint(@val);

Sets the AssociationEnd C<extensionPoint> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::ExtensionPoint|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::ExtensionPoint>.
Returns C<$obj>.

=cut
sub set_extensionPoint ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_extensionPoint;
  $self->add_extensionPoint(@val);
}


=head2 C<add_extensionPoint>

  $obj->add_extensionPoint(@val);

Adds AssociationEnd C<extensionPoint> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::ExtensionPoint|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::ExtensionPoint>.
Returns C<$obj>.

=cut
sub add_extensionPoint ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'extensionPoint'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::Behavioral_Elements::Use_Cases::ExtensionPoint')->__typecheck($val, "UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase.extensionPoint");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_useCase($self) if $old;
    $val->add_useCase($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_extensionPoint>

  $obj->remove_extensionPoint(@val);

Removes the AssociationEnd C<extensionPoint> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::ExtensionPoint|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::ExtensionPoint>.
Returns C<$obj>.

=cut
sub remove_extensionPoint ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'extensionPoint'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Behavioral_Elements::Use_Cases::ExtensionPoint')->__typecheck($val, "UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase.extensionPoint");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_useCase($self) if $old;
    $val->add_useCase($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_extensionPoint>

  $obj->clear_extensionPoint;

Clears the AssociationEnd C<extensionPoint> links to L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::ExtensionPoint|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::ExtensionPoint>.
Returns C<$obj>.

=cut
sub clear_extensionPoint ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'extensionPoint'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'extensionPoint'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_useCase($self) if $old;
    $val->add_useCase($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_extensionPoint>

  $obj->count_extensionPoint;

Returns the number of elements associated with C<extensionPoint>.

=cut
sub count_extensionPoint ($)
{
  my ($self) = @_;

  my $x = $self->{'extensionPoint'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd base <---> include
# type = UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include
# multiplicity = 0..*
# ordering = 

=head2 C<include>

  my @val = $obj->include;
  my $ary_val = $obj->include;

Returns the AssociationEnd C<include> values of type L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub include ($)
{
  my ($self) = @_;

    my $x = $self->{'include'};

  # confess("Container for include $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_include>

  $obj->set_include(@val);

Sets the AssociationEnd C<include> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include>.
Returns C<$obj>.

=cut
sub set_include ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_include;
  $self->add_include(@val);
}


=head2 C<add_include>

  $obj->add_include(@val);

Adds AssociationEnd C<include> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include>.
Returns C<$obj>.

=cut
sub add_include ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'include'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include')->__typecheck($val, "UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase.include");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_base($self) if $old;
    $val->add_base($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_include>

  $obj->remove_include(@val);

Removes the AssociationEnd C<include> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include>.
Returns C<$obj>.

=cut
sub remove_include ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'include'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include')->__typecheck($val, "UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase.include");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_base($self) if $old;
    $val->add_base($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_include>

  $obj->clear_include;

Clears the AssociationEnd C<include> links to L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include>.
Returns C<$obj>.

=cut
sub clear_include ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'include'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'include'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_base($self) if $old;
    $val->add_base($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_include>

  $obj->count_include;

Returns the number of elements associated with C<include>.

=cut
sub count_include ($)
{
  my ($self) = @_;

  my $x = $self->{'include'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd addition <---> include_addition
# type = UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include
# multiplicity = 0..*
# ordering = 

=head2 C<include_addition>

  my @val = $obj->include_addition;
  my $ary_val = $obj->include_addition;

Returns the AssociationEnd C<include_addition> values of type L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub include_addition ($)
{
  my ($self) = @_;

    my $x = $self->{'include_addition'};

  # confess("Container for include_addition $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_include_addition>

  $obj->set_include_addition(@val);

Sets the AssociationEnd C<include_addition> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include>.
Returns C<$obj>.

=cut
sub set_include_addition ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_include_addition;
  $self->add_include_addition(@val);
}


=head2 C<add_include_addition>

  $obj->add_include_addition(@val);

Adds AssociationEnd C<include_addition> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include>.
Returns C<$obj>.

=cut
sub add_include_addition ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'include_addition'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include')->__typecheck($val, "UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase.include_addition");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_addition($self) if $old;
    $val->add_addition($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_include_addition>

  $obj->remove_include_addition(@val);

Removes the AssociationEnd C<include_addition> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include>.
Returns C<$obj>.

=cut
sub remove_include_addition ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'include_addition'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include')->__typecheck($val, "UMMF::UML_1_5::Behavioral_Elements::Use_Cases::UseCase.include_addition");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_addition($self) if $old;
    $val->add_addition($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_include_addition>

  $obj->clear_include_addition;

Clears the AssociationEnd C<include_addition> links to L<UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include|UMMF::UML_1_5::Behavioral_Elements::Use_Cases::Include>.
Returns C<$obj>.

=cut
sub clear_include_addition ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'include_addition'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'include_addition'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_addition($self) if $old;
    $val->add_addition($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_include_addition>

  $obj->count_include_addition;

Returns the number of elements associated with C<include_addition>.

=cut
sub count_include_addition ($)
{
  my ($self) = @_;

  my $x = $self->{'include_addition'};

    defined $x ? $x->size : 0;
  }







# End of Class UseCase


=pod

=for html <hr/>

I<END OF DOCUMENT>

=cut

############################################################################

1; # is true!

############################################################################

### Keep these comments at end of file: kstephens@users.sourceforge.net 2003/04/06 ###
### Local Variables: ###
### mode:perl ###
### perl-indent-level:2 ###
### perl-continued-statement-offset:0 ###
### perl-brace-offset:0 ###
### perl-label-offset:0 ###
### End: ###

