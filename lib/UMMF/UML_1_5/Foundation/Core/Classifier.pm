# -*- perl -*-
# DO NOT EDIT - This file is generated by UMMF; http://ummf.sourceforge.net 
# From template: $Id: Perl.txt,v 1.77 2006/05/14 01:40:03 kstephens Exp $

package UMMF::UML_1_5::Foundation::Core::Classifier;

#use 5.6.1;
use strict;
use warnings;

#################################################################
# Version
#

our $VERSION = do { my @r = (q{1.5} =~ /\d+/g); sprintf "%d." . "%03d" x $#r, @r };


#################################################################
# Documentation
#

=head1 NAME

UMMF::UML_1_5::Foundation::Core::Classifier -- 

=head1 VERSION

1.5

=head1 SYNOPSIS

=head1 DESCRIPTION 

=head1 USAGE

=head1 EXPORT

=head1 METATYPE

L<UMMF::UML_1_5::Foundation::Core::Class|UMMF::UML_1_5::Foundation::Core::Class>

=head1 SUPERCLASSES

L<UMMF::UML_1_5::Foundation::Core::Namespace|UMMF::UML_1_5::Foundation::Core::Namespace>

L<UMMF::UML_1_5::Foundation::Core::GeneralizableElement|UMMF::UML_1_5::Foundation::Core::GeneralizableElement>




=head1 ATTRIBUTES

I<NO ATTRIBUTES>


=head1 ASSOCIATIONS


=head2 C<participant> : I<THIS> C<1> E<lt>---E<gt>  C<association> : UMMF::UML_1_5::Foundation::Core::AssociationEnd C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<classifier> : I<THIS> C<1> E<lt>----  C<> : UMMF::UML_1_5::Behavioral_Elements::Actions::Read_Write_Actions::Other_Actions::ReadExtentAction C<0..1>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::Actions::Read_Write_Actions::Other_Actions::ReadExtentAction|UMMF::UML_1_5::Behavioral_Elements::Actions::Read_Write_Actions::Other_Actions::ReadExtentAction>

=item multiplicity = C<0..1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<classifier> : I<THIS> C<1> E<lt>----  C<> : UMMF::UML_1_5::Behavioral_Elements::Actions::Read_Write_Actions::Object_Actions::CreateObjectAction C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::Actions::Read_Write_Actions::Object_Actions::CreateObjectAction|UMMF::UML_1_5::Behavioral_Elements::Actions::Read_Write_Actions::Object_Actions::CreateObjectAction>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<classifier> : I<THIS> C<1> E<lt>----  C<> : UMMF::UML_1_5::Behavioral_Elements::Actions::Read_Write_Actions::Object_Actions::ReadIsClassifiedObjectAction C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::Actions::Read_Write_Actions::Object_Actions::ReadIsClassifiedObjectAction|UMMF::UML_1_5::Behavioral_Elements::Actions::Read_Write_Actions::Object_Actions::ReadIsClassifiedObjectAction>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<type> : I<THIS> C<1> E<lt>---E<gt>  C<classifierInState> : UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ClassifierInState C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ClassifierInState|UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ClassifierInState>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<base> : I<THIS> C<1..*> E<lt>---E<gt>  C<classifierRole> : UMMF::UML_1_5::Behavioral_Elements::Collaborations::ClassifierRole C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::Collaborations::ClassifierRole|UMMF::UML_1_5::Behavioral_Elements::Collaborations::ClassifierRole>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<representedClassifier> : I<THIS> C<0..1> E<lt>---E<gt>  C<collaboration_representedClassifier> : UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration|UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<elementType> : I<THIS> C<1> E<lt>---E<gt>  C<collectionTypes> : UMMF::UML_1_5::OCL::Types::CollectionType C<0..4>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::OCL::Types::CollectionType|UMMF::UML_1_5::OCL::Types::CollectionType>

=item multiplicity = C<0..4>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<owner> : I<THIS> C<0..1> E<lt>---E<gt>  C<feature> : UMMF::UML_1_5::Foundation::Core::Feature C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Foundation::Core::Feature|UMMF::UML_1_5::Foundation::Core::Feature>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<ordered>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<ARRAY>

=back


=head2 C<classifier> : I<THIS> C<1..*> E<lt>---E<gt>  C<instance> : UMMF::UML_1_5::Behavioral_Elements::Common_Behavior::Instance C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML_1_5::Behavioral_Elements::Common_Behavior::Instance>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<jumpType> : I<THIS> C<1> E<lt>----  C<> : UMMF::UML_1_5::Behavioral_Elements::Actions::Jump_Actions::JumpHandler C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::Actions::Jump_Actions::JumpHandler|UMMF::UML_1_5::Behavioral_Elements::Actions::Jump_Actions::JumpHandler>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<newClassifier> : I<THIS> C<0..*> E<lt>----  C<> : UMMF::UML_1_5::Behavioral_Elements::Actions::Read_Write_Actions::Object_Actions::ReclassifyObjectAction C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::Actions::Read_Write_Actions::Object_Actions::ReclassifyObjectAction|UMMF::UML_1_5::Behavioral_Elements::Actions::Read_Write_Actions::Object_Actions::ReclassifyObjectAction>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<type> : I<THIS> C<1> E<lt>---E<gt>  C<objectFlowState> : UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ObjectFlowState C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ObjectFlowState|UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ObjectFlowState>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<oldClassifer> : I<THIS> C<0..*> E<lt>----  C<> : UMMF::UML_1_5::Behavioral_Elements::Actions::Read_Write_Actions::Object_Actions::ReclassifyObjectAction C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::Actions::Read_Write_Actions::Object_Actions::ReclassifyObjectAction|UMMF::UML_1_5::Behavioral_Elements::Actions::Read_Write_Actions::Object_Actions::ReclassifyObjectAction>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<type> : I<THIS> C<1> E<lt>---E<gt>  C<parameter> : UMMF::UML_1_5::Foundation::Core::Parameter C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Foundation::Core::Parameter|UMMF::UML_1_5::Foundation::Core::Parameter>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<type> : I<THIS> C<0..1> E<lt>---E<gt>  C<pin> : UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Pin C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Pin|UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Pin>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<powertype> : I<THIS> C<0..1> E<lt>---E<gt>  C<powertypeRange> : UMMF::UML_1_5::Foundation::Core::Generalization C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Foundation::Core::Generalization|UMMF::UML_1_5::Foundation::Core::Generalization>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<specification> : I<THIS> C<0..*> E<lt>---E<gt>  C<specifiedEnd> : UMMF::UML_1_5::Foundation::Core::AssociationEnd C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<type> : I<THIS> C<1> E<lt>----  C<> : UMMF::UML_1_5::OCL::Expressions::CollectionLiteralPart C<1>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::OCL::Expressions::CollectionLiteralPart|UMMF::UML_1_5::OCL::Expressions::CollectionLiteralPart>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<type> : I<THIS> C<1> E<lt>----  C<> : UMMF::UML_1_5::OCL::Expressions::UnspecifiedValueExp C<1>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::OCL::Expressions::UnspecifiedValueExp|UMMF::UML_1_5::OCL::Expressions::UnspecifiedValueExp>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<type> : I<THIS> C<1> E<lt>----  C<> : UMMF::UML_1_5::OCL::Expressions::VariableDeclaration C<1>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::OCL::Expressions::VariableDeclaration|UMMF::UML_1_5::OCL::Expressions::VariableDeclaration>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<type> : I<THIS> C<0..1> E<lt>----  C<> : UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Variable C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Variable|UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Variable>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<type> : I<THIS> C<1> E<lt>---E<gt>  C<typedFeature> : UMMF::UML_1_5::Foundation::Core::StructuralFeature C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Foundation::Core::StructuralFeature|UMMF::UML_1_5::Foundation::Core::StructuralFeature>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back



=head1 METHODS

=cut



#################################################################
# Dependencies
#





use Carp qw(croak confess);
use Set::Object 1.05;
use Class::Multimethods 1.70;
use Data::Dumper;
use Scalar::Util qw(weaken);
use UMMF::UML_1_5::__ObjectBase qw(:__ummf_array);


#################################################################
# Generalizations
#

use base qw(
  UMMF::UML_1_5::Foundation::Core::Namespace  UMMF::UML_1_5::Foundation::Core::GeneralizableElement



);


#################################################################
# Exports
#

our @EXPORT_OK = qw(
);
our %EXPORT_TAGS = ( 'all' => \@EXPORT_OK );





#################################################################
# Validation
#


=head2 C<__validate_type>

  UMMF::UML_1_5::Foundation::Core::Classifier->__validate_type($value);

Returns true if C<$value> is a valid representation of L<UMMF::UML_1_5::Foundation::Core::Classifier|UMMF::UML_1_5::Foundation::Core::Classifier>.

=cut
sub __validate_type($$)
{
  my ($self, $x) = @_;

  no warnings;

  UNIVERSAL::isa($x, 'UMMF::UML_1_5::Foundation::Core::Classifier')  ;
}


=head2 C<__typecheck>

  UMMF::UML_1_5::Foundation::Core::Classifier->__typecheck($value, $msg);

Calls C<confess()> with C<$msg> if C<<UMMF::UML_1_5::Foundation::Core::Classifier->__validate_type($value)>> is false.

=cut
sub __typecheck
{
  my ($self, $x, $msg) = @_;

  confess("typecheck: $msg: type '" . 'UMMF::UML_1_5::Foundation::Core::Classifier' . ": value '$x'")
    unless __validate_type($self, $x);
}


=head2 C<isaClassifier>


Returns true if receiver is a L<UMMF::UML_1_5::Foundation::Core::Classifier|UMMF::UML_1_5::Foundation::Core::Classifier>.
Other receivers will return false.

=cut
sub isaClassifier { 1 }


=head2 C<isaFoundation__Core__Classifier>


Returns true if receiver is a L<UMMF::UML_1_5::Foundation::Core::Classifier|UMMF::UML_1_5::Foundation::Core::Classifier>.
Other receivers will return false.
This is the fully qualified version of the C<isaClassifier> method.

=cut
sub isaFoundation__Core__Classifier { 1 }


#################################################################
# Introspection
#

=head2 C<__model_name> 

  my $name = $obj_or_package->__model_name;

Returns the UML Model name (C<'Foundation::Core::Classifier'>) for an object or package of
this Classifier.

=cut
sub __model_name { 'Foundation::Core::Classifier' }



=head2 C<__isAbstract>

  $package->__isAbstract;

Returns C<1>.

=cut
sub __isAbstract { 1; }


my $__tangram_schema;
=head2 C<__tangram_schema>

  my $tangram_schema $obj_or_package->__tangram_schema

Returns a HASH ref that describes this Classifier for Tangram.

See L<UMMF::Export::Perl::Tangram|UMMF::Export::Perl::Tangram>

=cut
sub __tangram_schema
{
  my ($self) = @_;

  $__tangram_schema ||=
  {
   'classes' =>
   [
     'UMMF::UML_1_5::Foundation::Core::Classifier' =>
     {
       'table' => 'Foundation__Core__Classifier',
       'abstract' => 1,
       'slots' => 
       { 
	 # Attributes
	 
	 # Associations
	 	 	       'association'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML_1_5::Foundation::Core::AssociationEnd',

                           'table' => 'Foundation__Core__Classifier__association', 

                                                               'coll' => 'participant',

                                                                               }
      ,
                  	 	                     	 	                     	 	                     	 	       'classifierInState'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ClassifierInState',

                           'table' => 'Foundation__Core__Classifier__classifierInState', 

                                                               'coll' => 'type',

                                                                               }
      ,
                  	 	       'classifierRole'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML_1_5::Behavioral_Elements::Collaborations::ClassifierRole',

                           'table' => 'ClassifierRole_Base', 

                                                      'item' => 'classifierRole', 

                  'coll' => 'base',

                                                                               }
      ,
                  	 	       'collaboration_representedClassifier'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration',

                           'table' => 'Foundation__Core__Classifier__collaboration_representedClassifier', 

                                                               'coll' => 'representedClassifier',

                                                                               }
      ,
                  	 	       'collectionTypes'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML_1_5::OCL::Types::CollectionType',

                           'table' => 'Foundation__Core__Classifier__collectionTypes', 

                                                               'coll' => 'elementType',

                                                                               }
      ,
                  	 	       'feature'
       => {
	 'type_impl' => 'iarray',
         'class' => 'UMMF::UML_1_5::Foundation::Core::Feature',

                           'table' => 'Foundation__Core__Classifier__feature', 

                                                               'coll' => 'owner',

                  'slot' => 'owner_i', 

                                    'aggreg' => '1', 

                                           }
      ,
                  	 	       'instance'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML_1_5::Behavioral_Elements::Common_Behavior::Instance',

                           'table' => 'Instance_Classifier', 

                                                      'item' => 'instance', 

                  'coll' => 'classifier',

                                                                               }
      ,
                  	 	                     	 	                     	 	       'objectFlowState'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ObjectFlowState',

                           'table' => 'Foundation__Core__Classifier__objectFlowState', 

                                                               'coll' => 'type',

                                                                               }
      ,
                  	 	                     	 	       'parameter'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML_1_5::Foundation::Core::Parameter',

                           'table' => 'Foundation__Core__Classifier__parameter', 

                                                               'coll' => 'type',

                                                                               }
      ,
                  	 	       'pin'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Pin',

                           'table' => 'Foundation__Core__Classifier__pin', 

                                                               'coll' => 'type',

                                                                               }
      ,
                  	 	       'powertypeRange'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML_1_5::Foundation::Core::Generalization',

                           'table' => 'Foundation__Core__Classifier__powertypeRange', 

                                                               'coll' => 'powertype',

                                                                               }
      ,
                  	 	       'specifiedEnd'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML_1_5::Foundation::Core::AssociationEnd',

                           'table' => 'Foundation__Core__SpecifiedEnd_Specification', 

                                                      'item' => 'specifiedEnd', 

                  'coll' => 'specification',

                                                                               }
      ,
                  	 	                     	 	                     	 	                     	 	                     	 	       'typedFeature'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML_1_5::Foundation::Core::StructuralFeature',

                           'table' => 'Foundation__Core__Classifier__typedFeature', 

                                                               'coll' => 'type',

                                                                               }
      ,
                         },
       'bases' => [  'UMMF::UML_1_5::Foundation::Core::Namespace',  'UMMF::UML_1_5::Foundation::Core::GeneralizableElement',  ],
       'sql' => {

       },
     },
   ],

   'sql' =>
   {
    # Note Tangram::Ref::get_exporter() has
    # "UPDATE $table SET $self->{col} = $refid WHERE id = $id",
    # The id_col is hard-coded, 
    # Thus id_col will not work.
    #'id_col' => '__sid',
    #'class_col' => '__stype',
   },
     # 'set_id' => sub { }
     # 'get_id' => sub { }

      
  };
}


#################################################################
# Class Attributes
#


    

#################################################################
# Class Associations
#


    

#################################################################
# Initialization
#


=head2 C<___initialize>

Initialize all Attributes and AssociationEnds in a instance of this Classifier.
Does B<not> initalize slots in its Generalizations.

See also: C<__initialize>.

=cut
sub ___initialize
{
  my ($self) = @_;

  # Attributes



  # Associations

  # AssociationEnd 
  #  participant 1
  #  <--> 
  #  association 0..* UMMF::UML_1_5::Foundation::Core::AssociationEnd.
    if ( defined $self->{'association'} ) {
    my $x = $self->{'association'};
        $self->{'association'} = Set::Object->new();
        $self->set_association(@$x);
  }
  
  # AssociationEnd 
  #  type 1
  #  <--> 
  #  classifierInState 0..* UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ClassifierInState.
    if ( defined $self->{'classifierInState'} ) {
    my $x = $self->{'classifierInState'};
        $self->{'classifierInState'} = Set::Object->new();
        $self->set_classifierInState(@$x);
  }
  
  # AssociationEnd 
  #  base 1..*
  #  <--> 
  #  classifierRole 0..* UMMF::UML_1_5::Behavioral_Elements::Collaborations::ClassifierRole.
    if ( defined $self->{'classifierRole'} ) {
    my $x = $self->{'classifierRole'};
        $self->{'classifierRole'} = Set::Object->new();
        $self->set_classifierRole(@$x);
  }
  
  # AssociationEnd 
  #  representedClassifier 0..1
  #  <--> 
  #  collaboration_representedClassifier 0..* UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration.
    if ( defined $self->{'collaboration_representedClassifier'} ) {
    my $x = $self->{'collaboration_representedClassifier'};
        $self->{'collaboration_representedClassifier'} = Set::Object->new();
        $self->set_collaboration_representedClassifier(@$x);
  }
  
  # AssociationEnd 
  #  elementType 1
  #  <--> 
  #  collectionTypes 0..4 UMMF::UML_1_5::OCL::Types::CollectionType.
    if ( defined $self->{'collectionTypes'} ) {
    my $x = $self->{'collectionTypes'};
        $self->{'collectionTypes'} = Set::Object->new();
        $self->set_collectionTypes(@$x);
  }
  
  # AssociationEnd 
  #  owner 0..1
  #  <--> 
  #  feature 0..* UMMF::UML_1_5::Foundation::Core::Feature.
    if ( defined $self->{'feature'} ) {
    my $x = $self->{'feature'};
        $self->{'feature'} = [ ];
        $self->set_feature(@$x);
  }
  
  # AssociationEnd 
  #  classifier 1..*
  #  <--> 
  #  instance 0..* UMMF::UML_1_5::Behavioral_Elements::Common_Behavior::Instance.
    if ( defined $self->{'instance'} ) {
    my $x = $self->{'instance'};
        $self->{'instance'} = Set::Object->new();
        $self->set_instance(@$x);
  }
  
  # AssociationEnd 
  #  type 1
  #  <--> 
  #  objectFlowState 0..* UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ObjectFlowState.
    if ( defined $self->{'objectFlowState'} ) {
    my $x = $self->{'objectFlowState'};
        $self->{'objectFlowState'} = Set::Object->new();
        $self->set_objectFlowState(@$x);
  }
  
  # AssociationEnd 
  #  type 1
  #  <--> 
  #  parameter 0..* UMMF::UML_1_5::Foundation::Core::Parameter.
    if ( defined $self->{'parameter'} ) {
    my $x = $self->{'parameter'};
        $self->{'parameter'} = Set::Object->new();
        $self->set_parameter(@$x);
  }
  
  # AssociationEnd 
  #  type 0..1
  #  <--> 
  #  pin 0..* UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Pin.
    if ( defined $self->{'pin'} ) {
    my $x = $self->{'pin'};
        $self->{'pin'} = Set::Object->new();
        $self->set_pin(@$x);
  }
  
  # AssociationEnd 
  #  powertype 0..1
  #  <--> 
  #  powertypeRange 0..* UMMF::UML_1_5::Foundation::Core::Generalization.
    if ( defined $self->{'powertypeRange'} ) {
    my $x = $self->{'powertypeRange'};
        $self->{'powertypeRange'} = Set::Object->new();
        $self->set_powertypeRange(@$x);
  }
  
  # AssociationEnd 
  #  specification 0..*
  #  <--> 
  #  specifiedEnd 0..* UMMF::UML_1_5::Foundation::Core::AssociationEnd.
    if ( defined $self->{'specifiedEnd'} ) {
    my $x = $self->{'specifiedEnd'};
        $self->{'specifiedEnd'} = Set::Object->new();
        $self->set_specifiedEnd(@$x);
  }
  
  # AssociationEnd 
  #  type 1
  #  <--> 
  #  typedFeature 0..* UMMF::UML_1_5::Foundation::Core::StructuralFeature.
    if ( defined $self->{'typedFeature'} ) {
    my $x = $self->{'typedFeature'};
        $self->{'typedFeature'} = Set::Object->new();
        $self->set_typedFeature(@$x);
  }
  

  $self;
}


my $__initialize_use;

=head2 C<__initialize>

Initialize all slots in this Classifier and all its Generalizations.

See also: C<___initialize>.

=cut
sub __initialize
{
  my ($self) = @_;

  # $DB::single = 1;

  unless ( ! $__initialize_use ) {
    $__initialize_use = 1;
    $self->__use('UMMF::UML_1_5::Foundation::Core::Namespace');
    $self->__use('UMMF::UML_1_5::Foundation::Core::Element');
    $self->__use('UMMF::UML_1_5::Foundation::Core::ModelElement');
    $self->__use('UMMF::UML_1_5::Foundation::Core::GeneralizableElement');
  }

  $self->UMMF::UML_1_5::Foundation::Core::Classifier::___initialize;
  $self->UMMF::UML_1_5::Foundation::Core::Namespace::___initialize;
  $self->UMMF::UML_1_5::Foundation::Core::Element::___initialize;
  $self->UMMF::UML_1_5::Foundation::Core::ModelElement::___initialize;
  $self->UMMF::UML_1_5::Foundation::Core::GeneralizableElement::___initialize;

  $self;
}
      

=head2 C<__create>

Calls all <<create>> Methods for this Classifier and all Generalizations.

See also: C<___create>.

=cut
sub __create
{
  my ($self, @args) = @_;

  # $DB::single = 1;
  $self->UMMF::UML_1_5::Foundation::Core::Classifier::___create(@args);
  $self->UMMF::UML_1_5::Foundation::Core::Namespace::___create();
  $self->UMMF::UML_1_5::Foundation::Core::Element::___create();
  $self->UMMF::UML_1_5::Foundation::Core::ModelElement::___create();
  $self->UMMF::UML_1_5::Foundation::Core::GeneralizableElement::___create();

  $self;
}




#################################################################
# Attributes
#




#################################################################
# Association
#


=for html <hr/>

=cut

#################################################################
# AssociationEnd participant <---> association
# type = UMMF::UML_1_5::Foundation::Core::AssociationEnd
# multiplicity = 0..*
# ordering = 

=head2 C<association>

  my @val = $obj->association;
  my $ary_val = $obj->association;

Returns the AssociationEnd C<association> values of type L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub association ($)
{
  my ($self) = @_;

    my $x = $self->{'association'};

  # confess("Container for association $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_association>

  $obj->set_association(@val);

Sets the AssociationEnd C<association> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>.
Returns C<$obj>.

=cut
sub set_association ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_association;
  $self->add_association(@val);
}


=head2 C<add_association>

  $obj->add_association(@val);

Adds AssociationEnd C<association> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>.
Returns C<$obj>.

=cut
sub add_association ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'association'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::Foundation::Core::AssociationEnd')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.association");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_participant($self) if $old;
    $val->add_participant($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_association>

  $obj->remove_association(@val);

Removes the AssociationEnd C<association> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>.
Returns C<$obj>.

=cut
sub remove_association ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'association'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Foundation::Core::AssociationEnd')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.association");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_participant($self) if $old;
    $val->add_participant($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_association>

  $obj->clear_association;

Clears the AssociationEnd C<association> links to L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>.
Returns C<$obj>.

=cut
sub clear_association ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'association'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'association'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_participant($self) if $old;
    $val->add_participant($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_association>

  $obj->count_association;

Returns the number of elements associated with C<association>.

=cut
sub count_association ($)
{
  my ($self) = @_;

  my $x = $self->{'association'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd type <---> classifierInState
# type = UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ClassifierInState
# multiplicity = 0..*
# ordering = 

=head2 C<classifierInState>

  my @val = $obj->classifierInState;
  my $ary_val = $obj->classifierInState;

Returns the AssociationEnd C<classifierInState> values of type L<UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ClassifierInState|UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ClassifierInState>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub classifierInState ($)
{
  my ($self) = @_;

    my $x = $self->{'classifierInState'};

  # confess("Container for classifierInState $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_classifierInState>

  $obj->set_classifierInState(@val);

Sets the AssociationEnd C<classifierInState> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ClassifierInState|UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ClassifierInState>.
Returns C<$obj>.

=cut
sub set_classifierInState ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_classifierInState;
  $self->add_classifierInState(@val);
}


=head2 C<add_classifierInState>

  $obj->add_classifierInState(@val);

Adds AssociationEnd C<classifierInState> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ClassifierInState|UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ClassifierInState>.
Returns C<$obj>.

=cut
sub add_classifierInState ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'classifierInState'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ClassifierInState')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.classifierInState");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_type($self) if $old;
    $val->add_type($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_classifierInState>

  $obj->remove_classifierInState(@val);

Removes the AssociationEnd C<classifierInState> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ClassifierInState|UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ClassifierInState>.
Returns C<$obj>.

=cut
sub remove_classifierInState ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'classifierInState'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ClassifierInState')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.classifierInState");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_type($self) if $old;
    $val->add_type($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_classifierInState>

  $obj->clear_classifierInState;

Clears the AssociationEnd C<classifierInState> links to L<UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ClassifierInState|UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ClassifierInState>.
Returns C<$obj>.

=cut
sub clear_classifierInState ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'classifierInState'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'classifierInState'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_type($self) if $old;
    $val->add_type($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_classifierInState>

  $obj->count_classifierInState;

Returns the number of elements associated with C<classifierInState>.

=cut
sub count_classifierInState ($)
{
  my ($self) = @_;

  my $x = $self->{'classifierInState'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd base <---> classifierRole
# type = UMMF::UML_1_5::Behavioral_Elements::Collaborations::ClassifierRole
# multiplicity = 0..*
# ordering = 

=head2 C<classifierRole>

  my @val = $obj->classifierRole;
  my $ary_val = $obj->classifierRole;

Returns the AssociationEnd C<classifierRole> values of type L<UMMF::UML_1_5::Behavioral_Elements::Collaborations::ClassifierRole|UMMF::UML_1_5::Behavioral_Elements::Collaborations::ClassifierRole>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub classifierRole ($)
{
  my ($self) = @_;

    my $x = $self->{'classifierRole'};

  # confess("Container for classifierRole $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_classifierRole>

  $obj->set_classifierRole(@val);

Sets the AssociationEnd C<classifierRole> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Collaborations::ClassifierRole|UMMF::UML_1_5::Behavioral_Elements::Collaborations::ClassifierRole>.
Returns C<$obj>.

=cut
sub set_classifierRole ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_classifierRole;
  $self->add_classifierRole(@val);
}


=head2 C<add_classifierRole>

  $obj->add_classifierRole(@val);

Adds AssociationEnd C<classifierRole> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Collaborations::ClassifierRole|UMMF::UML_1_5::Behavioral_Elements::Collaborations::ClassifierRole>.
Returns C<$obj>.

=cut
sub add_classifierRole ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'classifierRole'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::Behavioral_Elements::Collaborations::ClassifierRole')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.classifierRole");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_base($self) if $old;
    $val->add_base($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_classifierRole>

  $obj->remove_classifierRole(@val);

Removes the AssociationEnd C<classifierRole> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Collaborations::ClassifierRole|UMMF::UML_1_5::Behavioral_Elements::Collaborations::ClassifierRole>.
Returns C<$obj>.

=cut
sub remove_classifierRole ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'classifierRole'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Behavioral_Elements::Collaborations::ClassifierRole')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.classifierRole");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_base($self) if $old;
    $val->add_base($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_classifierRole>

  $obj->clear_classifierRole;

Clears the AssociationEnd C<classifierRole> links to L<UMMF::UML_1_5::Behavioral_Elements::Collaborations::ClassifierRole|UMMF::UML_1_5::Behavioral_Elements::Collaborations::ClassifierRole>.
Returns C<$obj>.

=cut
sub clear_classifierRole ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'classifierRole'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'classifierRole'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_base($self) if $old;
    $val->add_base($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_classifierRole>

  $obj->count_classifierRole;

Returns the number of elements associated with C<classifierRole>.

=cut
sub count_classifierRole ($)
{
  my ($self) = @_;

  my $x = $self->{'classifierRole'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd representedClassifier <---> collaboration_representedClassifier
# type = UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration
# multiplicity = 0..*
# ordering = 

=head2 C<collaboration_representedClassifier>

  my @val = $obj->collaboration_representedClassifier;
  my $ary_val = $obj->collaboration_representedClassifier;

Returns the AssociationEnd C<collaboration_representedClassifier> values of type L<UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration|UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub collaboration_representedClassifier ($)
{
  my ($self) = @_;

    my $x = $self->{'collaboration_representedClassifier'};

  # confess("Container for collaboration_representedClassifier $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_collaboration_representedClassifier>

  $obj->set_collaboration_representedClassifier(@val);

Sets the AssociationEnd C<collaboration_representedClassifier> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration|UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration>.
Returns C<$obj>.

=cut
sub set_collaboration_representedClassifier ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_collaboration_representedClassifier;
  $self->add_collaboration_representedClassifier(@val);
}


=head2 C<add_collaboration_representedClassifier>

  $obj->add_collaboration_representedClassifier(@val);

Adds AssociationEnd C<collaboration_representedClassifier> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration|UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration>.
Returns C<$obj>.

=cut
sub add_collaboration_representedClassifier ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'collaboration_representedClassifier'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.collaboration_representedClassifier");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_representedClassifier($self) if $old;
    $val->add_representedClassifier($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_collaboration_representedClassifier>

  $obj->remove_collaboration_representedClassifier(@val);

Removes the AssociationEnd C<collaboration_representedClassifier> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration|UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration>.
Returns C<$obj>.

=cut
sub remove_collaboration_representedClassifier ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'collaboration_representedClassifier'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.collaboration_representedClassifier");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_representedClassifier($self) if $old;
    $val->add_representedClassifier($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_collaboration_representedClassifier>

  $obj->clear_collaboration_representedClassifier;

Clears the AssociationEnd C<collaboration_representedClassifier> links to L<UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration|UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration>.
Returns C<$obj>.

=cut
sub clear_collaboration_representedClassifier ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'collaboration_representedClassifier'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'collaboration_representedClassifier'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_representedClassifier($self) if $old;
    $val->add_representedClassifier($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_collaboration_representedClassifier>

  $obj->count_collaboration_representedClassifier;

Returns the number of elements associated with C<collaboration_representedClassifier>.

=cut
sub count_collaboration_representedClassifier ($)
{
  my ($self) = @_;

  my $x = $self->{'collaboration_representedClassifier'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd elementType <---> collectionTypes
# type = UMMF::UML_1_5::OCL::Types::CollectionType
# multiplicity = 0..4
# ordering = 

=head2 C<collectionTypes>

  my @val = $obj->collectionTypes;
  my $ary_val = $obj->collectionTypes;

Returns the AssociationEnd C<collectionTypes> values of type L<UMMF::UML_1_5::OCL::Types::CollectionType|UMMF::UML_1_5::OCL::Types::CollectionType>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub collectionTypes ($)
{
  my ($self) = @_;

    my $x = $self->{'collectionTypes'};

  # confess("Container for collectionTypes $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_collectionTypes>

  $obj->set_collectionTypes(@val);

Sets the AssociationEnd C<collectionTypes> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::OCL::Types::CollectionType|UMMF::UML_1_5::OCL::Types::CollectionType>.
Returns C<$obj>.

=cut
sub set_collectionTypes ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_collectionTypes;
  $self->add_collectionTypes(@val);
}


=head2 C<add_collectionTypes>

  $obj->add_collectionTypes(@val);

Adds AssociationEnd C<collectionTypes> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::OCL::Types::CollectionType|UMMF::UML_1_5::OCL::Types::CollectionType>.
Returns C<$obj>.

=cut
sub add_collectionTypes ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'collectionTypes'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::OCL::Types::CollectionType')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.collectionTypes");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_elementType($self) if $old;
    $val->add_elementType($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_collectionTypes>

  $obj->remove_collectionTypes(@val);

Removes the AssociationEnd C<collectionTypes> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::OCL::Types::CollectionType|UMMF::UML_1_5::OCL::Types::CollectionType>.
Returns C<$obj>.

=cut
sub remove_collectionTypes ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'collectionTypes'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::OCL::Types::CollectionType')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.collectionTypes");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_elementType($self) if $old;
    $val->add_elementType($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_collectionTypes>

  $obj->clear_collectionTypes;

Clears the AssociationEnd C<collectionTypes> links to L<UMMF::UML_1_5::OCL::Types::CollectionType|UMMF::UML_1_5::OCL::Types::CollectionType>.
Returns C<$obj>.

=cut
sub clear_collectionTypes ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'collectionTypes'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'collectionTypes'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_elementType($self) if $old;
    $val->add_elementType($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_collectionTypes>

  $obj->count_collectionTypes;

Returns the number of elements associated with C<collectionTypes>.

=cut
sub count_collectionTypes ($)
{
  my ($self) = @_;

  my $x = $self->{'collectionTypes'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd owner <---> feature
# type = UMMF::UML_1_5::Foundation::Core::Feature
# multiplicity = 0..*
# ordering = ordered

=head2 C<feature>

  my @val = $obj->feature;
  my $ary_val = $obj->feature;

Returns the AssociationEnd C<feature> values of type L<UMMF::UML_1_5::Foundation::Core::Feature|UMMF::UML_1_5::Foundation::Core::Feature>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub feature ($)
{
  my ($self) = @_;

    my $x = $self->{'feature'} ||= [ ];

  wantarray ? @{$x} : $x;
  
}


=head2 C<index_feature>

  my $x = $obj->index_feature($i);
  my @x = $obj->index_feature($i, $count);

In scalar context, returns the value of AssociationEnd C<feature> at index C<$i>.
In array context, returns the values between index C<$i> and C<$i + $count - 1>, inclusive.

=cut
sub index_feature ($$@)
{
  my ($self, $i, $count) = @_;

  ;

  my $val = $self->{'feature'} ||= [ ];

  ;

  wantarray ? $val->[$i .. (defined $count ? $i + $count - 1 : $i)]
            : $val->[$i];
}


=head2 C<index_of_feature>

  my $index = $obj->index_of_feature($val);

Returns the index of C<$val> in AssociationEnd C<feature>.
Return C<undef> if C<$val> is not in C<feature>.

=cut
sub index_of_feature ($$)
{
  my ($self, $x) = @_;

  ;

  my $val = $self->{'feature'} ||= [ ];

  ;

  __ummf_array_index($val, $x);
}


=head2 C<set_feature>

  $obj->set_feature(@val);

Sets the AssociationEnd C<feature> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::Feature|UMMF::UML_1_5::Foundation::Core::Feature>.
Returns C<$obj>.

=cut
sub set_feature ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_feature;
  $self->add_feature(@val);
}


=head2 C<set_index_feature>

  $obj->set_index_feature($i, $val);

Sets the value of AssociationEnd C<feature> at index C<$i>.
Returns self.

=cut
sub set_index_feature ($$$)
{
  my ($self, $i, $val) = @_;

  ;

  my $x = $self->{'feature'} ||= [ ];

  no warnings;
  my $old;
  if ( ($old = $x->[$i]) ne $val) {
    # Recursion lock
        $x->[$i] = $val
    ;

    # Remove and add associations with other ends.
        
    $old->remove_owner($self) if $old;
    $val->add_owner($self)    if $val;

  
    ;
  }

  $self;
}


=head2 C<add_feature>

  $obj->add_feature(@val);

Adds AssociationEnd C<feature> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::Feature|UMMF::UML_1_5::Foundation::Core::Feature>.
Returns C<$obj>.

=cut
sub add_feature ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'feature'} ||= [ ];
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if grep($_ eq $val, @$x);
        $self->__use('UMMF::UML_1_5::Foundation::Core::Feature')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.feature");

    # Recursion lock
        push(@{$x}, $val);
        
    # Remove and add associations with other ends.
        
    $old->remove_owner($self) if $old;
    $val->add_owner($self)    if $val;

    }
  
  $self;
}


=head2 C<add_index_feature>

  $obj->add_index_feature($i, @val);

Adds AssociationEnd C<feature> values at index C<$i>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::Feature|UMMF::UML_1_5::Foundation::Core::Feature>.
Returns C<$obj>.

=cut
sub add_index_feature ($$@)
{
  my ($self, $i, @val) = @_;

  
    my $x = $self->{'feature'} ||= [ ];
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if grep($_ eq $val, @$x);
        $self->__use('UMMF::UML_1_5::Foundation::Core::Feature')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.feature");

    # Recursion lock
        splice(@{$x}, $i, 0, $val); # Recursion lock
        ++ $i;
    
    # Remove and add associations with other ends.
        
    $old->remove_owner($self) if $old;
    $val->add_owner($self)    if $val;

    }
  
  
  $self;
}


=head2 C<remove_feature>

  $obj->remove_feature(@val);

Removes the AssociationEnd C<feature> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::Feature|UMMF::UML_1_5::Foundation::Core::Feature>.
Returns C<$obj>.

=cut
sub remove_feature ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'feature'} ||= [ ];
  
  for my $old ( @val ) {
    # Recursion lock
        my $i; # index of $old in @$x.
    next unless defined($i = __ummf_array_index($x, $old));
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Foundation::Core::Feature')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.feature");

    # Recursion lock
        splice(@$x, $i, 1);     
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_owner($self) if $old;
    $val->add_owner($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_feature>

  $obj->clear_feature;

Clears the AssociationEnd C<feature> links to L<UMMF::UML_1_5::Foundation::Core::Feature|UMMF::UML_1_5::Foundation::Core::Feature>.
Returns C<$obj>.

=cut
sub clear_feature ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'feature'} ||= [ ];
  
  my $val; # Place holder for other MACRO.
  
    $self->{'feature'} = [ ];  # Recursion lock
  for my $old ( @$x ) { # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_owner($self) if $old;
    $val->add_owner($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_feature>

  $obj->count_feature;

Returns the number of elements associated with C<feature>.

=cut
sub count_feature ($)
{
  my ($self) = @_;

  my $x = $self->{'feature'};

    defined $x ? scalar @$x : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd classifier <---> instance
# type = UMMF::UML_1_5::Behavioral_Elements::Common_Behavior::Instance
# multiplicity = 0..*
# ordering = 

=head2 C<instance>

  my @val = $obj->instance;
  my $ary_val = $obj->instance;

Returns the AssociationEnd C<instance> values of type L<UMMF::UML_1_5::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML_1_5::Behavioral_Elements::Common_Behavior::Instance>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub instance ($)
{
  my ($self) = @_;

    my $x = $self->{'instance'};

  # confess("Container for instance $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_instance>

  $obj->set_instance(@val);

Sets the AssociationEnd C<instance> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML_1_5::Behavioral_Elements::Common_Behavior::Instance>.
Returns C<$obj>.

=cut
sub set_instance ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_instance;
  $self->add_instance(@val);
}


=head2 C<add_instance>

  $obj->add_instance(@val);

Adds AssociationEnd C<instance> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML_1_5::Behavioral_Elements::Common_Behavior::Instance>.
Returns C<$obj>.

=cut
sub add_instance ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'instance'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::Behavioral_Elements::Common_Behavior::Instance')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.instance");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_classifier($self) if $old;
    $val->add_classifier($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_instance>

  $obj->remove_instance(@val);

Removes the AssociationEnd C<instance> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML_1_5::Behavioral_Elements::Common_Behavior::Instance>.
Returns C<$obj>.

=cut
sub remove_instance ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'instance'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Behavioral_Elements::Common_Behavior::Instance')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.instance");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_classifier($self) if $old;
    $val->add_classifier($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_instance>

  $obj->clear_instance;

Clears the AssociationEnd C<instance> links to L<UMMF::UML_1_5::Behavioral_Elements::Common_Behavior::Instance|UMMF::UML_1_5::Behavioral_Elements::Common_Behavior::Instance>.
Returns C<$obj>.

=cut
sub clear_instance ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'instance'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'instance'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_classifier($self) if $old;
    $val->add_classifier($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_instance>

  $obj->count_instance;

Returns the number of elements associated with C<instance>.

=cut
sub count_instance ($)
{
  my ($self) = @_;

  my $x = $self->{'instance'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd type <---> objectFlowState
# type = UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ObjectFlowState
# multiplicity = 0..*
# ordering = 

=head2 C<objectFlowState>

  my @val = $obj->objectFlowState;
  my $ary_val = $obj->objectFlowState;

Returns the AssociationEnd C<objectFlowState> values of type L<UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ObjectFlowState|UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ObjectFlowState>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub objectFlowState ($)
{
  my ($self) = @_;

    my $x = $self->{'objectFlowState'};

  # confess("Container for objectFlowState $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_objectFlowState>

  $obj->set_objectFlowState(@val);

Sets the AssociationEnd C<objectFlowState> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ObjectFlowState|UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ObjectFlowState>.
Returns C<$obj>.

=cut
sub set_objectFlowState ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_objectFlowState;
  $self->add_objectFlowState(@val);
}


=head2 C<add_objectFlowState>

  $obj->add_objectFlowState(@val);

Adds AssociationEnd C<objectFlowState> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ObjectFlowState|UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ObjectFlowState>.
Returns C<$obj>.

=cut
sub add_objectFlowState ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'objectFlowState'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ObjectFlowState')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.objectFlowState");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_type($self) if $old;
    $val->add_type($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_objectFlowState>

  $obj->remove_objectFlowState(@val);

Removes the AssociationEnd C<objectFlowState> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ObjectFlowState|UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ObjectFlowState>.
Returns C<$obj>.

=cut
sub remove_objectFlowState ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'objectFlowState'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ObjectFlowState')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.objectFlowState");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_type($self) if $old;
    $val->add_type($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_objectFlowState>

  $obj->clear_objectFlowState;

Clears the AssociationEnd C<objectFlowState> links to L<UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ObjectFlowState|UMMF::UML_1_5::Behavioral_Elements::Activity_Graphs::ObjectFlowState>.
Returns C<$obj>.

=cut
sub clear_objectFlowState ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'objectFlowState'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'objectFlowState'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_type($self) if $old;
    $val->add_type($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_objectFlowState>

  $obj->count_objectFlowState;

Returns the number of elements associated with C<objectFlowState>.

=cut
sub count_objectFlowState ($)
{
  my ($self) = @_;

  my $x = $self->{'objectFlowState'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd type <---> parameter
# type = UMMF::UML_1_5::Foundation::Core::Parameter
# multiplicity = 0..*
# ordering = 

=head2 C<parameter>

  my @val = $obj->parameter;
  my $ary_val = $obj->parameter;

Returns the AssociationEnd C<parameter> values of type L<UMMF::UML_1_5::Foundation::Core::Parameter|UMMF::UML_1_5::Foundation::Core::Parameter>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub parameter ($)
{
  my ($self) = @_;

    my $x = $self->{'parameter'};

  # confess("Container for parameter $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_parameter>

  $obj->set_parameter(@val);

Sets the AssociationEnd C<parameter> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::Parameter|UMMF::UML_1_5::Foundation::Core::Parameter>.
Returns C<$obj>.

=cut
sub set_parameter ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_parameter;
  $self->add_parameter(@val);
}


=head2 C<add_parameter>

  $obj->add_parameter(@val);

Adds AssociationEnd C<parameter> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::Parameter|UMMF::UML_1_5::Foundation::Core::Parameter>.
Returns C<$obj>.

=cut
sub add_parameter ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'parameter'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::Foundation::Core::Parameter')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.parameter");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_type($self) if $old;
    $val->add_type($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_parameter>

  $obj->remove_parameter(@val);

Removes the AssociationEnd C<parameter> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::Parameter|UMMF::UML_1_5::Foundation::Core::Parameter>.
Returns C<$obj>.

=cut
sub remove_parameter ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'parameter'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Foundation::Core::Parameter')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.parameter");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_type($self) if $old;
    $val->add_type($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_parameter>

  $obj->clear_parameter;

Clears the AssociationEnd C<parameter> links to L<UMMF::UML_1_5::Foundation::Core::Parameter|UMMF::UML_1_5::Foundation::Core::Parameter>.
Returns C<$obj>.

=cut
sub clear_parameter ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'parameter'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'parameter'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_type($self) if $old;
    $val->add_type($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_parameter>

  $obj->count_parameter;

Returns the number of elements associated with C<parameter>.

=cut
sub count_parameter ($)
{
  my ($self) = @_;

  my $x = $self->{'parameter'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd type <---> pin
# type = UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Pin
# multiplicity = 0..*
# ordering = 

=head2 C<pin>

  my @val = $obj->pin;
  my $ary_val = $obj->pin;

Returns the AssociationEnd C<pin> values of type L<UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Pin|UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Pin>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub pin ($)
{
  my ($self) = @_;

    my $x = $self->{'pin'};

  # confess("Container for pin $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_pin>

  $obj->set_pin(@val);

Sets the AssociationEnd C<pin> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Pin|UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Pin>.
Returns C<$obj>.

=cut
sub set_pin ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_pin;
  $self->add_pin(@val);
}


=head2 C<add_pin>

  $obj->add_pin(@val);

Adds AssociationEnd C<pin> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Pin|UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Pin>.
Returns C<$obj>.

=cut
sub add_pin ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'pin'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Pin')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.pin");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_type($self) if $old;
    $val->add_type($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_pin>

  $obj->remove_pin(@val);

Removes the AssociationEnd C<pin> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Pin|UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Pin>.
Returns C<$obj>.

=cut
sub remove_pin ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'pin'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Pin')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.pin");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_type($self) if $old;
    $val->add_type($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_pin>

  $obj->clear_pin;

Clears the AssociationEnd C<pin> links to L<UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Pin|UMMF::UML_1_5::Behavioral_Elements::Actions::Action_Foundation::Pin>.
Returns C<$obj>.

=cut
sub clear_pin ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'pin'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'pin'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_type($self) if $old;
    $val->add_type($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_pin>

  $obj->count_pin;

Returns the number of elements associated with C<pin>.

=cut
sub count_pin ($)
{
  my ($self) = @_;

  my $x = $self->{'pin'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd powertype <---> powertypeRange
# type = UMMF::UML_1_5::Foundation::Core::Generalization
# multiplicity = 0..*
# ordering = 

=head2 C<powertypeRange>

  my @val = $obj->powertypeRange;
  my $ary_val = $obj->powertypeRange;

Returns the AssociationEnd C<powertypeRange> values of type L<UMMF::UML_1_5::Foundation::Core::Generalization|UMMF::UML_1_5::Foundation::Core::Generalization>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub powertypeRange ($)
{
  my ($self) = @_;

    my $x = $self->{'powertypeRange'};

  # confess("Container for powertypeRange $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_powertypeRange>

  $obj->set_powertypeRange(@val);

Sets the AssociationEnd C<powertypeRange> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::Generalization|UMMF::UML_1_5::Foundation::Core::Generalization>.
Returns C<$obj>.

=cut
sub set_powertypeRange ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_powertypeRange;
  $self->add_powertypeRange(@val);
}


=head2 C<add_powertypeRange>

  $obj->add_powertypeRange(@val);

Adds AssociationEnd C<powertypeRange> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::Generalization|UMMF::UML_1_5::Foundation::Core::Generalization>.
Returns C<$obj>.

=cut
sub add_powertypeRange ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'powertypeRange'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::Foundation::Core::Generalization')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.powertypeRange");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_powertype($self) if $old;
    $val->add_powertype($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_powertypeRange>

  $obj->remove_powertypeRange(@val);

Removes the AssociationEnd C<powertypeRange> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::Generalization|UMMF::UML_1_5::Foundation::Core::Generalization>.
Returns C<$obj>.

=cut
sub remove_powertypeRange ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'powertypeRange'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Foundation::Core::Generalization')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.powertypeRange");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_powertype($self) if $old;
    $val->add_powertype($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_powertypeRange>

  $obj->clear_powertypeRange;

Clears the AssociationEnd C<powertypeRange> links to L<UMMF::UML_1_5::Foundation::Core::Generalization|UMMF::UML_1_5::Foundation::Core::Generalization>.
Returns C<$obj>.

=cut
sub clear_powertypeRange ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'powertypeRange'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'powertypeRange'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_powertype($self) if $old;
    $val->add_powertype($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_powertypeRange>

  $obj->count_powertypeRange;

Returns the number of elements associated with C<powertypeRange>.

=cut
sub count_powertypeRange ($)
{
  my ($self) = @_;

  my $x = $self->{'powertypeRange'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd specification <---> specifiedEnd
# type = UMMF::UML_1_5::Foundation::Core::AssociationEnd
# multiplicity = 0..*
# ordering = 

=head2 C<specifiedEnd>

  my @val = $obj->specifiedEnd;
  my $ary_val = $obj->specifiedEnd;

Returns the AssociationEnd C<specifiedEnd> values of type L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub specifiedEnd ($)
{
  my ($self) = @_;

    my $x = $self->{'specifiedEnd'};

  # confess("Container for specifiedEnd $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_specifiedEnd>

  $obj->set_specifiedEnd(@val);

Sets the AssociationEnd C<specifiedEnd> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>.
Returns C<$obj>.

=cut
sub set_specifiedEnd ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_specifiedEnd;
  $self->add_specifiedEnd(@val);
}


=head2 C<add_specifiedEnd>

  $obj->add_specifiedEnd(@val);

Adds AssociationEnd C<specifiedEnd> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>.
Returns C<$obj>.

=cut
sub add_specifiedEnd ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'specifiedEnd'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::Foundation::Core::AssociationEnd')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.specifiedEnd");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_specification($self) if $old;
    $val->add_specification($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_specifiedEnd>

  $obj->remove_specifiedEnd(@val);

Removes the AssociationEnd C<specifiedEnd> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>.
Returns C<$obj>.

=cut
sub remove_specifiedEnd ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'specifiedEnd'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Foundation::Core::AssociationEnd')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.specifiedEnd");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_specification($self) if $old;
    $val->add_specification($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_specifiedEnd>

  $obj->clear_specifiedEnd;

Clears the AssociationEnd C<specifiedEnd> links to L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>.
Returns C<$obj>.

=cut
sub clear_specifiedEnd ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'specifiedEnd'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'specifiedEnd'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_specification($self) if $old;
    $val->add_specification($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_specifiedEnd>

  $obj->count_specifiedEnd;

Returns the number of elements associated with C<specifiedEnd>.

=cut
sub count_specifiedEnd ($)
{
  my ($self) = @_;

  my $x = $self->{'specifiedEnd'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd type <---> typedFeature
# type = UMMF::UML_1_5::Foundation::Core::StructuralFeature
# multiplicity = 0..*
# ordering = 

=head2 C<typedFeature>

  my @val = $obj->typedFeature;
  my $ary_val = $obj->typedFeature;

Returns the AssociationEnd C<typedFeature> values of type L<UMMF::UML_1_5::Foundation::Core::StructuralFeature|UMMF::UML_1_5::Foundation::Core::StructuralFeature>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub typedFeature ($)
{
  my ($self) = @_;

    my $x = $self->{'typedFeature'};

  # confess("Container for typedFeature $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_typedFeature>

  $obj->set_typedFeature(@val);

Sets the AssociationEnd C<typedFeature> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::StructuralFeature|UMMF::UML_1_5::Foundation::Core::StructuralFeature>.
Returns C<$obj>.

=cut
sub set_typedFeature ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_typedFeature;
  $self->add_typedFeature(@val);
}


=head2 C<add_typedFeature>

  $obj->add_typedFeature(@val);

Adds AssociationEnd C<typedFeature> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::StructuralFeature|UMMF::UML_1_5::Foundation::Core::StructuralFeature>.
Returns C<$obj>.

=cut
sub add_typedFeature ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'typedFeature'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::Foundation::Core::StructuralFeature')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.typedFeature");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_type($self) if $old;
    $val->add_type($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_typedFeature>

  $obj->remove_typedFeature(@val);

Removes the AssociationEnd C<typedFeature> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::StructuralFeature|UMMF::UML_1_5::Foundation::Core::StructuralFeature>.
Returns C<$obj>.

=cut
sub remove_typedFeature ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'typedFeature'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Foundation::Core::StructuralFeature')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Classifier.typedFeature");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_type($self) if $old;
    $val->add_type($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_typedFeature>

  $obj->clear_typedFeature;

Clears the AssociationEnd C<typedFeature> links to L<UMMF::UML_1_5::Foundation::Core::StructuralFeature|UMMF::UML_1_5::Foundation::Core::StructuralFeature>.
Returns C<$obj>.

=cut
sub clear_typedFeature ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'typedFeature'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'typedFeature'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_type($self) if $old;
    $val->add_type($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_typedFeature>

  $obj->count_typedFeature;

Returns the number of elements associated with C<typedFeature>.

=cut
sub count_typedFeature ($)
{
  my ($self) = @_;

  my $x = $self->{'typedFeature'};

    defined $x ? $x->size : 0;
  }







# End of Class Classifier


=pod

=for html <hr/>

I<END OF DOCUMENT>

=cut

############################################################################

1; # is true!

############################################################################

### Keep these comments at end of file: kstephens@users.sourceforge.net 2003/04/06 ###
### Local Variables: ###
### mode:perl ###
### perl-indent-level:2 ###
### perl-continued-statement-offset:0 ###
### perl-brace-offset:0 ###
### perl-label-offset:0 ###
### End: ###

