# -*- perl -*-
# DO NOT EDIT - This file is generated by UMMF; http://ummf.sourceforge.net 
# From template: $Id: Perl.txt,v 1.77 2006/05/14 01:40:03 kstephens Exp $

package UMMF::UML_1_5::Foundation::Core::Node;

#use 5.6.1;
use strict;
use warnings;

#################################################################
# Version
#

our $VERSION = do { my @r = (q{1.5} =~ /\d+/g); sprintf "%d." . "%03d" x $#r, @r };


#################################################################
# Documentation
#

=head1 NAME

UMMF::UML_1_5::Foundation::Core::Node -- 

=head1 VERSION

1.5

=head1 SYNOPSIS

=head1 DESCRIPTION 

=head1 USAGE

=head1 EXPORT

=head1 METATYPE

L<UMMF::UML_1_5::Foundation::Core::Class|UMMF::UML_1_5::Foundation::Core::Class>

=head1 SUPERCLASSES

L<UMMF::UML_1_5::Foundation::Core::Classifier|UMMF::UML_1_5::Foundation::Core::Classifier>




=head1 ATTRIBUTES

I<NO ATTRIBUTES>


=head1 ASSOCIATIONS


=head2 C<deploymentLocation> : I<THIS> C<0..*> E<lt>---E<gt>  C<deployedComponent> : UMMF::UML_1_5::Foundation::Core::Component C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Foundation::Core::Component|UMMF::UML_1_5::Foundation::Core::Component>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back



=head1 METHODS

=cut



#################################################################
# Dependencies
#





use Carp qw(croak confess);
use Set::Object 1.05;
use Class::Multimethods 1.70;
use Data::Dumper;
use Scalar::Util qw(weaken);
use UMMF::UML_1_5::__ObjectBase qw(:__ummf_array);


#################################################################
# Generalizations
#

use base qw(
  UMMF::UML_1_5::Foundation::Core::Classifier



);


#################################################################
# Exports
#

our @EXPORT_OK = qw(
);
our %EXPORT_TAGS = ( 'all' => \@EXPORT_OK );





#################################################################
# Validation
#


=head2 C<__validate_type>

  UMMF::UML_1_5::Foundation::Core::Node->__validate_type($value);

Returns true if C<$value> is a valid representation of L<UMMF::UML_1_5::Foundation::Core::Node|UMMF::UML_1_5::Foundation::Core::Node>.

=cut
sub __validate_type($$)
{
  my ($self, $x) = @_;

  no warnings;

  UNIVERSAL::isa($x, 'UMMF::UML_1_5::Foundation::Core::Node')  ;
}


=head2 C<__typecheck>

  UMMF::UML_1_5::Foundation::Core::Node->__typecheck($value, $msg);

Calls C<confess()> with C<$msg> if C<<UMMF::UML_1_5::Foundation::Core::Node->__validate_type($value)>> is false.

=cut
sub __typecheck
{
  my ($self, $x, $msg) = @_;

  confess("typecheck: $msg: type '" . 'UMMF::UML_1_5::Foundation::Core::Node' . ": value '$x'")
    unless __validate_type($self, $x);
}


=head2 C<isaNode>


Returns true if receiver is a L<UMMF::UML_1_5::Foundation::Core::Node|UMMF::UML_1_5::Foundation::Core::Node>.
Other receivers will return false.

=cut
sub isaNode { 1 }


=head2 C<isaFoundation__Core__Node>


Returns true if receiver is a L<UMMF::UML_1_5::Foundation::Core::Node|UMMF::UML_1_5::Foundation::Core::Node>.
Other receivers will return false.
This is the fully qualified version of the C<isaNode> method.

=cut
sub isaFoundation__Core__Node { 1 }


#################################################################
# Introspection
#

=head2 C<__model_name> 

  my $name = $obj_or_package->__model_name;

Returns the UML Model name (C<'Foundation::Core::Node'>) for an object or package of
this Classifier.

=cut
sub __model_name { 'Foundation::Core::Node' }



=head2 C<__isAbstract>

  $package->__isAbstract;

Returns C<0>.

=cut
sub __isAbstract { 0; }


my $__tangram_schema;
=head2 C<__tangram_schema>

  my $tangram_schema $obj_or_package->__tangram_schema

Returns a HASH ref that describes this Classifier for Tangram.

See L<UMMF::Export::Perl::Tangram|UMMF::Export::Perl::Tangram>

=cut
sub __tangram_schema
{
  my ($self) = @_;

  $__tangram_schema ||=
  {
   'classes' =>
   [
     'UMMF::UML_1_5::Foundation::Core::Node' =>
     {
       'table' => 'Foundation__Core__Node',
       'abstract' => 0,
       'slots' => 
       { 
	 # Attributes
	 
	 # Associations
	 	 	       'deployedComponent'
       => {
	 'type_impl' => 'set',
         'class' => 'UMMF::UML_1_5::Foundation::Core::Component',

                           'table' => 'Foundation__Core__DeploymentLocation_DeployedComponent', 

                                                      'item' => 'deployedComponent', 

                  'coll' => 'deploymentLocation',

                                                                               }
      ,
                         },
       'bases' => [  'UMMF::UML_1_5::Foundation::Core::Classifier',  ],
       'sql' => {

       },
     },
   ],

   'sql' =>
   {
    # Note Tangram::Ref::get_exporter() has
    # "UPDATE $table SET $self->{col} = $refid WHERE id = $id",
    # The id_col is hard-coded, 
    # Thus id_col will not work.
    #'id_col' => '__sid',
    #'class_col' => '__stype',
   },
     # 'set_id' => sub { }
     # 'get_id' => sub { }

      
  };
}


#################################################################
# Class Attributes
#


    

#################################################################
# Class Associations
#


    

#################################################################
# Initialization
#


=head2 C<___initialize>

Initialize all Attributes and AssociationEnds in a instance of this Classifier.
Does B<not> initalize slots in its Generalizations.

See also: C<__initialize>.

=cut
sub ___initialize
{
  my ($self) = @_;

  # Attributes



  # Associations

  # AssociationEnd 
  #  deploymentLocation 0..*
  #  <--> 
  #  deployedComponent 0..* UMMF::UML_1_5::Foundation::Core::Component.
    if ( defined $self->{'deployedComponent'} ) {
    my $x = $self->{'deployedComponent'};
        $self->{'deployedComponent'} = Set::Object->new();
        $self->set_deployedComponent(@$x);
  }
  

  $self;
}


my $__initialize_use;

=head2 C<__initialize>

Initialize all slots in this Classifier and all its Generalizations.

See also: C<___initialize>.

=cut
sub __initialize
{
  my ($self) = @_;

  # $DB::single = 1;

  unless ( ! $__initialize_use ) {
    $__initialize_use = 1;
    $self->__use('UMMF::UML_1_5::Foundation::Core::Namespace');
    $self->__use('UMMF::UML_1_5::Foundation::Core::Element');
    $self->__use('UMMF::UML_1_5::Foundation::Core::ModelElement');
    $self->__use('UMMF::UML_1_5::Foundation::Core::GeneralizableElement');
    $self->__use('UMMF::UML_1_5::Foundation::Core::Classifier');
  }

  $self->UMMF::UML_1_5::Foundation::Core::Node::___initialize;
  $self->UMMF::UML_1_5::Foundation::Core::Namespace::___initialize;
  $self->UMMF::UML_1_5::Foundation::Core::Element::___initialize;
  $self->UMMF::UML_1_5::Foundation::Core::ModelElement::___initialize;
  $self->UMMF::UML_1_5::Foundation::Core::GeneralizableElement::___initialize;
  $self->UMMF::UML_1_5::Foundation::Core::Classifier::___initialize;

  $self;
}
      

=head2 C<__create>

Calls all <<create>> Methods for this Classifier and all Generalizations.

See also: C<___create>.

=cut
sub __create
{
  my ($self, @args) = @_;

  # $DB::single = 1;
  $self->UMMF::UML_1_5::Foundation::Core::Node::___create(@args);
  $self->UMMF::UML_1_5::Foundation::Core::Namespace::___create();
  $self->UMMF::UML_1_5::Foundation::Core::Element::___create();
  $self->UMMF::UML_1_5::Foundation::Core::ModelElement::___create();
  $self->UMMF::UML_1_5::Foundation::Core::GeneralizableElement::___create();
  $self->UMMF::UML_1_5::Foundation::Core::Classifier::___create();

  $self;
}




#################################################################
# Attributes
#




#################################################################
# Association
#


=for html <hr/>

=cut

#################################################################
# AssociationEnd deploymentLocation <---> deployedComponent
# type = UMMF::UML_1_5::Foundation::Core::Component
# multiplicity = 0..*
# ordering = 

=head2 C<deployedComponent>

  my @val = $obj->deployedComponent;
  my $ary_val = $obj->deployedComponent;

Returns the AssociationEnd C<deployedComponent> values of type L<UMMF::UML_1_5::Foundation::Core::Component|UMMF::UML_1_5::Foundation::Core::Component>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub deployedComponent ($)
{
  my ($self) = @_;

    my $x = $self->{'deployedComponent'};

  # confess("Container for deployedComponent $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_deployedComponent>

  $obj->set_deployedComponent(@val);

Sets the AssociationEnd C<deployedComponent> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::Component|UMMF::UML_1_5::Foundation::Core::Component>.
Returns C<$obj>.

=cut
sub set_deployedComponent ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_deployedComponent;
  $self->add_deployedComponent(@val);
}


=head2 C<add_deployedComponent>

  $obj->add_deployedComponent(@val);

Adds AssociationEnd C<deployedComponent> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::Component|UMMF::UML_1_5::Foundation::Core::Component>.
Returns C<$obj>.

=cut
sub add_deployedComponent ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'deployedComponent'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::Foundation::Core::Component')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Node.deployedComponent");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_deploymentLocation($self) if $old;
    $val->add_deploymentLocation($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_deployedComponent>

  $obj->remove_deployedComponent(@val);

Removes the AssociationEnd C<deployedComponent> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::Component|UMMF::UML_1_5::Foundation::Core::Component>.
Returns C<$obj>.

=cut
sub remove_deployedComponent ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'deployedComponent'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Foundation::Core::Component')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Node.deployedComponent");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_deploymentLocation($self) if $old;
    $val->add_deploymentLocation($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_deployedComponent>

  $obj->clear_deployedComponent;

Clears the AssociationEnd C<deployedComponent> links to L<UMMF::UML_1_5::Foundation::Core::Component|UMMF::UML_1_5::Foundation::Core::Component>.
Returns C<$obj>.

=cut
sub clear_deployedComponent ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'deployedComponent'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'deployedComponent'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_deploymentLocation($self) if $old;
    $val->add_deploymentLocation($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_deployedComponent>

  $obj->count_deployedComponent;

Returns the number of elements associated with C<deployedComponent>.

=cut
sub count_deployedComponent ($)
{
  my ($self) = @_;

  my $x = $self->{'deployedComponent'};

    defined $x ? $x->size : 0;
  }







# End of Class Node


=pod

=for html <hr/>

I<END OF DOCUMENT>

=cut

############################################################################

1; # is true!

############################################################################

### Keep these comments at end of file: kstephens@users.sourceforge.net 2003/04/06 ###
### Local Variables: ###
### mode:perl ###
### perl-indent-level:2 ###
### perl-continued-statement-offset:0 ###
### perl-brace-offset:0 ###
### perl-label-offset:0 ###
### End: ###

