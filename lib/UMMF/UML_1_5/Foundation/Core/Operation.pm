# -*- perl -*-
# DO NOT EDIT - This file is generated by UMMF; http://ummf.sourceforge.net 
# From template: $Id: Perl.txt,v 1.77 2006/05/14 01:40:03 kstephens Exp $

package UMMF::UML_1_5::Foundation::Core::Operation;

#use 5.6.1;
use strict;
use warnings;

#################################################################
# Version
#

our $VERSION = do { my @r = (q{1.5} =~ /\d+/g); sprintf "%d." . "%03d" x $#r, @r };


#################################################################
# Documentation
#

=head1 NAME

UMMF::UML_1_5::Foundation::Core::Operation -- 

=head1 VERSION

1.5

=head1 SYNOPSIS

=head1 DESCRIPTION 

=head1 USAGE

=head1 EXPORT

=head1 METATYPE

L<UMMF::UML_1_5::Foundation::Core::Class|UMMF::UML_1_5::Foundation::Core::Class>

=head1 SUPERCLASSES

L<UMMF::UML_1_5::Foundation::Core::BehavioralFeature|UMMF::UML_1_5::Foundation::Core::BehavioralFeature>




=head1 ATTRIBUTES


=head2 C<concurrency> : UMMF::UML_1_5::Foundation::Data_Types::CallConcurrencyKind 


=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::Attribute|UMMF::UML_1_5::Foundation::Core::Attribute>

=item type = L<UMMF::UML_1_5::Foundation::Data_Types::CallConcurrencyKind|UMMF::UML_1_5::Foundation::Data_Types::CallConcurrencyKind>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = C<<"sequential">>

=item container_type = C<Set::Object>

=back


=head2 C<isRoot> : UMMF::UML_1_5::Foundation::Data_Types::Boolean 


=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::Attribute|UMMF::UML_1_5::Foundation::Core::Attribute>

=item type = L<UMMF::UML_1_5::Foundation::Data_Types::Boolean|UMMF::UML_1_5::Foundation::Data_Types::Boolean>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = C<<"false">>

=item container_type = C<Set::Object>

=back


=head2 C<isLeaf> : UMMF::UML_1_5::Foundation::Data_Types::Boolean 


=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::Attribute|UMMF::UML_1_5::Foundation::Core::Attribute>

=item type = L<UMMF::UML_1_5::Foundation::Data_Types::Boolean|UMMF::UML_1_5::Foundation::Data_Types::Boolean>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = C<<"false">>

=item container_type = C<Set::Object>

=back


=head2 C<isAbstract> : UMMF::UML_1_5::Foundation::Data_Types::Boolean 


=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::Attribute|UMMF::UML_1_5::Foundation::Core::Attribute>

=item type = L<UMMF::UML_1_5::Foundation::Data_Types::Boolean|UMMF::UML_1_5::Foundation::Data_Types::Boolean>

=item visibility = C<private>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<unordered>

=item initialValue = C<<"false">>

=item container_type = C<Set::Object>

=back



=head1 ASSOCIATIONS


=head2 C<representedOperation> : I<THIS> C<0..1> E<lt>---E<gt>  C<collaboration_representedOperation> : UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration|UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<specification> : I<THIS> C<1> E<lt>---E<gt>  C<method> : UMMF::UML_1_5::Foundation::Core::Method C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Foundation::Core::Method|UMMF::UML_1_5::Foundation::Core::Method>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<operation> : I<THIS> C<1> E<lt>---E<gt>  C<occurance> : UMMF::UML_1_5::Behavioral_Elements::State_Machines::CallEvent C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::State_Machines::CallEvent|UMMF::UML_1_5::Behavioral_Elements::State_Machines::CallEvent>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<1>

=item aggregation = C<none>

=item visibility = C<public>

=item container_type = C<Set::Object>

=back


=head2 C<operation> : I<THIS> C<1> E<lt>----  C<> : UMMF::UML_1_5::Behavioral_Elements::Actions::Messaging_Actions::CallOperationAction C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::Behavioral_Elements::Actions::Messaging_Actions::CallOperationAction|UMMF::UML_1_5::Behavioral_Elements::Actions::Messaging_Actions::CallOperationAction>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<referredOperation> : I<THIS> C<1> E<lt>----  C<> : UMMF::UML_1_5::OCL::Expressions::OperationCallExp C<0..*>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::OCL::Expressions::OperationCallExp|UMMF::UML_1_5::OCL::Expressions::OperationCallExp>

=item multiplicity = C<0..*>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back


=head2 C<referredOperation> : I<THIS> C<0..1> E<lt>----  C<> : UMMF::UML_1_5::OCL::Types::OclMessageType C<1>



=over 4

=item metatype = L<UMMF::UML_1_5::Foundation::Core::AssociationEnd|UMMF::UML_1_5::Foundation::Core::AssociationEnd>

=item type = L<UMMF::UML_1_5::OCL::Types::OclMessageType|UMMF::UML_1_5::OCL::Types::OclMessageType>

=item multiplicity = C<1>

=item changeability = C<changeable>

=item targetScope = C<instance>

=item ordering = C<>

=item isNavigable = C<0>

=item aggregation = C<none>

=item visibility = C<private>

=item container_type = C<Set::Object>

=back



=head1 METHODS

=cut



#################################################################
# Dependencies
#





use Carp qw(croak confess);
use Set::Object 1.05;
use Class::Multimethods 1.70;
use Data::Dumper;
use Scalar::Util qw(weaken);
use UMMF::UML_1_5::__ObjectBase qw(:__ummf_array);


#################################################################
# Generalizations
#

use base qw(
  UMMF::UML_1_5::Foundation::Core::BehavioralFeature



);


#################################################################
# Exports
#

our @EXPORT_OK = qw(
);
our %EXPORT_TAGS = ( 'all' => \@EXPORT_OK );





#################################################################
# Validation
#


=head2 C<__validate_type>

  UMMF::UML_1_5::Foundation::Core::Operation->__validate_type($value);

Returns true if C<$value> is a valid representation of L<UMMF::UML_1_5::Foundation::Core::Operation|UMMF::UML_1_5::Foundation::Core::Operation>.

=cut
sub __validate_type($$)
{
  my ($self, $x) = @_;

  no warnings;

  UNIVERSAL::isa($x, 'UMMF::UML_1_5::Foundation::Core::Operation')  ;
}


=head2 C<__typecheck>

  UMMF::UML_1_5::Foundation::Core::Operation->__typecheck($value, $msg);

Calls C<confess()> with C<$msg> if C<<UMMF::UML_1_5::Foundation::Core::Operation->__validate_type($value)>> is false.

=cut
sub __typecheck
{
  my ($self, $x, $msg) = @_;

  confess("typecheck: $msg: type '" . 'UMMF::UML_1_5::Foundation::Core::Operation' . ": value '$x'")
    unless __validate_type($self, $x);
}


=head2 C<isaOperation>


Returns true if receiver is a L<UMMF::UML_1_5::Foundation::Core::Operation|UMMF::UML_1_5::Foundation::Core::Operation>.
Other receivers will return false.

=cut
sub isaOperation { 1 }


=head2 C<isaFoundation__Core__Operation>


Returns true if receiver is a L<UMMF::UML_1_5::Foundation::Core::Operation|UMMF::UML_1_5::Foundation::Core::Operation>.
Other receivers will return false.
This is the fully qualified version of the C<isaOperation> method.

=cut
sub isaFoundation__Core__Operation { 1 }


#################################################################
# Introspection
#

=head2 C<__model_name> 

  my $name = $obj_or_package->__model_name;

Returns the UML Model name (C<'Foundation::Core::Operation'>) for an object or package of
this Classifier.

=cut
sub __model_name { 'Foundation::Core::Operation' }



=head2 C<__isAbstract>

  $package->__isAbstract;

Returns C<0>.

=cut
sub __isAbstract { 0; }


my $__tangram_schema;
=head2 C<__tangram_schema>

  my $tangram_schema $obj_or_package->__tangram_schema

Returns a HASH ref that describes this Classifier for Tangram.

See L<UMMF::Export::Perl::Tangram|UMMF::Export::Perl::Tangram>

=cut
sub __tangram_schema
{
  my ($self) = @_;

  $__tangram_schema ||=
  {
   'classes' =>
   [
     'UMMF::UML_1_5::Foundation::Core::Operation' =>
     {
       'table' => 'Foundation__Core__Operation',
       'abstract' => 0,
       'slots' => 
       { 
	 # Attributes
	 	       'concurrency'
       => {
	 'type_impl' => 'string',
                                             'col' => 'concurrency', 

                                                                                                                   }
      ,
         	       'isRoot'
       => {
	 'type_impl' => 'string',
                                             'col' => 'isRoot', 

                                                                                                                   }
      ,
         	       'isLeaf'
       => {
	 'type_impl' => 'string',
                                             'col' => 'isLeaf', 

                                                                                                                   }
      ,
         	       'isAbstract'
       => {
	 'type_impl' => 'string',
                                             'col' => 'isAbstract', 

                                                                                                                   }
      ,
         
	 # Associations
	 	 	       'collaboration_representedOperation'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration',

                           'table' => 'Foundation__Core__Operation__collaboration_representedOperation', 

                                                               'coll' => 'representedOperation',

                                                                               }
      ,
                  	 	       'method'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML_1_5::Foundation::Core::Method',

                           'table' => 'Foundation__Core__Operation__method', 

                                                               'coll' => 'specification',

                                                                               }
      ,
                  	 	       'occurance'
       => {
	 'type_impl' => 'iset',
         'class' => 'UMMF::UML_1_5::Behavioral_Elements::State_Machines::CallEvent',

                           'table' => 'Foundation__Core__Operation__occurance', 

                                                               'coll' => 'operation',

                                                                               }
      ,
                  	 	                     	 	                     	 	                            },
       'bases' => [  'UMMF::UML_1_5::Foundation::Core::BehavioralFeature',  ],
       'sql' => {

       },
     },
   ],

   'sql' =>
   {
    # Note Tangram::Ref::get_exporter() has
    # "UPDATE $table SET $self->{col} = $refid WHERE id = $id",
    # The id_col is hard-coded, 
    # Thus id_col will not work.
    #'id_col' => '__sid',
    #'class_col' => '__stype',
   },
     # 'set_id' => sub { }
     # 'get_id' => sub { }

      
  };
}


#################################################################
# Class Attributes
#


            

#################################################################
# Class Associations
#


    

#################################################################
# Initialization
#


=head2 C<___initialize>

Initialize all Attributes and AssociationEnds in a instance of this Classifier.
Does B<not> initalize slots in its Generalizations.

See also: C<__initialize>.

=cut
sub ___initialize
{
  my ($self) = @_;

  # Attributes

    # Attribute concurrency
  if ( exists $self->{'concurrency'} ) {
    my $x = $self->{'concurrency'};
    $self->{'concurrency'} = undef;
        $self->set_concurrency($x);
      } else {
        $self->{'concurrency'} = "sequential";
      }
  
    # Attribute isRoot
  if ( exists $self->{'isRoot'} ) {
    my $x = $self->{'isRoot'};
    $self->{'isRoot'} = undef;
        $self->set_isRoot($x);
      } else {
        $self->{'isRoot'} = "false";
      }
  
    # Attribute isLeaf
  if ( exists $self->{'isLeaf'} ) {
    my $x = $self->{'isLeaf'};
    $self->{'isLeaf'} = undef;
        $self->set_isLeaf($x);
      } else {
        $self->{'isLeaf'} = "false";
      }
  
    # Attribute isAbstract
  if ( exists $self->{'isAbstract'} ) {
    my $x = $self->{'isAbstract'};
    $self->{'isAbstract'} = undef;
        $self->set_isAbstract($x);
      } else {
        $self->{'isAbstract'} = "false";
      }
  


  # Associations

  # AssociationEnd 
  #  representedOperation 0..1
  #  <--> 
  #  collaboration_representedOperation 0..* UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration.
    if ( defined $self->{'collaboration_representedOperation'} ) {
    my $x = $self->{'collaboration_representedOperation'};
        $self->{'collaboration_representedOperation'} = Set::Object->new();
        $self->set_collaboration_representedOperation(@$x);
  }
  
  # AssociationEnd 
  #  specification 1
  #  <--> 
  #  method 0..* UMMF::UML_1_5::Foundation::Core::Method.
    if ( defined $self->{'method'} ) {
    my $x = $self->{'method'};
        $self->{'method'} = Set::Object->new();
        $self->set_method(@$x);
  }
  
  # AssociationEnd 
  #  operation 1
  #  <--> 
  #  occurance 0..* UMMF::UML_1_5::Behavioral_Elements::State_Machines::CallEvent.
    if ( defined $self->{'occurance'} ) {
    my $x = $self->{'occurance'};
        $self->{'occurance'} = Set::Object->new();
        $self->set_occurance(@$x);
  }
  

  $self;
}


my $__initialize_use;

=head2 C<__initialize>

Initialize all slots in this Classifier and all its Generalizations.

See also: C<___initialize>.

=cut
sub __initialize
{
  my ($self) = @_;

  # $DB::single = 1;

  unless ( ! $__initialize_use ) {
    $__initialize_use = 1;
    $self->__use('UMMF::UML_1_5::Foundation::Core::Element');
    $self->__use('UMMF::UML_1_5::Foundation::Core::ModelElement');
    $self->__use('UMMF::UML_1_5::Foundation::Core::Feature');
    $self->__use('UMMF::UML_1_5::Foundation::Core::BehavioralFeature');
  }

  $self->UMMF::UML_1_5::Foundation::Core::Operation::___initialize;
  $self->UMMF::UML_1_5::Foundation::Core::Element::___initialize;
  $self->UMMF::UML_1_5::Foundation::Core::ModelElement::___initialize;
  $self->UMMF::UML_1_5::Foundation::Core::Feature::___initialize;
  $self->UMMF::UML_1_5::Foundation::Core::BehavioralFeature::___initialize;

  $self;
}
      

=head2 C<__create>

Calls all <<create>> Methods for this Classifier and all Generalizations.

See also: C<___create>.

=cut
sub __create
{
  my ($self, @args) = @_;

  # $DB::single = 1;
  $self->UMMF::UML_1_5::Foundation::Core::Operation::___create(@args);
  $self->UMMF::UML_1_5::Foundation::Core::Element::___create();
  $self->UMMF::UML_1_5::Foundation::Core::ModelElement::___create();
  $self->UMMF::UML_1_5::Foundation::Core::Feature::___create();
  $self->UMMF::UML_1_5::Foundation::Core::BehavioralFeature::___create();

  $self;
}




#################################################################
# Attributes
#



=for html <hr/>

=cut

#################################################################
# Attribute concurrency
# type = UMMF::UML_1_5::Foundation::Data_Types::CallConcurrencyKind
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = "sequential"

=head2 C<concurrency>

  my $val = $obj->concurrency;

Returns the L<UMMF::UML_1_5::Foundation::Data_Types::CallConcurrencyKind|UMMF::UML_1_5::Foundation::Data_Types::CallConcurrencyKind> value of Attribute C<concurrency>.

=cut
sub concurrency ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'concurrency'};

  ;

  $val;
}


=head2 C<set_concurrency>

  $obj->set_concurrency($val);

Sets the value of Attribute C<concurrency>.
C<$val> must be of type L<UMMF::UML_1_5::Foundation::Data_Types::CallConcurrencyKind|UMMF::UML_1_5::Foundation::Data_Types::CallConcurrencyKind> or C<undef>.
Returns C<$obj>.

=cut
sub set_concurrency ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    $self->__use('UMMF::UML_1_5::Foundation::Data_Types::CallConcurrencyKind')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Operation.concurrency");
  }

    $self->{'concurrency'} = $val
  ;

  ;

  $self;
}


=head2 C<count_concurrency>

  $obj->count_concurrency;

Returns the number of elements (0 or 1) in C<concurrency>.

=cut
sub count_concurrency ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'concurrency'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute isRoot
# type = UMMF::UML_1_5::Foundation::Data_Types::Boolean
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = "false"

=head2 C<isRoot>

  my $val = $obj->isRoot;

Returns the L<UMMF::UML_1_5::Foundation::Data_Types::Boolean|UMMF::UML_1_5::Foundation::Data_Types::Boolean> value of Attribute C<isRoot>.

=cut
sub isRoot ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isRoot'};

  ;

  $val;
}


=head2 C<set_isRoot>

  $obj->set_isRoot($val);

Sets the value of Attribute C<isRoot>.
C<$val> must be of type L<UMMF::UML_1_5::Foundation::Data_Types::Boolean|UMMF::UML_1_5::Foundation::Data_Types::Boolean> or C<undef>.
Returns C<$obj>.

=cut
sub set_isRoot ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    ;
  }

    $self->{'isRoot'} = $val
  ;

  ;

  $self;
}


=head2 C<count_isRoot>

  $obj->count_isRoot;

Returns the number of elements (0 or 1) in C<isRoot>.

=cut
sub count_isRoot ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isRoot'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute isLeaf
# type = UMMF::UML_1_5::Foundation::Data_Types::Boolean
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = "false"

=head2 C<isLeaf>

  my $val = $obj->isLeaf;

Returns the L<UMMF::UML_1_5::Foundation::Data_Types::Boolean|UMMF::UML_1_5::Foundation::Data_Types::Boolean> value of Attribute C<isLeaf>.

=cut
sub isLeaf ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isLeaf'};

  ;

  $val;
}


=head2 C<set_isLeaf>

  $obj->set_isLeaf($val);

Sets the value of Attribute C<isLeaf>.
C<$val> must be of type L<UMMF::UML_1_5::Foundation::Data_Types::Boolean|UMMF::UML_1_5::Foundation::Data_Types::Boolean> or C<undef>.
Returns C<$obj>.

=cut
sub set_isLeaf ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    ;
  }

    $self->{'isLeaf'} = $val
  ;

  ;

  $self;
}


=head2 C<count_isLeaf>

  $obj->count_isLeaf;

Returns the number of elements (0 or 1) in C<isLeaf>.

=cut
sub count_isLeaf ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isLeaf'};

  ;

  defined $val ? 1 : 0;
}



=for html <hr/>

=cut

#################################################################
# Attribute isAbstract
# type = UMMF::UML_1_5::Foundation::Data_Types::Boolean
# multiplicity = 1
# ordering = unordered
# ownerScope = instance
# initialValue = "false"

=head2 C<isAbstract>

  my $val = $obj->isAbstract;

Returns the L<UMMF::UML_1_5::Foundation::Data_Types::Boolean|UMMF::UML_1_5::Foundation::Data_Types::Boolean> value of Attribute C<isAbstract>.

=cut
sub isAbstract ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isAbstract'};

  ;

  $val;
}


=head2 C<set_isAbstract>

  $obj->set_isAbstract($val);

Sets the value of Attribute C<isAbstract>.
C<$val> must be of type L<UMMF::UML_1_5::Foundation::Data_Types::Boolean|UMMF::UML_1_5::Foundation::Data_Types::Boolean> or C<undef>.
Returns C<$obj>.

=cut
sub set_isAbstract ($$)
{
  my ($self, $val) = @_;

  ;

  if ( defined $val ) {
    ;
  }

    $self->{'isAbstract'} = $val
  ;

  ;

  $self;
}


=head2 C<count_isAbstract>

  $obj->count_isAbstract;

Returns the number of elements (0 or 1) in C<isAbstract>.

=cut
sub count_isAbstract ($)
{
  my ($self) = @_;

  ;

  my $val = $self->{'isAbstract'};

  ;

  defined $val ? 1 : 0;
}




#################################################################
# Association
#


=for html <hr/>

=cut

#################################################################
# AssociationEnd representedOperation <---> collaboration_representedOperation
# type = UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration
# multiplicity = 0..*
# ordering = 

=head2 C<collaboration_representedOperation>

  my @val = $obj->collaboration_representedOperation;
  my $ary_val = $obj->collaboration_representedOperation;

Returns the AssociationEnd C<collaboration_representedOperation> values of type L<UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration|UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub collaboration_representedOperation ($)
{
  my ($self) = @_;

    my $x = $self->{'collaboration_representedOperation'};

  # confess("Container for collaboration_representedOperation $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_collaboration_representedOperation>

  $obj->set_collaboration_representedOperation(@val);

Sets the AssociationEnd C<collaboration_representedOperation> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration|UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration>.
Returns C<$obj>.

=cut
sub set_collaboration_representedOperation ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_collaboration_representedOperation;
  $self->add_collaboration_representedOperation(@val);
}


=head2 C<add_collaboration_representedOperation>

  $obj->add_collaboration_representedOperation(@val);

Adds AssociationEnd C<collaboration_representedOperation> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration|UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration>.
Returns C<$obj>.

=cut
sub add_collaboration_representedOperation ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'collaboration_representedOperation'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Operation.collaboration_representedOperation");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_representedOperation($self) if $old;
    $val->add_representedOperation($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_collaboration_representedOperation>

  $obj->remove_collaboration_representedOperation(@val);

Removes the AssociationEnd C<collaboration_representedOperation> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration|UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration>.
Returns C<$obj>.

=cut
sub remove_collaboration_representedOperation ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'collaboration_representedOperation'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Operation.collaboration_representedOperation");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_representedOperation($self) if $old;
    $val->add_representedOperation($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_collaboration_representedOperation>

  $obj->clear_collaboration_representedOperation;

Clears the AssociationEnd C<collaboration_representedOperation> links to L<UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration|UMMF::UML_1_5::Behavioral_Elements::Collaborations::Collaboration>.
Returns C<$obj>.

=cut
sub clear_collaboration_representedOperation ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'collaboration_representedOperation'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'collaboration_representedOperation'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_representedOperation($self) if $old;
    $val->add_representedOperation($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_collaboration_representedOperation>

  $obj->count_collaboration_representedOperation;

Returns the number of elements associated with C<collaboration_representedOperation>.

=cut
sub count_collaboration_representedOperation ($)
{
  my ($self) = @_;

  my $x = $self->{'collaboration_representedOperation'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd specification <---> method
# type = UMMF::UML_1_5::Foundation::Core::Method
# multiplicity = 0..*
# ordering = 

=head2 C<method>

  my @val = $obj->method;
  my $ary_val = $obj->method;

Returns the AssociationEnd C<method> values of type L<UMMF::UML_1_5::Foundation::Core::Method|UMMF::UML_1_5::Foundation::Core::Method>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub method ($)
{
  my ($self) = @_;

    my $x = $self->{'method'};

  # confess("Container for method $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_method>

  $obj->set_method(@val);

Sets the AssociationEnd C<method> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::Method|UMMF::UML_1_5::Foundation::Core::Method>.
Returns C<$obj>.

=cut
sub set_method ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_method;
  $self->add_method(@val);
}


=head2 C<add_method>

  $obj->add_method(@val);

Adds AssociationEnd C<method> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::Method|UMMF::UML_1_5::Foundation::Core::Method>.
Returns C<$obj>.

=cut
sub add_method ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'method'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::Foundation::Core::Method')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Operation.method");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_specification($self) if $old;
    $val->add_specification($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_method>

  $obj->remove_method(@val);

Removes the AssociationEnd C<method> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Foundation::Core::Method|UMMF::UML_1_5::Foundation::Core::Method>.
Returns C<$obj>.

=cut
sub remove_method ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'method'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Foundation::Core::Method')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Operation.method");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_specification($self) if $old;
    $val->add_specification($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_method>

  $obj->clear_method;

Clears the AssociationEnd C<method> links to L<UMMF::UML_1_5::Foundation::Core::Method|UMMF::UML_1_5::Foundation::Core::Method>.
Returns C<$obj>.

=cut
sub clear_method ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'method'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'method'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_specification($self) if $old;
    $val->add_specification($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_method>

  $obj->count_method;

Returns the number of elements associated with C<method>.

=cut
sub count_method ($)
{
  my ($self) = @_;

  my $x = $self->{'method'};

    defined $x ? $x->size : 0;
  }




=for html <hr/>

=cut

#################################################################
# AssociationEnd operation <---> occurance
# type = UMMF::UML_1_5::Behavioral_Elements::State_Machines::CallEvent
# multiplicity = 0..*
# ordering = 

=head2 C<occurance>

  my @val = $obj->occurance;
  my $ary_val = $obj->occurance;

Returns the AssociationEnd C<occurance> values of type L<UMMF::UML_1_5::Behavioral_Elements::State_Machines::CallEvent|UMMF::UML_1_5::Behavioral_Elements::State_Machines::CallEvent>.
In array context, returns all the objects in the Association.
In scalar context, returns an array ref of all the objects in the Association.

=cut
sub occurance ($)
{
  my ($self) = @_;

    my $x = $self->{'occurance'};

  # confess("Container for occurance $x is not a blessed ref: " . Data::Dumper->new([ $self ], [qw($self)])->Maxdepth(2)->Dump()) if $x && ref($x) !~ /::/;
 
  wantarray ? ($x ? $x->members() : ()) : [ $x ? $x->members() : () ];
  
}


=head2 C<set_occurance>

  $obj->set_occurance(@val);

Sets the AssociationEnd C<occurance> value.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::State_Machines::CallEvent|UMMF::UML_1_5::Behavioral_Elements::State_Machines::CallEvent>.
Returns C<$obj>.

=cut
sub set_occurance ($@)
{
  my ($self, @val) = @_;
  
  $self->clear_occurance;
  $self->add_occurance(@val);
}


=head2 C<add_occurance>

  $obj->add_occurance(@val);

Adds AssociationEnd C<occurance> values.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::State_Machines::CallEvent|UMMF::UML_1_5::Behavioral_Elements::State_Machines::CallEvent>.
Returns C<$obj>.

=cut
sub add_occurance ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'occurance'} ||= Set::Object->new();
    my $old; # Place holder for other MACRO.
  
  for my $val ( @val ) {
    # Recursion lock
        next if $x->includes($val);
        $self->__use('UMMF::UML_1_5::Behavioral_Elements::State_Machines::CallEvent')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Operation.occurance");

    # Recursion lock
        $x->insert($val);
    # weaken?
    
    # Remove and add associations with other ends.
        
    $old->remove_operation($self) if $old;
    $val->add_operation($self)    if $val;

    }
  
  $self;
}


=head2 C<remove_occurance>

  $obj->remove_occurance(@val);

Removes the AssociationEnd C<occurance> values C<@val>.
Elements of C<@val> must of type L<UMMF::UML_1_5::Behavioral_Elements::State_Machines::CallEvent|UMMF::UML_1_5::Behavioral_Elements::State_Machines::CallEvent>.
Returns C<$obj>.

=cut
sub remove_occurance ($@)
{
  my ($self, @val) = @_;
  
    my $x = $self->{'occurance'} ||= Set::Object->new();
  
  for my $old ( @val ) {
    # Recursion lock
        next unless $x->includes($old);
    
    my $val = $old;
      
    $self->__use('UMMF::UML_1_5::Behavioral_Elements::State_Machines::CallEvent')->__typecheck($val, "UMMF::UML_1_5::Foundation::Core::Operation.occurance");

    # Recursion lock
        $x->remove($old);
    
    $val = undef;

    # Remove associations with other ends.

        
    $old->remove_operation($self) if $old;
    $val->add_operation($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<clear_occurance>

  $obj->clear_occurance;

Clears the AssociationEnd C<occurance> links to L<UMMF::UML_1_5::Behavioral_Elements::State_Machines::CallEvent|UMMF::UML_1_5::Behavioral_Elements::State_Machines::CallEvent>.
Returns C<$obj>.

=cut
sub clear_occurance ($) 
{
  my ($self) = @_;
  
    my $x = $self->{'occurance'} ||= Set::Object->new();
  
  my $val; # Place holder for other MACRO.
  
    $self->{'occurance'} = Set::Object->new(); # Recursion lock
  for my $old ( $x->members() ) {     # Recursion lock
  
    # Remove associations with other ends.

        
    $old->remove_operation($self) if $old;
    $val->add_operation($self)    if $val;

  ;

  }
  
  $self;
}


=head2 C<count_occurance>

  $obj->count_occurance;

Returns the number of elements associated with C<occurance>.

=cut
sub count_occurance ($)
{
  my ($self) = @_;

  my $x = $self->{'occurance'};

    defined $x ? $x->size : 0;
  }







# End of Class Operation


=pod

=for html <hr/>

I<END OF DOCUMENT>

=cut

############################################################################

1; # is true!

############################################################################

### Keep these comments at end of file: kstephens@users.sourceforge.net 2003/04/06 ###
### Local Variables: ###
### mode:perl ###
### perl-indent-level:2 ###
### perl-continued-statement-offset:0 ###
### perl-brace-offset:0 ###
### perl-label-offset:0 ###
### End: ###

